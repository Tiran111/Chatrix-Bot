import os
import asyncio
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
PORT = int(os.environ.get('PORT', 10000))

async def start(update: Update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ /start"""
    user = update.effective_user
    logger.info(f"üéØ –û—Ç—Ä–∏–º–∞–Ω–æ /start –≤—ñ–¥ {user.id}")
    
    await update.message.reply_text(
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
        f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
        f"üÜî –í–∞—à ID: `{user.id}`\n"
        f"‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ!\n\n"
        f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*",
        parse_mode='Markdown'
    )

async def setup_handlers(application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    
    # –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –≤–∞—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    try:
        from handlers.profile import start_profile_creation, show_my_profile
        from handlers.search import search_profiles, search_by_city
        from handlers.admin import handle_admin_actions
        
        # –î–æ–¥–∞—î–º–æ –≤–∞—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏)$'), start_profile_creation))
        application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
        application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
        application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
        application.add_handler(MessageHandler(filters.Regex('^(üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), handle_admin_actions))
        
        logger.info("‚úÖ –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—è–∫—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏: {e}")
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π echo –æ–±—Ä–æ–±–Ω–∏–∫
        async def echo(update: Update, context):
            await update.message.reply_text(f"üîî –í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")
        
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
        logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–æ—Å—Ç–∏–π echo –æ–±—Ä–æ–±–Ω–∏–∫")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        print("=" * 50)
        print("üöÄ –ó–∞–ø—É—Å–∫ Chatrix Bot...")
        print("=" * 50)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        try:
            from database_postgres import db
            user_count = db.get_users_count()
            print(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –±–∞–∑—ñ: {user_count}")
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        await setup_handlers(application)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
        await application.initialize()
        await application.bot.set_webhook(WEBHOOK_URL)
        
        print("‚úÖ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        print(f"üåê –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        print("üü¢ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –∑ –≤–µ–±—Ö—É–∫–æ–º
        await application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL,
            secret_token='webhook_secret'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())