import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler
from config import BOT_TOKEN, ADMIN_ID
from database.models import db
from keyboards.main_menu import get_main_menu, get_rating_keyboard, get_back_to_menu_keyboard
from utils.states import user_states, States
from handlers.profile_handlers import handle_photo, handle_text, show_profile, handle_delete_photo
from handlers.rating_handlers import handle_like, handle_dislike, show_random_profile, handle_skip
from handlers.match_handlers import handle_matches, show_match_details
from handlers.admin_handlers import admin_panel, show_statistics, broadcast_message, handle_broadcast_text
from utils.helpers import send_notification, validate_user, cleanup_inactive_users

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = update.effective_user
        chat = update.effective_chat
        
        logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start –≤ —á–∞—Ç—ñ {chat.id}")
        
        # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        success = db.add_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name
        )
        
        if not success:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id} –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
            )
            return
        
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states[user.id] = States.START
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            "üí´ <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –∑–Ω–∞–π–æ–º—Å—Ç–≤!</b>\n\n"
            "üåü <b>–©–æ —Ç–∏ –º–æ–∂–µ—à —Ä–æ–±–∏—Ç–∏:</b>\n"
            "üì∏ ‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –¥–æ 3 —Ñ–æ—Ç–æ —É —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
            "üíû ‚Ä¢ –û—Ü—ñ–Ω—é–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö –ª—é–¥–µ–π\n"
            "ü§ù ‚Ä¢ –ó–Ω–∞—Ö–æ–¥–∏—Ç–∏ –º–∞—Ç—á—ñ (–≤–∑–∞—î–º–Ω—ñ –ª–∞–π–∫–∏)\n"
            "üë§ ‚Ä¢ –ù–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
            "üìä ‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "üéØ <b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</b>\n"
            "1. –î–æ–¥–∞–π —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è —É–≤–∞–≥–∏\n"
            "2. –û—Ü—ñ–Ω—é–π —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "3. –ó–Ω–∞—Ö–æ–¥—å –º–∞—Ç—á—ñ —Ç–∞ —Å–ø—ñ–ª–∫—É–π—Å—è\n"
            "4. –ü—ñ–¥–≤–∏—â—É–π —Å–≤—ñ–π —Ä–µ–π—Ç–∏–Ω–≥\n\n"
            "üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ß–∏–º —è–∫—ñ—Å–Ω—ñ—à—ñ —Ñ–æ—Ç–æ, —Ç–∏–º –±—ñ–ª—å—à–µ –ª–∞–π–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞—î—à!"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_main_menu(),
            parse_mode='HTML'
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if ADMIN_ID:
            admin_notification = (
                f"üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:\n"
                f"üë§ –Ü–º'—è: {user.first_name}\n"
                f"üÜî ID: {user.id}\n"
                f"üìõ Username: @{user.username if user.username else '–ù–µ–º–∞—î'}\n"
                f"üìÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await context.bot.send_message(ADMIN_ID, admin_notification)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ñ—É–Ω–∫—Ü—ñ—ó start: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            )
        except Exception:
            pass

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"üîò –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ –ø—É–Ω–∫—Ç –º–µ–Ω—é: {data}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        db.cursor.execute('UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE telegram_id = ?', (user_id,))
        db.conn.commit()
        
        if data == 'add_photo':
            user_states[user_id] = States.ADDING_PHOTO
            current_photos = db.get_profile_photos(user_id)
            
            photo_text = (
                f"üì∏ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ</b>\n\n"
                f"–ó–∞—Ä–∞–∑ —É –≤–∞—à–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ: <b>{len(current_photos)}/3</b> —Ñ–æ—Ç–æ\n\n"
            )
            
            if len(current_photos) < 3:
                photo_text += (
                    "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é.\n"
                    "‚ö†Ô∏è <b>–í–∏–º–æ–≥–∏ –¥–æ —Ñ–æ—Ç–æ:</b>\n"
                    "‚Ä¢ –ß—ñ—Ç–∫–µ —Ç–∞ —è–∫—ñ—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
                    "‚Ä¢ –ë–∞–∂–∞–Ω–æ –Ω–∞ —Å–≤—ñ—Ç–ª–æ–º—É —Ñ–æ–Ω—ñ\n"
                    "‚Ä¢ –û—Å–æ–±–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–±—Ä–µ –≤–∏–¥–Ω–æ\n"
                    "‚Ä¢ –ë–µ–∑ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n"
                    "üìé –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —É —Ü–µ–π —á–∞—Ç"
                )
            else:
                photo_text += (
                    "‚ùå –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–æ—Ç–æ (3).\n"
                    "–©–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—ñ—Ç—å –æ–¥–Ω–µ –∑ —ñ—Å–Ω—É—é—á–∏—Ö."
                )
            
            await query.edit_message_text(
                photo_text,
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode='HTML'
            )
            
        elif data == 'view_profile':
            await show_profile(update, context)
            
        elif data == 'rate_users':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ñ–æ—Ç–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_photos = db.get_profile_photos(user_id)
            if not user_photos:
                await query.edit_message_text(
                    "‚ùå <b>–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é!</b>\n\n"
                    "–©–æ–± –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ —É —Å–≤–æ—î–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ.",
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode='HTML'
                )
                return
                
            user_states[user_id] = States.RATING
            await show_random_profile(user_id, context, query.message)
            
        elif data == 'view_matches':
            await handle_matches(update, context)
            
        elif data == 'my_rating':
            user = db.get_user(user_id)
            if user:
                rating_text = (
                    f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                    f"‚ù§Ô∏è <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {user.get('rating', 5.0):.1f}\n"
                    f"üëç <b>–û—Ç—Ä–∏–º–∞–Ω–æ –ª–∞–π–∫—ñ–≤:</b> {user.get('likes_count', 0)}\n"
                    f"ü§ù <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ç—á—ñ–≤:</b> {len(db.get_user_matches(user_id))}\n"
                    f"üìÖ <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b> {user.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')[:10]}\n"
                    f"üïê <b>–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {user.get('last_active', '–ù–µ–≤—ñ–¥–æ–º–æ')[:16]}\n"
                )
                await query.edit_message_text(
                    rating_text,
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    reply_markup=get_back_to_menu_keyboard()
                )
                
        elif data == 'settings':
            await query.edit_message_text(
                "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="notifications")],
                    [InlineKeyboardButton("üë§ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="edit_profile")],
                    [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data="delete_account")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ]),
                parse_mode='HTML'
            )
            
        elif data == 'help':
            help_text = (
                "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                "üì∏ <b>–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ</b> - –î–æ–¥–∞–π—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ —É –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å\n"
                "üíû <b>–û—Ü—ñ–Ω—é–≤–∞—Ç–∏</b> - –û—Ü—ñ–Ω—é–π—Ç–µ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
                "ü§ù <b>–ú–æ—ó –º–∞—Ç—á—ñ</b> - –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≤–∑–∞—î–º–Ω—ñ –ª–∞–π–∫–∏\n"
                "üë§ <b>–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å</b> - –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
                "üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b> - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞\n\n"
                "‚ùì <b>–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:</b>\n"
                "‚Ä¢ <b>–Ø–∫ –∑–Ω–∞–π—Ç–∏ –º–∞—Ç—á?</b> - –û—Ü—ñ–Ω—é–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø—Ä–∏ –≤–∑–∞—î–º–Ω–æ–º—É –ª–∞–π–∫—É –±—É–¥–µ –º–∞—Ç—á\n"
                "‚Ä¢ <b>–ß–æ–º—É –º–µ–Ω–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –æ—Ü—ñ–Ω—é—î?</b> - –î–æ–¥–∞–π—Ç–µ —è–∫—ñ—Å–Ω—ñ —Ñ–æ—Ç–æ —Ç–∞ –∞–∫—Ç–∏–≤—É–π—Ç–µ—Å—è\n"
                "‚Ä¢ <b>–Ø–∫ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥?</b> - –û—Ç—Ä–∏–º—É–π—Ç–µ –ª–∞–π–∫–∏ –≤—ñ–¥ —ñ–Ω—à–∏—Ö\n\n"
                "üìû <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> @support_username"
            )
            await query.edit_message_text(
                help_text,
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode='HTML'
            )
            
        elif data == 'back_to_menu':
            user_states[user_id] = States.START
            await query.edit_message_text(
                "üîô –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}", exc_info=True)
        try:
            await query.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu()
            )
        except Exception:
            pass

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ"""
    try:
        user = update.effective_user
        user_id = user.id
        state = user_states.get(user_id, States.START)
        
        if state == States.ADDING_PHOTO:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª —Ñ–æ—Ç–æ –∑ –Ω–∞–π–≤–∏—â–æ—é —è–∫—ñ—Å—Ç—é
            photo_file = await update.message.photo[-1].get_file()
            file_id = photo_file.file_id
            
            logger.info(f"üì∏ –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ –≤—ñ–¥ {user_id}, file_id: {file_id}")
            
            # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
            success = db.add_profile_photo(user_id, file_id)
            
            if success:
                await update.message.reply_text(
                    "‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é!",
                    reply_markup=get_main_menu()
                )
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
                user_states[user_id] = States.START
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–ª–∏–≤–æ, –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç (3 —Ñ–æ—Ç–æ).",
                    reply_markup=get_main_menu()
                )
        else:
            await update.message.reply_text(
                "üì∏ –©–æ–± –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ, –æ–±–µ—Ä—ñ—Ç—å '–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ' –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é üëá",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user_id = update.effective_user.id
        text = update.message.text
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        db.cursor.execute('UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE telegram_id = ?', (user_id,))
        db.conn.commit()
        
        await update.message.reply_text(
            "üí¨ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üëá",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    try:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}", exc_info=True)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—É
        if ADMIN_ID:
            error_message = (
                f"üö® <b>–ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ:</b>\n"
                f"üïê –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üìù –î–µ—Ç–∞–ª—ñ: {str(context.error)[:1000]}"
            )
            try:
                await context.bot.send_message(ADMIN_ID, error_message, parse_mode='HTML')
            except Exception:
                pass
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –ø–æ–º–∏–ª–æ–∫: {e}")

async def periodic_cleanup(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ—á–∏—â–µ–Ω–Ω—è –∑ models.py
        db.cleanup_old_data()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        db.init_db()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        application.add_error_handler(error_handler)
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_panel))
        application.add_handler(CommandHandler("stats", show_statistics))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ callback-–∑–∞–ø–∏—Ç—ñ–≤
        application.add_handler(CallbackQueryHandler(handle_main_menu, pattern='^(add_photo|view_profile|rate_users|view_matches|my_rating|settings|help|back_to_menu)$'))
        application.add_handler(CallbackQueryHandler(handle_like, pattern='^like_'))
        application.add_handler(CallbackQueryHandler(handle_dislike, pattern='^dislike_'))
        application.add_handler(CallbackQueryHandler(handle_skip, pattern='^skip_'))
        application.add_handler(CallbackQueryHandler(show_match_details, pattern='^match_'))
        application.add_handler(CallbackQueryHandler(handle_delete_photo, pattern='^delete_photo_'))
        application.add_handler(CallbackQueryHandler(broadcast_message, pattern='^broadcast$'))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è broadcast
        application.add_handler(MessageHandler(
            filters.TEXT & filters.Regex(r'^BRD:') & filters.User(ADMIN_ID), 
            handle_broadcast_text
        ))
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –∑–∞–¥–∞—á—ñ
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_repeating(periodic_cleanup, interval=3600, first=10)  # –ö–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            timeout=30
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        db.conn.close()
        logger.info("üî¥ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π")

if __name__ == '__main__':
    main()