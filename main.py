import os
import logging
import asyncio
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥–∏ Flask/Werkzeug
logging.getLogger('werkzeug').setLevel(logging.WARNING)

# Flask app –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!"

@app.route('/health')
def health():
    return "OK", 200

@app.route('/healthz')
def healthz():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

def setup_telegram_bot():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
        from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
        from telegram import Update, ReplyKeyboardMarkup
        from database.models import db
        from keyboards.main_menu import get_main_menu
        from utils.states import user_states, States
        from config import TOKEN, ADMIN_ID
        
        # –Ü–º–ø–æ—Ä—Ç –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        from handlers.profile import start_profile_creation, show_my_profile, handle_main_photo, handle_profile_message
        from handlers.search import search_profiles, search_by_city, handle_like, show_next_profile, show_top_users, show_matches, show_likes, handle_top_selection, show_user_profile
        
        logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Bot...")
        
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
            try:
                user = update.effective_user
                
                logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id})")
                
                # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
                db.add_user(user.id, user.username, user.first_name)
                
                # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
                user_states[user.id] = States.START
                
                # –í—ñ—Ç–∞–Ω–Ω—è
                welcome_text = (
                    f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
                    f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
                    f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
                )
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
                user_data, is_complete = db.get_user_profile(user.id)
                
                if not is_complete:
                    welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
                    keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
                else:
                    keyboard = [
                        ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
                        ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
                        ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
                        ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
                    ]
                
                if user.id == ADMIN_ID:
                    keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
                
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /start: {e}")
                await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º"""
            try:
                user = update.effective_user
                
                contact_text = f"""üë®‚Äçüíº *–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*

üìß –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.

üÜî –í–∞—à ID: `{user.id}`
üë§ –í–∞—à–µ —ñ–º'—è: {user.first_name}

üí¨ *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*"""

                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
                user_states[user.id] = States.CONTACT_ADMIN
                
                await update.message.reply_text(
                    contact_text,
                    reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ contact_admin: {e}")
                await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        async def handle_contact_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
            try:
                user = update.effective_user
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
                if user_states.get(user.id) != States.CONTACT_ADMIN:
                    logger.info(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {user_states.get(user.id)}")
                    return
                
                message_text = update.message.text
                
                if message_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
                    user_states[user.id] = States.START
                    await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
                    return
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                try:
                    admin_message = f"""üì© *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*

üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* {user.first_name}
üÜî *ID:* `{user.id}`
üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
{message_text}"""

                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=admin_message,
                        parse_mode='Markdown'
                    )
                    
                    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    await update.message.reply_text(
                        "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É! –í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                        reply_markup=get_main_menu(user.id)
                    )
                    
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                        reply_markup=get_main_menu(user.id)
                    )
                
                # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
                user_states[user.id] = States.START
                logger.info(f"‚úÖ –°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_contact_message: {e}")
                await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
            try:
                user = update.effective_user
                if user.id != ADMIN_ID:
                    await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", reply_markup=get_main_menu(user.id))
                    return
                
                stats = db.get_statistics()
                male, female, total_active, goals_stats = stats
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_users = db.get_users_count()
                banned_users = len(db.get_banned_users())
                
                stats_text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–Ω–∫–µ—Ç: {total_active}
üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}
üë® –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
üë© –ñ—ñ–Ω–æ–∫: {female}"""

                if goals_stats:
                    stats_text += "\n\nüéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*"
                    for goal, count in goals_stats:
                        stats_text += f"\n‚Ä¢ {goal}: {count}"
                
                await update.message.reply_text(stats_text, parse_mode='Markdown')
                
                # –ê–¥–º—ñ–Ω –º–µ–Ω—é
                keyboard = [
                    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'],
                    ['üì¢ –†–æ–∑—Å–∏–ª–∫–∞', 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É'],
                    ['üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è', 'üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                    ['üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
                ]
                
                await update.message.reply_text(
                    "üëë *–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_admin_panel: {e}")
                await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
            try:
                user = update.effective_user
                if user.id != ADMIN_ID:
                    return
                
                text = update.message.text
                
                logger.info(f"üîß [ADMIN] {user.first_name}: '{text}'")
                
                if text == "üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å" or text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    await show_admin_panel(update, context)
                
                elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
                    from handlers.admin import show_users_management
                    await show_users_management(update, context)
                
                elif text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞":
                    from handlers.admin import start_broadcast
                    await start_broadcast(update, context)
                
                elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É":
                    from handlers.admin import update_database
                    await update_database(update, context)
                
                elif text == "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è":
                    from handlers.admin import show_ban_management
                    await show_ban_management(update, context)
                
                elif text == "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    from handlers.admin import show_detailed_stats
                    await show_detailed_stats(update, context)
                
                elif text == "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
                    await update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_admin_actions: {e}")
                await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
            try:
                user = update.effective_user
                text = update.message.text if update.message.text else ""
                state = user_states.get(user.id, States.START)
                
                logger.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name}: '{text}', —Å—Ç–∞–Ω: {state}")

                # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏" or text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
                    user_states[user.id] = States.START
                    context.user_data.pop('waiting_for_city', None)
                    context.user_data.pop('contact_admin', None)
                    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
                    return

                # 2. –û–±—Ä–æ–±–∫–∞ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º
                if state == States.CONTACT_ADMIN:
                    logger.info(f"üîß –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –≤—ñ–¥ {user.id}")
                    await handle_contact_message(update, context)
                    return

                # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
                if state == States.ADD_MAIN_PHOTO:
                    await handle_main_photo(update, context)
                    return

                # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é
                if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                             States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
                    await handle_profile_message(update, context)
                    return
                
                # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
                if context.user_data.get('waiting_for_city'):
                    clean_city = text.replace('üèôÔ∏è ', '').strip()
                    users = db.get_users_by_city(clean_city, user.id)
                    
                    if users:
                        user_data = users[0]
                        await show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
                        context.user_data['search_users'] = users
                        context.user_data['current_index'] = 0
                        context.user_data['search_type'] = 'city'
                    else:
                        await update.message.reply_text(
                            f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                            reply_markup=get_main_menu(user.id)
                        )
                    
                    context.user_data['waiting_for_city'] = False
                    return
                
                # 6. –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –∞–¥–º—ñ–Ω–∞
                if user.id == ADMIN_ID:
                    state = user_states.get(user.id)
                    if state == States.ADMIN_BAN_USER:
                        from handlers.admin import handle_ban_user
                        await handle_ban_user(update, context)
                        return
                    elif state == States.ADMIN_UNBAN_USER:
                        from handlers.admin import handle_unban_user
                        await handle_unban_user(update, context)
                        return
                    elif state == States.BROADCAST:
                        from handlers.admin import handle_broadcast_message
                        await handle_broadcast_message(update, context)
                        return
                
                # 7. –ê–¥–º—ñ–Ω-–º–µ–Ω—é
                if user.id == ADMIN_ID:
                    if text in ["üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üì¢ –†–æ–∑—Å–∏–ª–∫–∞", "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
                        await handle_admin_actions(update, context)
                        return
                    
                    # –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω-–∫–Ω–æ–ø–æ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
                    if text in ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]:
                        if text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
                            from handlers.admin import show_users_list
                            await show_users_list(update, context)
                        elif text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                            from handlers.admin import start_ban_user
                            await start_ban_user(update, context)
                        elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                            from handlers.admin import start_unban_user
                            await start_unban_user(update, context)
                        elif text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö":
                            from handlers.admin import show_banned_users
                            await show_banned_users(update, context)
                        elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ":
                            await show_admin_panel(update, context)
                        return
                
                # 8. –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
                if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
                    await start_profile_creation(update, context)
                    return
                
                elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
                    await show_my_profile(update, context)
                    return
                
                elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
                    await search_profiles(update, context)
                    return
                
                elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
                    await search_by_city(update, context)
                    return
                
                elif text == "‚ù§Ô∏è –õ–∞–π–∫":
                    await handle_like(update, context)
                    return
                
                elif text == "‚û°Ô∏è –î–∞–ª—ñ":
                    await show_next_profile(update, context)
                    return
                
                elif text == "üîô –ú–µ–Ω—é":
                    await update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
                    return
                
                elif text == "üèÜ –¢–æ–ø":
                    await show_top_users(update, context)
                    return
                
                elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
                    await show_matches(update, context)
                    return
                
                elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
                    await show_likes(update, context)
                    return
                
                elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
                    await handle_top_selection(update, context)
                    return
                
                # 9. –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º
                elif text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
                    await contact_admin(update, context)
                    return
                
                # 10. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
                await update.message.reply_text(
                    "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
                    reply_markup=get_main_menu(user.id)
                )
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")
                await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
            try:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}", exc_info=True)
                if update and update.effective_user:
                    await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

        def setup_handlers(application):
            """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
            application.add_handler(CommandHandler("start", start))
            
            # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
            application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
            application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
            application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
            application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
            application.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
            application.add_handler(MessageHandler(filters.Regex('^üîô –ú–µ–Ω—é$'), lambda u, c: u.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(u.effective_user.id))))
            application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
            application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
            application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
            application.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
            application.add_handler(MessageHandler(filters.Regex("^üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º$"), contact_admin))
            
            # –ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏
            application.add_handler(MessageHandler(filters.Regex('^(üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ|üì¢ –†–æ–∑—Å–∏–ª–∫–∞|üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É|üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è|üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), handle_admin_actions))
            application.add_handler(MessageHandler(filters.Regex('^(üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤|üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö|üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)$'), universal_handler))
            
            # –§–æ—Ç–æ —Ç–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
            application.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))

            # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
            application.add_error_handler(error_handler)

        # –°—Ç–≤–æ—Ä—é—î–º–æ application
        application = Application.builder().token(TOKEN).build()
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setup_handlers(application)
        
        return application
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
        return None

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = setup_telegram_bot()
    if application:
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
        await application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    asyncio.run(run_bot())

def start_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}...")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

if __name__ == "__main__":
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–ø—É—Å–∫—É —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è
    run_type = os.environ.get("RUN_TYPE", "web")
    
    if run_type == "bot":
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot...")
        start_bot()
    else:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask Web Server...")
        start_flask()