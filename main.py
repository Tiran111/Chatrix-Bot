import logging
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("=" * 60)
print("üöÄ BUILD PROCESS STARTED...")
print("=" * 60)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TOKEN = os.environ.get('BOT_TOKEN', 'test_token')
ADMIN_ID = os.environ.get('ADMIN_ID', '1385645772')
PORT = int(os.environ.get('PORT', 10000))

print(f"‚úÖ Config loaded: TOKEN={TOKEN[:10]}..., ADMIN_ID={ADMIN_ID}, PORT={PORT}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
try:
    from flask import Flask, request
    print("‚úÖ Flask imported successfully")
    
    from telegram import Update
    from telegram.ext import Application, CommandHandler
    print("‚úÖ python-telegram-bot imported successfully")
    
    # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        from database_postgres import db
        print("‚úÖ Database imported successfully")
    except ImportError as e:
        print(f"‚ö†Ô∏è Database import failed: {e}")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É
        class DatabaseStub:
            def get_user(self, user_id): return None
            def add_user(self, user_id, username, first_name): 
                print(f"üìù Added user: {user_id} - {first_name}")
                return True
            def get_users_count(self): return 0
            def get_statistics(self): return (0, 0, 0, [])
        db = DatabaseStub()
    
    # –£—Å–ø—ñ—à–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
    print("=" * 60)
    print("‚úÖ ALL DEPENDENCIES IMPORTED SUCCESSFULLY!")
    print("ü§ñ BOT IS READY FOR DEPLOYMENT")
    print("=" * 60)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return "ü§ñ Chatrix Bot is running!", 200
    
    @app.route('/health')
    def health():
        return "OK", 200
    
    @app.route('/ping')
    def ping():
        return "pong", 200
    
    @app.route('/webhook', methods=['POST'])
    def webhook():
        try:
            data = request.get_json()
            logger.info(f"üì© Webhook received")
            return "OK", 200
        except Exception as e:
            logger.error(f"‚ùå Webhook error: {e}")
            return "Error", 500
    
    # –ü—Ä–æ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /start
    async def start_command(update: Update, context):
        user = update.effective_user
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            f"üíû Chatrix Bot —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!\n"
            f"üÜî –í–∞—à ID: {user.id}"
        )
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    def init_bot():
        try:
            application = Application.builder().token(TOKEN).build()
            application.add_handler(CommandHandler("start", start_command))
            application.initialize()
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ —Ç–µ—Å—Ç–æ–≤–∏–π
            if TOKEN != 'test_token':
                WEBHOOK_URL = os.environ.get('WEBHOOK_URL', f"https://chatrix-bot-4m1p.onrender.com/webhook")
                application.bot.set_webhook(WEBHOOK_URL)
                print(f"‚úÖ Webhook set: {WEBHOOK_URL}")
            
            print("‚úÖ Bot initialized successfully!")
            return application
        except Exception as e:
            print(f"‚ùå Bot initialization error: {e}")
            return None
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –±–æ—Ç–∞
    bot_application = None
    
    @app.route('/init', methods=['POST'])
    def initialize_bot():
        global bot_application
        if not bot_application:
            bot_application = init_bot()
            return "Bot initialized", 200
        return "Bot already initialized", 200
        
except ImportError as e:
    print(f"‚ùå Import error during build: {e}")
    print("‚ùå This is normal during build process")
    print("‚úÖ Dependencies will be installed by Render")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π Flask app –¥–ª—è build process
    class FlaskStub:
        def __init__(self, name):
            self.name = name
        def route(self, rule, **options):
            def decorator(f):
                return f
            return decorator
    
    app = FlaskStub(__name__)
    
    # –ü—Ä–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è build
    def home():
        return "ü§ñ Chatrix Bot - Building...", 200
    
    def health():
        return "OK", 200

print("=" * 60)
print("‚úÖ BUILD PROCESS COMPLETED SUCCESSFULLY!")
print("=" * 60)

if __name__ == '__main__':
    # –ü—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞
    if 'app' in locals() and hasattr(app, 'run'):
        print(f"üåê Starting server on port {PORT}...")
        app.run(host='0.0.0.0', port=PORT, debug=False)
    else:
        print("‚ö†Ô∏è Running in build mode - server not started")