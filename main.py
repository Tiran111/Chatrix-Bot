import logging
import os
import asyncio
import threading
from flask import Flask, request, jsonify
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
try:
    from database_postgres import db
    logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    raise

try:
    from config import ADMIN_ID, TOKEN
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    raise

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
PORT = int(os.environ.get('PORT', 10000))

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–æ—Ç–∞
application = None

# ==================== –ü–†–û–°–¢–Ü –§–£–ù–ö–¶–Ü–á ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    await update.message.reply_text(f"üëã –í—ñ—Ç–∞—é, {user.first_name}! –ë–æ—Ç –ø—Ä–∞—Ü—é—î! üéâ")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ: {context.error}", exc_info=True)

def setup_handlers(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    app.add_handler(CommandHandler("start", start))
    app.add_error_handler(error_handler)

async def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global application
    
    try:
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setup_handlers(application)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
        await application.initialize()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
        await application.bot.set_webhook(WEBHOOK_URL)
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        logger.info(f"üåê –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        return application
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
        return None

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç–æ–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
        bot_app = loop.run_until_complete(init_bot())
        
        if not bot_app:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")
            return
        
        logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø–æ—Ç–æ—Ü—ñ")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ event loop
        loop.run_forever()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ—Ç–æ—Ü—ñ –±–æ—Ç–∞: {e}")

def process_update_safe(update_data):
    """–ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    global application
    
    try:
        if not application:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
            return False
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(update_data, application.bot)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ event loop –±–æ—Ç–∞
        if hasattr(application, '_get_running_loop'):
            loop = application._get_running_loop()
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ loop
            import asyncio
            loop = asyncio.get_event_loop()
        
        future = asyncio.run_coroutine_threadsafe(
            application.process_update(update), 
            loop
        )
        
        # –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            future.result(timeout=10)
            logger.info("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            return True
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return False

# ==================== FLASK ROUTES ====================

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/status')
def status():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É"""
    global application
    return jsonify({
        'status': 'running',
        'bot_initialized': application is not None,
        'port': PORT
    }), 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        update_data = request.get_json()
        if update_data is None:
            return "Empty update data", 400
            
        logger.info(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫ –≤—ñ–¥ Telegram")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        success = process_update_safe(update_data)
        
        if success:
            return 'ok'
        else:
            return "Error processing update", 500
        
    except Exception as e:
        logger.error(f"‚ùå Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return "Error", 200

# ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
    import time
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}")
    logger.info(f"üåê URL: https://chatrix-bot-4m1p.onrender.com")
    
    # –í–∞–∂–ª–∏–≤–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ö–æ—Å—Ç —ñ –ø–æ—Ä—Ç
    app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

if __name__ == '__main__':
    main()