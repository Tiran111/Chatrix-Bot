import logging
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("=" * 60)
print("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–Ñ–¢–¨–°–Ø...")
print("=" * 60)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
try:
    from flask import Flask, request
    print("‚úÖ Flask —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    
    from telegram import Update
    from telegram.ext import Application, CommandHandler
    print("‚úÖ python-telegram-bot —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    
    try:
        from database_postgres import db
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞")
    except ImportError:
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞ - —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É")
        class DatabaseStub:
            def get_user(self, user_id): return None
            def add_user(self, user_id, username, first_name): 
                print(f"üìù –î–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id} - {first_name}")
                return True
        db = DatabaseStub()
    
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("‚ùå –ë–£–î–¨ –õ–ê–°–ö–ê, –ü–ï–†–ï–í–Ü–†–¢–ï pyproject.toml")
    exit(1)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TOKEN = os.environ.get('BOT_TOKEN', 'test_token')
ADMIN_ID = int(os.environ.get('ADMIN_ID', '1385645772'))
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', "https://chatrix-bot-4m1p.onrender.com/webhook")

print(f"‚úÖ –¢–æ–∫–µ–Ω: {TOKEN[:10]}...")
print(f"‚úÖ ADMIN_ID: {ADMIN_ID}")
print(f"‚úÖ –ü–æ—Ä—Ç: {PORT}")
print(f"‚úÖ –í–µ–±—Ö—É–∫: {WEBHOOK_URL}")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –ü—Ä–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç–∏
@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        logger.info(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫: {data}")
        return "OK", 200
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "Error", 500

# –ü—Ä–æ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
        f"üíû Chatrix Bot —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!\n"
        f"üÜî –í–∞—à ID: {user.id}"
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
def init_bot():
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start_command))
        application.initialize()
        application.bot.set_webhook(WEBHOOK_URL)
        print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        return application
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
        return None

print("=" * 60)
print("‚úÖ –í–°–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –£–°–ü–Ü–®–ù–û –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û!")
print("ü§ñ –°–ï–†–í–ï–† –ì–û–¢–û–í–ò–ô –î–û –†–û–ë–û–¢–ò")
print("=" * 60)

if __name__ == '__main__':
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞
    bot_app = init_bot()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}...")
    app.run(host='0.0.0.0', port=PORT, debug=False)