import logging
import os
import asyncio
import threading
from flask import Flask, request, jsonify
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, 
    filters, ConversationHandler, CallbackQueryHandler
)
from telegram.error import TelegramError

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
try:
    from database_postgres import db
    logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    raise

try:
    from config import ADMIN_ID, TOKEN
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    raise

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
PORT = int(os.environ.get('PORT', 10000))

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–æ—Ç–∞
application = None

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
PROFILE_AGE, PROFILE_GENDER, PROFILE_CITY, PROFILE_SEEKING_GENDER, PROFILE_GOAL, PROFILE_BIO = range(6)

# ==================== –§–£–ù–ö–¶–Ü–á –ü–†–û–§–Ü–õ–Æ ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
    success = db.add_user(user.id, user.username, user.first_name)
    
    if success:
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            "ü§ñ –Ø - Chatrix Bot, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤ —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\n"
            "üìù –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å, —â–æ–± —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–≥–ª–∏ –≤–∞—Å –∑–Ω–∞–π—Ç–∏!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–æ—Ñ—ñ–ª—å
        user_data, is_complete = db.get_user_profile(user.id)
        
        if is_complete:
            await show_profile(update, context)
        else:
            await start_profile_creation(update, context)
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def start_profile_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    await update.message.reply_text(
        "üìù –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å!\n\n"
        "–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤? (–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 18 –¥–æ 100)",
        reply_markup=ReplyKeyboardRemove()
    )
    return PROFILE_AGE

async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–∫—É"""
    try:
        age = int(update.message.text)
        if age < 18 or age > 100:
            await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –≤—ñ–¥ 18 –¥–æ 100 —Ä–æ–∫—ñ–≤:")
            return PROFILE_AGE
        
        context.user_data['age'] = age
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ
        keyboard = [
            ["üë® –ß–æ–ª–æ–≤—ñ–∫", "üë© –ñ—ñ–Ω–∫–∞"],
            ["üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üéØ –í–∞—à–∞ —Å—Ç–∞—Ç—å?",
            reply_markup=reply_markup
        )
        return PROFILE_GENDER
        
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (—á–∏—Å–ª–æ):")
        return PROFILE_AGE

async def profile_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç—ñ"""
    text = update.message.text
    
    if "üë®" in text:
        context.user_data['gender'] = 'male'
    elif "üë©" in text:
        context.user_data['gender'] = 'female'
    elif "üö´" in text:
        await update.message.reply_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:")
        return PROFILE_GENDER
    
    await update.message.reply_text(
        "üèôÔ∏è –í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ –≤–∏ –∂–∏–≤–µ—Ç–µ? (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –õ—å–≤—ñ–≤, –û–¥–µ—Å–∞)",
        reply_markup=ReplyKeyboardRemove()
    )
    return PROFILE_CITY

async def profile_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –º—ñ—Å—Ç–∞"""
    city = update.message.text.strip()
    
    if len(city) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
        return PROFILE_CITY
    
    context.user_data['city'] = city
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–≥–æ —à—É–∫–∞—î
    keyboard = [
        ["üë® –ß–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –ñ—ñ–Ω–æ–∫", "üë´ –í—Å—ñ—Ö"],
        ["üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üîç –ö–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏?",
        reply_markup=reply_markup
    )
    return PROFILE_SEEKING_GENDER

async def profile_seeking_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É —Å—Ç–∞—Ç—ñ"""
    text = update.message.text
    
    if "üë®" in text:
        context.user_data['seeking_gender'] = 'male'
    elif "üë©" in text:
        context.user_data['seeking_gender'] = 'female'
    elif "üë´" in text:
        context.user_data['seeking_gender'] = 'all'
    elif "üö´" in text:
        await update.message.reply_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:")
        return PROFILE_SEEKING_GENDER
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ü—ñ–ª—ñ
    keyboard = [
        ["üíï –°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "üë• –î—Ä—É–∂–±–∞", "üí¨ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è"],
        ["üé≠ –§–ª—ñ—Ä—Ç", "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéØ –Ø–∫–∞ –≤–∞—à–∞ —Ü—ñ–ª—å?",
        reply_markup=reply_markup
    )
    return PROFILE_GOAL

async def profile_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ü—ñ–ª—ñ"""
    text = update.message.text
    
    goal_map = {
        "üíï –°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏": "–°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏",
        "üë• –î—Ä—É–∂–±–∞": "–î—Ä—É–∂–±–∞", 
        "üí¨ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è": "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
        "üé≠ –§–ª—ñ—Ä—Ç": "–§–ª—ñ—Ä—Ç"
    }
    
    if text in goal_map:
        context.user_data['goal'] = goal_map[text]
    elif "üö´" in text:
        await update.message.reply_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:")
        return PROFILE_GOAL
    
    await update.message.reply_text(
        "üìñ –†–æ–∑–∫–∞–∂—ñ—Ç—å —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ:\n"
        "(–í–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏, —Ö–æ–±—ñ, —â–æ —à—É–∫–∞—î—Ç–µ —Ç–æ—â–æ)\n\n"
        "üí° –ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–õ—é–±–ª—é –ø–æ–¥–æ—Ä–æ–∂—ñ, –∫—ñ–Ω–æ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫. –®—É–∫–∞—é —Ü—ñ–∫–∞–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤.'",
        reply_markup=ReplyKeyboardRemove()
    )
    return PROFILE_BIO

async def profile_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –±—ñ–æ"""
    bio = update.message.text.strip()
    
    if len(bio) < 10:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–µ–±–µ (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤):")
        return PROFILE_BIO
    
    context.user_data['bio'] = bio
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –≤ –±–∞–∑—É
    user = update.effective_user
    success = db.update_or_create_user_profile(
        telegram_id=user.id,
        age=context.user_data['age'],
        gender=context.user_data['gender'],
        city=context.user_data['city'],
        seeking_gender=context.user_data['seeking_gender'],
        goal=context.user_data['goal'],
        bio=context.user_data['bio']
    )
    
    if success:
        await update.message.reply_text(
            "üéâ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üì± –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏\n"  
            "‚Ä¢ ‚ù§Ô∏è –°—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏\n"
            "‚Ä¢ üíå –°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –º–∞—Ç—á–∞–º–∏\n"
            "‚Ä¢ ‚öôÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_profile(update, context)
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    return ConversationHandler.END

async def cancel_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    await update.message.reply_text(
        "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_data, is_complete = db.get_user_profile(user.id)
    
    if not user_data or not is_complete:
        await update.message.reply_text(
            "üìù –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π. –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –π–æ–≥–æ!",
            reply_markup=ReplyKeyboardRemove()
        )
        await start_profile_creation(update, context)
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
        f"üÜî ID: {user_data['telegram_id']}\n"
        f"üë§ –Ü–º'—è: {user_data['first_name']}\n"
        f"üìÖ –í—ñ–∫: {user_data['age']}\n"
        f"üéØ –°—Ç–∞—Ç—å: {'üë® –ß–æ–ª–æ–≤—ñ–∫' if user_data['gender'] == 'male' else 'üë© –ñ—ñ–Ω–∫–∞'}\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {user_data['city']}\n"
        f"üîç –®—É–∫–∞—é: {get_seeking_text(user_data['seeking_gender'])}\n"
        f"üéØ –¶—ñ–ª—å: {user_data['goal']}\n"
        f"üìñ –ü—Ä–æ —Å–µ–±–µ: {user_data['bio']}\n\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user_data['rating']}/10\n"
        f"‚ù§Ô∏è –õ–∞–π–∫—ñ–≤: {user_data['likes_count']}\n"
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ç–æ
    photos = db.get_profile_photos(user.id)
    if photos:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º
        await update.message.reply_photo(
            photo=photos[0],
            caption=profile_text,
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            profile_text,
            parse_mode='HTML'
        )

def get_seeking_text(seeking_gender):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É"""
    if seeking_gender == 'male':
        return 'üë® –ß–æ–ª–æ–≤—ñ–∫—ñ–≤'
    elif seeking_gender == 'female':
        return 'üë© –ñ—ñ–Ω–æ–∫'
    else:
        return 'üë´ –í—Å—ñ—Ö'

# ==================== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò ====================

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "ü§ñ <b>Chatrix Bot - –î–æ–≤—ñ–¥–∫–∞</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n"
        "/profile - –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n"
        "/search - –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç\n"
        "/likes - –ü–µ—Ä–µ–≥–ª—è–¥ –ª–∞–π–∫—ñ–≤\n"
        "/matches - –í–∞—à—ñ –º–∞—Ç—á—ñ\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "üí° <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>\n"
        "1. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å (/start)\n"
        "2. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç–∏ (/search)\n"
        "3. –°—Ç–∞–≤—Ç–µ –ª–∞–π–∫–∏ ‚ù§Ô∏è\n"
        "4. –°–ø—ñ–ª–∫—É–π—Ç–µ—Å—è –∑ –º–∞—Ç—á–∞–º–∏ üíå\n\n"
        "‚öôÔ∏è –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: /admin"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    await show_profile(update, context)

# ==================== –ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò ====================

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    admin_text = (
        "üëë <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {db.get_users_count()}\n\n"
        "üõ†Ô∏è –ö–æ–º–∞–Ω–¥–∏:\n"
        "/stats - –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/users - –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        "/broadcast - –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
    )
    await update.message.reply_text(admin_text, parse_mode='HTML')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    male_count, female_count, total_active, goals_stats = db.get_statistics()
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {db.get_users_count()}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {total_active}\n\n"
        f"üë® –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male_count}\n"
        f"üë© –ñ—ñ–Ω–æ–∫: {female_count}\n\n"
        "üéØ <b>–¶—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
    )
    
    for goal_stat in goals_stats:
        stats_text += f"‚Ä¢ {goal_stat['goal']}: {goal_stat['count']}\n"
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

# ==================== –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–ú–ò–õ–û–ö ====================

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ: {context.error}", exc_info=True)
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

# ==================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í ====================

def setup_handlers(app):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    
    # ConversationHandler –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    profile_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_profile_creation)],
        states={
            PROFILE_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_age)],
            PROFILE_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_gender)],
            PROFILE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_city)],
            PROFILE_SEEKING_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_seeking_gender)],
            PROFILE_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_goal)],
            PROFILE_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_bio)],
        },
        fallbacks=[CommandHandler('cancel', cancel_profile)]
    )
    
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(profile_conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CommandHandler("stats", stats_command))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(error_handler)

# ==================== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê ====================

async def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global application
    
    try:
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setup_handlers(application)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
        await application.initialize()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
        await application.bot.set_webhook(WEBHOOK_URL)
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        logger.info(f"üåê –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        return application
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
        return None

# ==================== FLASK ROUTES ====================

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/status')
def status():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É"""
    global application
    return jsonify({
        'status': 'running',
        'bot_initialized': application is not None,
        'port': PORT
    }), 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        if not application:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
            return "Bot not initialized", 500
            
        update_data = request.get_json()
        if update_data is None:
            return "Empty update data", 400
            
        logger.info("üì® –û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫ –≤—ñ–¥ Telegram")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(update_data, application.bot)
        application.update_queue.put(update)
        
        return 'ok', 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return "Error", 500

# ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç–æ–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
        bot_app = loop.run_until_complete(init_bot())
        
        if not bot_app:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")
            return
        
        logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø–æ—Ç–æ—Ü—ñ")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ event loop
        loop.run_forever()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ—Ç–æ—Ü—ñ –±–æ—Ç–∞: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞
    import time
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}")
    logger.info(f"üåê URL: https://chatrix-bot-4m1p.onrender.com")
    
    app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

if __name__ == '__main__':
    main()