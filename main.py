import logging
import os
import asyncio
import threading
import time
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
import urllib.request
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logging.getLogger('werkzeug').setLevel(logging.WARNING)

app = Flask(__name__)

WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
PORT = int(os.environ.get('PORT', 10000))

application = None
event_loop = None
bot_initialized = False
bot_initialization_started = False

def keep_alive():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞—Ç–∫—É –±–µ–∑ requests"""
    while True:
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ urllib –∑–∞–º—ñ—Å—Ç—å requests
            with urllib.request.urlopen('https://chatrix-bot-4m1p.onrender.com/health', timeout=10) as response:
                logger.info(f"üîÑ Keep-alive: {response.getcode()}")
        except Exception as e:
            logger.error(f"‚ùå Keep-alive –ø–æ–º–∏–ª–∫–∞: {e}")
        
        # –ß–µ–∫–∞—î–º–æ 4 —Ö–≤–∏–ª–∏–Ω–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        time.sleep(240)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ keep-alive –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
keep_alive_thread.start()

def validate_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    required_vars = ['BOT_TOKEN', 'ADMIN_ID']
    missing_vars = []
    
    for var in required_vars:
        if not os.environ.get(var):
            missing_vars.append(var)
    
    if missing_vars:
        error_msg = f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {', '.join(missing_vars)}"
        logger.error(error_msg)
        raise ValueError(error_msg)
    
    token = os.environ.get('BOT_TOKEN')
    if not token or token == 'your_bot_token_here':
        error_msg = "‚ùå –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–∫–µ–Ω. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞."
        logger.error(error_msg)
        raise ValueError(error_msg)
    
    try:
        admin_id = int(os.environ.get('ADMIN_ID', 0))
        if admin_id == 0:
            raise ValueError("ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except ValueError:
        raise ValueError("‚ùå ADMIN_ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º")
    
    logger.info("‚úÖ –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")

def run_async_tasks():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    global event_loop
    event_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(event_loop)
    event_loop.run_forever()

async_thread = threading.Thread(target=run_async_tasks, daemon=True)
async_thread.start()

def setup_handlers(app_instance):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    logger.info("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤...")
    
    from handlers.profile import start_profile_creation, show_my_profile, handle_main_photo, handle_profile_message
    from handlers.search import search_profiles, search_by_city, show_next_profile, show_top_users, show_matches, show_likes, handle_top_selection, show_user_profile
    from handlers.admin import show_admin_panel, handle_admin_actions, show_users_list, show_banned_users, handle_broadcast_message, start_ban_user, start_unban_user, handle_ban_user, handle_unban_user, handle_user_search
    from keyboards.main_menu import get_main_menu
    
    # –ö–æ–º–∞–Ω–¥–∏
    app_instance.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app_instance.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
    app_instance.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
    app_instance.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
    app_instance.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
    app_instance.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
    app_instance.add_handler(MessageHandler(filters.Regex('^üîô –ú–µ–Ω—é$'), lambda update, context: update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(update.effective_user.id))))
    app_instance.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
    app_instance.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
    app_instance.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
    app_instance.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
    app_instance.add_handler(MessageHandler(filters.Regex("^üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º$"), contact_admin))
    app_instance.add_handler(CallbackQueryHandler(handle_like_callback, pattern='^like_'))

    # –î–û–î–ê–Ñ–ú–û –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –ù–û–í–ò–• –ö–ù–û–ü–û–ö - –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –õ–Ø–ú–ë–î–ê
    app_instance.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), lambda update, context: handle_like_button(update, context)))
    app_instance.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), lambda update, context: handle_next_button(update, context)))

    # –ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏
    app_instance.add_handler(MessageHandler(filters.Regex('^(üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ|üì¢ –†–æ–∑—Å–∏–ª–∫–∞|üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É|üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è|üóëÔ∏è –°–∫–∏–Ω—É—Ç–∏ –ë–î)$'), handle_admin_actions))
    app_instance.add_handler(MessageHandler(filters.Regex('^(üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤|üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö|üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)$'), universal_handler))
    
    # –§–æ—Ç–æ —Ç–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    app_instance.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
    app_instance.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))

    app_instance.add_error_handler(error_handler)
    logger.info("‚úÖ –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É...")
    init_bot()
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}...")
    app.run(host='0.0.0.0', port=PORT, debug=False)