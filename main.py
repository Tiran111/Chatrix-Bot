from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database.models import db
from keyboards.main_menu import get_main_menu
from utils.states import user_states, States
from config import TOKEN, ADMIN_ID
import logging
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    
    logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id})")
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
    db.add_user(user.id, user.username, user.first_name)
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_states[user.id] = States.START
    
    # –í—ñ—Ç–∞–Ω–Ω—è
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
        f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤, –¥–µ —Ç–∏ –º–æ–∂–µ—à:\n\n"
        f"‚Ä¢ üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        f"‚Ä¢ üíï –ó–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ü—ñ–∫–∞–≤–∏—Ö –ª—é–¥–µ–π\n"
        f"‚Ä¢ ‚ù§Ô∏è –°—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –º–∞—Ç—á—ñ\n"
        f"‚Ä¢ üèÜ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        f"‚Ä¢ üèôÔ∏è –®—É–∫–∞—Ç–∏ –∑–∞ –º—ñ—Å—Ç–æ–º\n\n"
        f"üöÄ *–ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Render!*\n\n"
        f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    user_data, is_complete = db.get_user_profile(user.id)
    
    if not is_complete:
        welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
        keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
    else:
        keyboard = [
            ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
            ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
            ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
            ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    from utils.states import user_states, States
    from keyboards.main_menu import get_main_menu
    from database.models import db
    
    user = update.effective_user
    text = update.message.text if update.message.text else ""
    state = user_states.get(user.id, States.START)
    
    logger.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name}: '{text}', —Å—Ç–∞–Ω: {state}")

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∞–Ω—ñ–≤
    if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏" or text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        logger.info(f"üîç –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")
        user_states[user.id] = States.START
        context.user_data['waiting_for_city'] = False
        context.user_data['contact_admin'] = False
        await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
        return

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
    if state == States.ADD_MAIN_PHOTO:
        logger.info(f"üì∑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ ADD_MAIN_PHOTO")
        from handlers.profile import handle_main_photo
        await handle_main_photo(update, context)
        return

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é
    if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                 States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
        logger.info(f"üîß –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É handle_profile_message, —Å—Ç–∞–Ω: {state}")
        from handlers.profile import handle_profile_message
        await handle_profile_message(update, context)
        return
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
    if context.user_data.get('waiting_for_city'):
        logger.info(f"üîß –û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º: '{text}'")
        
        from handlers.search import show_user_profile
        
        # –í–∏–¥–∞–ª—è—î–º–æ –µ–º–æ–¥–∑—ñ –∑ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ (—è–∫—â–æ —î)
        clean_city = text.replace('üèôÔ∏è ', '').strip()
        
        logger.info(f"üîç –®—É–∫–∞—î–º–æ –≤ –º—ñ—Å—Ç—ñ: {clean_city}")
        users = db.get_users_by_city(clean_city, user.id)
        logger.info(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}")
        
        if users:
            user_data = users[0]
            await show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
            context.user_data['search_users'] = users
            context.user_data['current_index'] = 0
            context.user_data['search_type'] = 'city'
        else:
            await update.message.reply_text(
                f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                reply_markup=get_main_menu(user.id)
            )
        
        context.user_data['waiting_for_city'] = False
        return
    
    # 5. –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
        context.user_data['contact_admin'] = True
        await update.message.reply_text(
            "üìß –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ñ–Ω –æ—Ç—Ä–∏–º–∞—î –π–æ–≥–æ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True)
        )
        return
    
    # 6. –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    if context.user_data.get('contact_admin'):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        admin_message = f"üì© *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*\n\n" \
                       f"üë§ –Ü–º'—è: {user.first_name}\n" \
                       f"üÜî ID: {user.id}\n" \
                       f"üìß Username: @{user.username if user.username else '–ù–µ–º–∞—î'}\n\n" \
                       f"üí¨ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*\n{text}"
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown'
            )
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É! –í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                reply_markup=get_main_menu(user.id)
            )
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu(user.id)
            )
        
        context.user_data['contact_admin'] = False
        return
    
    # 7. –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
        from handlers.profile import start_profile_creation
        await start_profile_creation(update, context)
        return
    
    elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        from handlers.profile import show_my_profile
        await show_my_profile(update, context)
        return
    
    elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
        from handlers.search import search_profiles
        await search_profiles(update, context)
        return
    
    elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
        from handlers.search import search_by_city
        await search_by_city(update, context)
        return
    
    elif text == "‚ù§Ô∏è –õ–∞–π–∫":
        from handlers.search import handle_like
        await handle_like(update, context)
        return
    
    elif text == "‚û°Ô∏è –î–∞–ª—ñ":
        from handlers.search import show_next_profile
        await show_next_profile(update, context)
        return
    
    elif text == "üîô –ú–µ–Ω—é" or text == "üîô –ü–æ—à—É–∫":
        from handlers.search import handle_navigation
        await handle_navigation(update, context)
        return
    
    elif text == "üèÜ –¢–æ–ø":
        from handlers.search import show_top_users
        await show_top_users(update, context)
        return
    
    elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
        from handlers.search import show_matches
        await show_matches(update, context)
        return
    
    elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
        from handlers.search import show_likes
        await show_likes(update, context)
        return
    
    elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
        from handlers.search import handle_top_selection
        await handle_top_selection(update, context)
        return
    
    # 8. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
    await update.message.reply_text(
        "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu(user.id)
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}")
    try:
        if update and update.effective_user:
            await update.message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start"
            )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Chatrix Bot –Ω–∞ Render...")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
        application.add_handler(CommandHandler("start", start))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin
        try:
            from handlers.admin import show_admin_panel
            application.add_handler(CommandHandler("admin", show_admin_panel))
            logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ admin –¥–æ–¥–∞–Ω–æ")
        except ImportError as e:
            logger.warning(f"‚ÑπÔ∏è –û–±—Ä–æ–±–Ω–∏–∫ admin –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
        
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
        try:
            from handlers.profile import start_profile_creation, show_my_profile, handle_main_photo
            application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
            application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
            application.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
            logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é –¥–æ–¥–∞–Ω—ñ")
        except ImportError as e:
            logger.warning(f"‚ÑπÔ∏è –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ: {e}")
        
        # –ü–æ—à—É–∫
        try:
            from handlers.search import search_profiles, search_by_city, handle_like, show_next_profile, handle_navigation, show_top_users, show_matches, show_likes, handle_top_selection
            application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
            application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
            application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
            application.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
            application.add_handler(MessageHandler(filters.Regex('^(üîô –ü–æ—à—É–∫|üîô –ú–µ–Ω—é|üîô –°–∫–∞—Å—É–≤–∞—Ç–∏)$'), handle_navigation))
            
            # –¢–æ–ø —Ç–∞ –º–∞—Ç—á—ñ
            application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
            application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
            application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
            application.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
            logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ—à—É–∫—É –¥–æ–¥–∞–Ω—ñ")
        except ImportError as e:
            logger.warning(f"‚ÑπÔ∏è –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ—à—É–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ: {e}")
        
        # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ (–û–°–¢–ê–ù–ù–Ü–ô!)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))
        application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, universal_handler))

        # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        application.add_error_handler(error_handler)

        logger.info("‚úÖ –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–¥–∞–Ω—ñ")
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Render!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()