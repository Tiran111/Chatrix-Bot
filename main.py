from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database.models import db
from keyboards.main_menu import get_main_menu
from utils.states import user_states, States
from config import TOKEN, ADMIN_ID
import logging
import sys

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    print(f"üÜï –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id})")
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
    db.add_user(user.id, user.username, user.first_name)
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_states[user.id] = States.START
    
    # –í—ñ—Ç–∞–Ω–Ω—è
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
        f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤, –¥–µ —Ç–∏ –º–æ–∂–µ—à:\n\n"
        f"‚Ä¢ üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        f"‚Ä¢ üíï –ó–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ü—ñ–∫–∞–≤–∏—Ö –ª—é–¥–µ–π\n"
        f"‚Ä¢ ‚ù§Ô∏è –°—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –º–∞—Ç—á—ñ\n"
        f"‚Ä¢ üèÜ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        f"‚Ä¢ üèôÔ∏è –®—É–∫–∞—Ç–∏ –∑–∞ –º—ñ—Å—Ç–æ–º\n\n"
        f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    user_data, is_complete = db.get_user_profile(user.id)
    
    if not is_complete:
        welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
        keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
    else:
        keyboard = [
            ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
            ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
            ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
            ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from utils.states import user_states, States
    from keyboards.main_menu import get_main_menu
    from database.models import db
    
    user = update.effective_user
    text = update.message.text if update.message.text else ""
    state = user_states.get(user.id, States.START)
    
    print(f"üîç [UNIVERSAL] {user.first_name}: —Ç–µ–∫—Å—Ç='{text}', —Å—Ç–∞–Ω={state}")

    # 0. –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê –ë–õ–û–ö–£–í–ê–ù–ù–Ø
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text(
            "üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó."
        )
        return

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∞–Ω—ñ–≤
    if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏" or text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        print(f"üîç [UNIVERSAL] –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")
        user_states[user.id] = States.START
        context.user_data['waiting_for_city'] = False
        context.user_data['contact_admin'] = False
        await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
        return

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
    if state == States.ADD_MAIN_PHOTO:
        print(f"üì∑ [UNIVERSAL] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ ADD_MAIN_PHOTO, –æ–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ç–æ")
        from handlers.profile import handle_main_photo
        await handle_main_photo(update, context)
        return

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é
    if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                 States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
        print(f"üîß [UNIVERSAL] –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É handle_profile_message, —Å—Ç–∞–Ω: {state}")
        from handlers.profile import handle_profile_message
        await handle_profile_message(update, context)
        return
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
    if context.user_data.get('waiting_for_city'):
        print(f"üîß [UNIVERSAL] –û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º: '{text}'")
        
        from handlers.search import show_user_profile
        
        # –í–∏–¥–∞–ª—è—î–º–æ –µ–º–æ–¥–∑—ñ –∑ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ (—è–∫—â–æ —î)
        clean_city = text.replace('üèôÔ∏è ', '').strip()
        
        print(f"üîç –®—É–∫–∞—î–º–æ –≤ –º—ñ—Å—Ç—ñ: {clean_city}")
        users = db.get_users_by_city(clean_city, user.id)
        print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}")
        
        if users:
            user_data = users[0]
            await show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
            context.user_data['search_users'] = users
            context.user_data['current_index'] = 0
            context.user_data['search_type'] = 'city'
        else:
            await update.message.reply_text(
                f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                reply_markup=get_main_menu(user.id)
            )
        
        context.user_data['waiting_for_city'] = False
        return
    
    # 5. –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
        from handlers.profile import start_profile_creation
        await start_profile_creation(update, context)
        return
    
    elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        from handlers.profile import show_my_profile
        await show_my_profile(update, context)
        return
    
    elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
        from handlers.search import search_profiles
        await search_profiles(update, context)
        return
    
    elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
        from handlers.search import search_by_city
        await search_by_city(update, context)
        return
    
    elif text == "‚ù§Ô∏è –õ–∞–π–∫":
        from handlers.search import handle_like
        await handle_like(update, context)
        return
    
    elif text == "‚û°Ô∏è –î–∞–ª—ñ":
        from handlers.search import show_next_profile
        await show_next_profile(update, context)
        return
    
    elif text == "üîô –ú–µ–Ω—é" or text == "üîô –ü–æ—à—É–∫":
        from handlers.search import handle_navigation
        await handle_navigation(update, context)
        return
    
    elif text == "üèÜ –¢–æ–ø":
        from handlers.search import show_top_users
        await show_top_users(update, context)
        return
    
    elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
        from handlers.search import show_matches
        await show_matches(update, context)
        return
    
    elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
        from handlers.search import show_likes
        await show_likes(update, context)
        return
    
    elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
        from handlers.search import handle_top_selection
        await handle_top_selection(update, context)
        return
    
    # 6. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
    await update.message.reply_text(
        "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu(user.id)
    )

def main():
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –¥–æ–¥–∞—Ç–∫–∞
        if not TOKEN:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            print("üìù –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:")
            print("1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ @BotFather –≤ Telegram")
            print("2. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /newbot")
            print("3. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω")
            print("4. –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —è–∫ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TELEGRAM_BOT_TOKEN –Ω–∞ Railway")
            print("5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫")
            sys.exit(1)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Ç–æ–∫–µ–Ω–∞
        if ':' not in TOKEN:
            print("‚ùå –ù–ï–í–Ü–†–ù–ò–ô –§–û–†–ú–ê–¢ –¢–û–ö–ï–ù–ê!")
            print("–¢–æ–∫–µ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
            sys.exit(1)
            
        print(f"‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ, –ø–æ—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫...")
        
        application = Application.builder().token(TOKEN).build()
        print("‚úÖ –î–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
        application.add_handler(CommandHandler("start", start))
        print("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ start –¥–æ–¥–∞–Ω–æ")
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin
        from handlers.admin import show_admin_panel
        application.add_handler(CommandHandler("admin", show_admin_panel))
        print("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ admin –¥–æ–¥–∞–Ω–æ")
        
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
        from handlers.profile import start_profile_creation, show_my_profile
        application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
        application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
        
        # –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ (–¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó)
        from handlers.profile import handle_main_photo
        application.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
        
        # –ü–æ—à—É–∫
        from handlers.search import search_profiles, search_by_city, handle_like, show_next_profile, handle_navigation, show_top_users, show_matches, show_likes, handle_top_selection
        application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
        application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
        application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
        application.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
        application.add_handler(MessageHandler(filters.Regex('^(üîô –ü–æ—à—É–∫|üîô –ú–µ–Ω—é|üîô –°–∫–∞—Å—É–≤–∞—Ç–∏)$'), handle_navigation))
        
        # –¢–æ–ø —Ç–∞ –º–∞—Ç—á—ñ
        application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
        application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
        application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
        application.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
        
        # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ (–û–°–¢–ê–ù–ù–Ü–ô!)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))
        application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, universal_handler))

        print("‚úÖ –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–¥–∞–Ω—ñ")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
        
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()