import logging
import os
import asyncio
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.error import Conflict, TelegramError

# –Ü–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from database.models import db
from keyboards.main_menu import get_main_menu
from utils.states import user_states, States
from config import TOKEN, ADMIN_ID

# –Ü–º–ø–æ—Ä—Ç –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
from handlers.profile import start_profile_creation, show_my_profile, handle_main_photo, handle_profile_message
from handlers.search import search_profiles, search_by_city, handle_like, show_next_profile, show_top_users, show_matches, show_likes, handle_top_selection, show_user_profile
from handlers.admin import show_admin_panel, handle_admin_actions, show_users_management, show_users_list, start_broadcast, update_database, show_ban_management, show_banned_users, show_detailed_stats, handle_broadcast_message, start_ban_user, start_unban_user, handle_ban_user, handle_unban_user

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥–∏ Flask/Werkzeug
logging.getLogger('werkzeug').setLevel(logging.WARNING)

# Flask app –¥–ª—è Render
app = Flask(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
PORT = int(os.environ.get('PORT', 10000))

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –±–æ—Ç–∞
application = None

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!"

@app.route('/health')
def health():
    return "OK", 200

@app.route('/healthz')
def healthz():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        logger.info("üì® –û—Ç—Ä–∏–º–∞–Ω–æ webhook –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram")
        logger.info(f"üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
        
        if application is None:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
            return "Bot not initialized", 500
            
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram
        update_data = request.get_json()
        logger.info(f"üì¶ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ, —Ç–∏–ø: {type(update_data)}")
        
        if update_data is None:
            logger.error("‚ùå –ü–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return "Empty update data", 400
            
        logger.info(f"üîç –ö–ª—é—á—ñ –≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ: {list(update_data.keys()) if update_data else 'None'}")
        
        update = Update.de_json(update_data, application.bot)
        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ, —Ç–∏–ø: {type(update)}")
        
        # –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if update.message:
            logger.info(f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {update.message.text if update.message.text else 'No text'}")
            logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {update.message.from_user.first_name if update.message.from_user else 'No user'}")
        elif update.callback_query:
            logger.info(f"üîÑ Callback query: {update.callback_query.data}")
        
        # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É
        application.update_queue.put_nowait(update)
        logger.info("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É –æ–±—Ä–æ–±–∫–∏")
        
        return 'ok'
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ webhook: {e}", exc_info=True)
        return "Error", 500

@app.route('/set_webhook')
def set_webhook_route():
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook —á–µ—Ä–µ–∑ HTTP –∑–∞–ø–∏—Ç"""
    logger.info("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook")
    try:
        result = asyncio.run(set_webhook())
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {result}")
        return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

async def set_webhook():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook"""
    global application
    try:
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        logger.info("‚úÖ Application —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setup_handlers(application)
        logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook (–∑ await!)
        logger.info(f"üåê –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –Ω–∞ URL: {WEBHOOK_URL}")
        await application.bot.set_webhook(WEBHOOK_URL)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ webhook
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ webhook: {webhook_info.url}, pending: {webhook_info.pending_update_count}")
        
        logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        return f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}\nPending updates: {webhook_info.pending_update_count}"
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

@app.route('/delete_webhook')
def delete_webhook_route():
    """–í–∏–¥–∞–ª–∏—Ç–∏ webhook —á–µ—Ä–µ–∑ HTTP –∑–∞–ø–∏—Ç"""
    logger.info("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook")
    try:
        result = asyncio.run(delete_webhook())
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook: {result}")
        return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

async def delete_webhook():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook"""
    try:
        if application and application.bot:
            await application.bot.delete_webhook()
            logger.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")
            return "‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ"
        logger.warning("‚ùå –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook")
        return "‚ùå –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

@app.route('/webhook_info')
def webhook_info_route():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook"""
    try:
        result = asyncio.run(get_webhook_info())
        return result
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

async def get_webhook_info():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ webhook"""
    try:
        if application and application.bot:
            webhook_info = await application.bot.get_webhook_info()
            return f"""
            üìä Webhook Info:
            URL: {webhook_info.url}
            Has custom certificate: {webhook_info.has_custom_certificate}
            Pending update count: {webhook_info.pending_update_count}
            Last error date: {webhook_info.last_error_date}
            Last error message: {webhook_info.last_error_message}
            Max connections: {webhook_info.max_connections}
            Allowed updates: {webhook_info.allowed_updates}
            """
        return "‚ùå –ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = update.effective_user
        
        logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
        db.add_user(user.id, user.username, user.first_name)
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –¥–æ–¥–∞–Ω–∏–π –≤ –±–∞–∑—É")
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        user_states[user.id] = States.START
        logger.info(f"‚úÖ –°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ –¥–ª—è {user.id}")
        
        # –í—ñ—Ç–∞–Ω–Ω—è
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
            f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        user_data, is_complete = db.get_user_profile(user.id)
        logger.info(f"üìä –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: complete={is_complete}")
        
        if not is_complete:
            welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
            keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
        else:
            keyboard = [
                ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
                ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
                ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
                ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
            ]
        
        if user.id == ADMIN_ID:
            keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user.first_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /start: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º"""
    try:
        user = update.effective_user
        logger.info(f"üë®‚Äçüíº –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.first_name} –∑–∞–ø–∏—Ç—É—î –∑–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º")
        
        contact_text = f"""üë®‚Äçüíº *–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*

üìß –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.

üÜî –í–∞—à ID: `{user.id}`
üë§ –í–∞—à–µ —ñ–º'—è: {user.first_name}

üí¨ *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*"""

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
        user_states[user.id] = States.CONTACT_ADMIN
        
        await update.message.reply_text(
            contact_text,
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True),
            parse_mode='Markdown'
        )
        logger.info(f"‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –∑–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è {user.first_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ contact_admin: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def handle_contact_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    try:
        user = update.effective_user
        logger.info(f"üì© –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –≤—ñ–¥ {user.first_name}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
        if user_states.get(user.id) != States.CONTACT_ADMIN:
            logger.info(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {user_states.get(user.id)}")
            return
        
        message_text = update.message.text
        
        if message_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            logger.info(f"‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ –∑–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º –¥–ª—è {user.first_name}")
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        try:
            admin_message = f"""üì© *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*

üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* {user.first_name}
üÜî *ID:* `{user.id}`
üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
{message_text}"""

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown'
            )
            
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É! –í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                reply_markup=get_main_menu(user.id)
            )
            logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu(user.id)
            )
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        user_states[user.id] = States.START
        logger.info(f"‚úÖ –°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_contact_message: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def debug_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–±–∞–≥—É –ø–æ—à—É–∫—É"""
    try:
        user = update.effective_user
        logger.info(f"üîß [DEBUG COMMAND] –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        current_user = db.get_user(user.id)
        
        if not current_user:
            await update.message.reply_text("‚ùå –í–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –î–µ–±–∞–≥ –ø–æ—à—É–∫—É
        seeking_gender = current_user.get('seeking_gender', 'all')
        current_gender = current_user.get('gender')
        
        # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        random_user = db.get_random_user(user.id)
        
        debug_info = f"""üîß *–î–ï–ë–ê–ì –ü–û–®–£–ö–£*

üë§ *–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:*
‚Ä¢ ID: `{user.id}`
‚Ä¢ –°—Ç–∞—Ç—å: {current_gender}
‚Ä¢ –®—É–∫–∞—î—Ç–µ: {seeking_gender}

üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É:*
‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç: {'1' if random_user else '0'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–Ü–®–ù–û' if random_user else '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û'}

üìä *–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:*
‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {db.get_users_count()}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–Ω–∫–µ—Ç: {db.get_statistics()[2]}"""

        if random_user:
            debug_info += f"\n\nüë§ *–ó–Ω–∞–π–¥–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:*\n‚Ä¢ ID: `{random_user[1]}`\n‚Ä¢ –°—Ç–∞—Ç—å: {random_user[5]}"
        
        await update.message.reply_text(debug_info, parse_mode='Markdown')
        logger.info(f"‚úÖ –î–µ–±–∞–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {user.first_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ debug_search: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def safe_await_handler(handler_func, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω—É"""
    try:
        logger.info(f"üîÑ –í–∏–∫–ª–∏–∫ –æ–±—Ä–æ–±–Ω–∏–∫–∞: {handler_func.__name__}")
        result = handler_func(update, context)
        if hasattr(result, '__await__'):
            await result
            logger.info(f"‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ {handler_func.__name__} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            logger.info(f"‚ÑπÔ∏è –û–±—Ä–æ–±–Ω–∏–∫ {handler_func.__name__} –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {handler_func.__name__}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user = update.effective_user
        text = update.message.text if update.message.text else ""
        state = user_states.get(user.id, States.START)
        
        logger.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name}: '{text}', —Å—Ç–∞–Ω: {state}")

        # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏" or text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
            user_states[user.id] = States.START
            context.user_data.pop('waiting_for_city', None)
            context.user_data.pop('contact_admin', None)
            await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            logger.info(f"‚úÖ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è {user.first_name}")
            return

        # 2. –û–±—Ä–æ–±–∫–∞ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º
        if state == States.CONTACT_ADMIN:
            logger.info(f"üîß –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –≤—ñ–¥ {user.id}")
            await safe_await_handler(handle_contact_message, update, context)
            return

        # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
        if state == States.ADD_MAIN_PHOTO:
            await safe_await_handler(handle_main_photo, update, context)
            return

        # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é
        if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                     States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
            await safe_await_handler(handle_profile_message, update, context)
            return
        
        # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
        if context.user_data.get('waiting_for_city'):
            clean_city = text.replace('üèôÔ∏è ', '').strip()
            users = db.get_users_by_city(clean_city, user.id)
            
            if users:
                user_data = users[0]
                try:
                    result = show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
                    if hasattr(result, '__await__'):
                        await result
                    context.user_data['search_users'] = users
                    context.user_data['current_index'] = 0
                    context.user_data['search_type'] = 'city'
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_user_profile: {e}")
            else:
                await update.message.reply_text(
                    f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                    reply_markup=get_main_menu(user.id)
                )
            
            context.user_data['waiting_for_city'] = False
            return
        
        # 6. –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –∞–¥–º—ñ–Ω–∞
        if user.id == ADMIN_ID:
            admin_state = user_states.get(user.id)
            if admin_state == States.ADMIN_BAN_USER:
                await safe_await_handler(handle_ban_user, update, context)
                return
            elif admin_state == States.ADMIN_UNBAN_USER:
                await safe_await_handler(handle_unban_user, update, context)
                return
            elif admin_state == States.BROADCAST:
                await safe_await_handler(handle_broadcast_message, update, context)
                return
        
        # 7. –ê–¥–º—ñ–Ω-–º–µ–Ω—é
        if user.id == ADMIN_ID:
            if text in ["üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üì¢ –†–æ–∑—Å–∏–ª–∫–∞", "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
                await safe_await_handler(handle_admin_actions, update, context)
                return
            
            # –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω-–∫–Ω–æ–ø–æ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
            if text in ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]:
                if text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
                    await safe_await_handler(show_users_list, update, context)
                elif text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                    await safe_await_handler(start_ban_user, update, context)
                elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                    await safe_await_handler(start_unban_user, update, context)
                elif text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö":
                    await safe_await_handler(show_banned_users, update, context)
                elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ":
                    await safe_await_handler(show_admin_panel, update, context)
                return
        
        # 8. –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
            await safe_await_handler(start_profile_creation, update, context)
            return
        
        elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            await safe_await_handler(show_my_profile, update, context)
            return
        
        elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
            await safe_await_handler(search_profiles, update, context)
            return
        
        elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
            await safe_await_handler(search_by_city, update, context)
            return
        
        elif text == "‚ù§Ô∏è –õ–∞–π–∫":
            await safe_await_handler(handle_like, update, context)
            return
        
        elif text == "‚û°Ô∏è –î–∞–ª—ñ":
            await safe_await_handler(show_next_profile, update, context)
            return
        
        elif text == "üîô –ú–µ–Ω—é":
            await update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
            return
        
        elif text == "üèÜ –¢–æ–ø":
            await safe_await_handler(show_top_users, update, context)
            return
        
        elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
            await safe_await_handler(show_matches, update, context)
            return
        
        elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
            await safe_await_handler(show_likes, update, context)
            return
        
        elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
            await safe_await_handler(handle_top_selection, update, context)
            return
        
        # 9. –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º
        elif text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
            await contact_admin(update, context)
            return
        
        # 10. –ö–æ–º–∞–Ω–¥–∞ –¥–µ–±–∞–≥—É
        elif text == "/debug_search":
            await debug_search(update, context)
            return
        
        # 11. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user.id)
        )
        logger.info(f"‚ùå –ù–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥ {user.first_name}: {text}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    try:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ: {context.error}", exc_info=True)
        if update and update.effective_user:
            await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

def setup_handlers(application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    logger.info("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤...")
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("debug_search", debug_search))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
    application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
    application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
    application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
    application.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
    application.add_handler(MessageHandler(filters.Regex('^üîô –ú–µ–Ω—é$'), lambda update, context: update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(update.effective_user.id))))
    application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
    application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
    application.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
    application.add_handler(MessageHandler(filters.Regex("^üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º$"), contact_admin))
    
    # –ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(MessageHandler(filters.Regex('^(üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ|üì¢ –†–æ–∑—Å–∏–ª–∫–∞|üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É|üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è|üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), handle_admin_actions))
    application.add_handler(MessageHandler(filters.Regex('^(üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤|üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö|üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)$'), universal_handler))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏$'), start_ban_user))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏$'), start_unban_user))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞$'), start_ban_user))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞$'), start_unban_user))
    
    # –§–æ—Ç–æ —Ç–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    application.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)
    logger.info("‚úÖ –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

async def initialize_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    global application
    try:
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        logger.info("‚úÖ Application —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setup_handlers(application)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
        logger.info(f"üåê –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –Ω–∞ URL: {WEBHOOK_URL}")
        await application.bot.set_webhook(WEBHOOK_URL)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ webhook
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ webhook: {webhook_info.url}, pending: {webhook_info.pending_update_count}")
        
        logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}", exc_info=True)

def run_async_init():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
    asyncio.run(initialize_bot())

if __name__ == "__main__":
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    run_async_init()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}...")
    app.run(host='0.0.0.0', port=PORT, debug=False)