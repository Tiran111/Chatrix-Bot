import logging
import os
import asyncio
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger('werkzeug').setLevel(logging.WARNING)

app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
try:
    from database_postgres import db
    logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç—É –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    class DatabaseStub:
        def get_user(self, user_id): return None
        def add_user(self, user_id, username, first_name): return True
        def get_users_count(self): return 0
        def get_statistics(self): return (0, 0, 0, [])
        def get_random_user(self, exclude_id): return None
        def can_like_today(self, user_id): return (True, "–¢–µ—Å—Ç")
        def get_user_matches(self, user_id): return []
        def get_profile_photos(self, user_id): return []
        def get_user_profile(self, user_id): return (None, False)
        def get_users_by_city(self, city, exclude_id): return []
    db = DatabaseStub()

# –°–ø—Ä–æ—â–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
try:
    TOKEN = os.environ.get('BOT_TOKEN', 'test_token')
    ADMIN_ID = int(os.environ.get('ADMIN_ID', '1385645772'))
    logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    TOKEN = 'test_token'
    ADMIN_ID = 1385645772

# –°–ø—Ä–æ—â–µ–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏
class States:
    START = 0
    PROFILE_AGE = 1
    PROFILE_GENDER = 2
    PROFILE_CITY = 3
    PROFILE_SEEKING_GENDER = 4
    PROFILE_GOAL = 5
    PROFILE_BIO = 6
    ADD_MAIN_PHOTO = 7
    CONTACT_ADMIN = 10
    ADMIN_BAN_USER = 100
    ADMIN_UNBAN_USER = 101
    BROADCAST = 102
    ADMIN_SEARCH_USER = 103

user_states = {}

def get_main_menu(user_id):
    """–°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    from telegram import ReplyKeyboardMarkup
    keyboard = [
        ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
        ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏'],
        ['‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤', 'üíå –ú–æ—ó –º–∞—Ç—á—ñ'],
        ['üèÜ –¢–æ–ø', "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
    ]
    if user_id == ADMIN_ID:
        keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', "https://chatrix-bot-4m1p.onrender.com/webhook")
PORT = int(os.environ.get('PORT', 10000))
application = None
bot_initialized = False

async def debug_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ª–∞–¥–∫–∞ –±–æ—Ç–∞"""
    user = update.effective_user
    
    try:
        user_data = db.get_user(user.id)
        user_count = db.get_users_count()
        stats = db.get_statistics()
        male, female, total_active, goals_stats = stats
        
        message = f"""
üîß *–î–ï–¢–ê–õ–¨–ù–ê –í–Ü–î–õ–ê–î–ö–ê –ë–û–¢–ê*

üìä *–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:* PostgreSQL ‚úÖ
üë§ *–í–∞—à ID:* `{user.id}`
üìõ *–í–∞—à–µ —ñ–º'—è:* {user.first_name}
üìà *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—Å—å–æ–≥–æ:* {user_count}
üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* {male} —á–æ–ª., {female} –∂—ñ–Ω., {total_active} –∞–∫—Ç–∏–≤.

*–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π:*
"""
        
        # –¢–µ—Å—Ç –ø–æ—à—É–∫—É
        try:
            random_user = db.get_random_user(user.id)
            if random_user:
                message += f"üîç *–ü–æ—à—É–∫:* ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            else:
                message += f"üîç *–ü–æ—à—É–∫:* ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        except Exception as e:
            message += f"üîç *–ü–æ—à—É–∫:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        # –¢–µ—Å—Ç –ª–∞–π–∫—ñ–≤
        try:
            can_like, like_msg = db.can_like_today(user.id)
            message += f"‚ù§Ô∏è *–õ–∞–π–∫–∏:* {like_msg}\n"
        except Exception as e:
            message += f"‚ù§Ô∏è *–õ–∞–π–∫–∏:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)[:200]}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = update.effective_user
        
        logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")
        
        db.add_user(user.id, user.username, user.first_name)
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –¥–æ–¥–∞–Ω–∏–π –≤ –±–∞–∑—É")
        
        user_states[user.id] = States.START
        
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
            f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
        )
        
        user_data, is_complete = db.get_user_profile(user.id)
        
        if not is_complete:
            welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
            keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
        else:
            keyboard = [
                ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
                ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏'],
                ['‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤', 'üíå –ú–æ—ó –º–∞—Ç—á—ñ'],
                ['üèÜ –¢–æ–ø', "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
            ]
        
        if user.id == ADMIN_ID:
            keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user.first_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /start: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º"""
    try:
        user = update.effective_user
        user_states[user.id] = States.CONTACT_ADMIN
        
        contact_text = f"""üë®‚Äçüíº *–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*

üìß –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.

üÜî –í–∞—à ID: `{user.id}`
üë§ –í–∞—à–µ —ñ–º'—è: {user.first_name}

üí¨ *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*"""

        await update.message.reply_text(
            contact_text,
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ contact_admin: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

async def handle_contact_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º"""
    try:
        user = update.effective_user
        
        if user_states.get(user.id) != States.CONTACT_ADMIN:
            return
        
        message_text = update.message.text
        
        if message_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return
        
        # –°–ø—Ä–æ—â–µ–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name} (ID: {user.id}):\n\n{message_text}"
            )
        except Exception as e:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞: {e}")
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_main_menu(user.id)
        )
        
        user_states[user.id] = States.START
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_contact_message: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

async def start_profile_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    await update.message.reply_text("üìù –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é"""
    await update.message.reply_text("üë§ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—à—É–∫—É –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
    await update.message.reply_text("üíï –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def search_by_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º"""
    await update.message.reply_text("üèôÔ∏è –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
    await update.message.reply_text("‚û°Ô∏è –§—É–Ω–∫—Ü—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ª–∞–π–∫—É"""
    await update.message.reply_text("‚ù§Ô∏è –§—É–Ω–∫—Ü—ñ—è –ª–∞–π–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_like_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É"""
    await update.message.reply_text("‚ù§Ô∏è –§—É–Ω–∫—Ü—ñ—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    await update.message.reply_text("üèÜ –§—É–Ω–∫—Ü—ñ—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –º–∞—Ç—á—ñ–≤"""
    await update.message.reply_text("üíå –§—É–Ω–∫—Ü—ñ—è –º–∞—Ç—á—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_likes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ª–∞–π–∫—ñ–≤"""
    await update.message.reply_text("‚ù§Ô∏è –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–∞–π–∫—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_top_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –≤–∏–±–æ—Ä—É —Ç–æ–ø—É"""
    await update.message.reply_text("üèÜ –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É —Ç–æ–ø—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –∞–¥–º—ñ–Ω –¥—ñ–π"""
    await update.message.reply_text("üëë –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

async def handle_main_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ"""
    await update.message.reply_text("üì∑ –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥—ñ—ó"""
    user = update.effective_user
    user_states[user.id] = States.START
    await update.message.reply_text(
        "‚úÖ –í—Å—ñ –¥—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user.id)
    )

async def reset_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º—É—Å–æ–≤–µ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É"""
    user = update.effective_user
    user_states[user.id] = States.START
    await update.message.reply_text(
        "‚úÖ –°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user.id)
    )

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user = update.effective_user
        text = update.message.text if update.message.text else ""
        
        state = user_states.get(user.id, States.START)

        if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return

        if state == States.CONTACT_ADMIN:
            await handle_contact_message(update, context)
            return

        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏":
            await start_profile_creation(update, context)
            return
        
        elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            await show_my_profile(update, context)
            return
        
        elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
            await search_profiles(update, context)
            return
        
        elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
            await search_by_city(update, context)
            return
        
        elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
            await show_likes(update, context)
            return
        
        elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
            await show_matches(update, context)
            return
        
        elif text == "üèÜ –¢–æ–ø":
            await show_top_users(update, context)
            return
        
        elif text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
            await contact_admin(update, context)
            return

        elif user.id == ADMIN_ID and text == "üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å":
            await handle_admin_actions(update, context)
            return
        
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user.id)
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)[:100]}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user.id)
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    try:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ: {context.error}", exc_info=True)
        if update and update.effective_user:
            await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

def setup_handlers(application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    logger.info("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤...")
    
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("debug", debug_bot))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CommandHandler("reset_state", reset_state))
    
    # –û—Å–Ω–æ–≤–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏)$'), start_profile_creation))
    application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
    application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
    application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
    application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
    application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
    application.add_handler(MessageHandler(filters.Regex("^üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º$"), contact_admin))
    application.add_handler(MessageHandler(filters.Regex('^üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å$'), handle_admin_actions))
    
    # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))

    application.add_error_handler(error_handler)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

# ==================== FLASK ROUTES ====================

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    global application, bot_initialized
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ, —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        if not bot_initialized:
            logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ...")
            application = Application.builder().token(TOKEN).build()
            setup_handlers(application)
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞
            application.initialize()
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
            application.bot.set_webhook(WEBHOOK_URL)
            
            bot_initialized = True
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
            logger.info(f"üåê –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
            
        update_data = request.get_json()
        if update_data is None:
            return "Empty update data", 400
            
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(update_data, application.bot)
        application.process_update(update)
        
        return 'ok'
        
    except Exception as e:
        logger.error(f"‚ùå Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return "Error", 500

# ==================== –°–ï–†–í–ï–† ====================

print("=" * 60)
print("üöÄ –°–ï–†–í–ï–† –ì–û–¢–û–í–ò–ô –î–û –†–û–ë–û–¢–ò!")
print(f"üåê –ü–æ—Ä—Ç: {PORT}")
print("üì± –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ")
print("=" * 60)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    
    print("=" * 50)
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}...")
    print("ü§ñ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=port, debug=False)