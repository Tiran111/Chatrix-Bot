import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–ø–∏—Å–æ–∫ –±—ñ–±–ª—ñ–æ—Ç–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    libraries = ['telegram', 'aiohttp']
    
    for lib in libraries:
        try:
            __import__(lib)
            logger.info(f"‚úÖ {lib} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        except ImportError as e:
            logger.error(f"‚ùå {lib} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}")
            return
    
    # –Ø–∫—â–æ –≤—Å—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ - –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    try:
        from telegram import Update
        from telegram.ext import Application, CommandHandler, ContextTypes
        
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user = update.effective_user
            await update.message.reply_text(f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –ë–æ—Ç –ø—Ä–∞—Ü—é—î! üöÄ")
        
        TOKEN = os.environ.get('BOT_TOKEN')
        if not TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        app = Application.builder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == '__main__':
    main()