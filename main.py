from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database.models import db
from keyboards.main_menu import get_main_menu
from utils.states import user_states, States
from config import TOKEN, ADMIN_ID
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    
    logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id})")
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
    db.add_user(user.id, user.username, user.first_name)
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_states[user.id] = States.START
    
    # –í—ñ—Ç–∞–Ω–Ω—è
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
        f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
        f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    user_data, is_complete = db.get_user_profile(user.id)
    
    if not is_complete:
        welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
        keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
    else:
        keyboard = [
            ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
            ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
            ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
            ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user = update.effective_user
    text = update.message.text if update.message.text else ""
    state = user_states.get(user.id, States.START)
    
    logger.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name}: '{text}', —Å—Ç–∞–Ω: {state}")

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏" or text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        user_states[user.id] = States.START
        context.user_data.pop('waiting_for_city', None)
        context.user_data.pop('contact_admin', None)
        await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
        return

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
    if state == States.ADD_MAIN_PHOTO:
        from handlers.profile import handle_main_photo
        await handle_main_photo(update, context)
        return

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é
    if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                 States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
        from handlers.profile import handle_profile_message
        await handle_profile_message(update, context)
        return
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
    if context.user_data.get('waiting_for_city'):
        from handlers.search import show_user_profile
        
        clean_city = text.replace('üèôÔ∏è ', '').strip()
        users = db.get_users_by_city(clean_city, user.id)
        
        if users:
            user_data = users[0]
            await show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
            context.user_data['search_users'] = users
            context.user_data['current_index'] = 0
            context.user_data['search_type'] = 'city'
        else:
            await update.message.reply_text(
                f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                reply_markup=get_main_menu(user.id)
            )
        
        context.user_data['waiting_for_city'] = False
        return
    
    # 5. –ê–¥–º—ñ–Ω-–º–µ–Ω—é - –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê
    if user.id == ADMIN_ID:
        if text in ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üì¢ –†–æ–∑—Å–∏–ª–∫–∞", "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
            from handlers.admin import handle_admin_actions
            await handle_admin_actions(update, context)
            return
    
    # 6. –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º
    if text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
        context.user_data['contact_admin'] = True
        await update.message.reply_text(
            "üìß –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True)
        )
        return
    
    # 7. –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    if context.user_data.get('contact_admin'):
        admin_message = f"üì© *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*\n\n" \
                       f"üë§ –Ü–º'—è: {user.first_name}\n" \
                       f"üÜî ID: {user.id}\n" \
                       f"üìß Username: @{user.username if user.username else '–ù–µ–º–∞—î'}\n\n" \
                       f"üí¨ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*\n{text}"
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown'
            )
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
                reply_markup=get_main_menu(user.id)
            )
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
                reply_markup=get_main_menu(user.id)
            )
        
        context.user_data['contact_admin'] = False
        return
    
    # 8. –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
        from handlers.profile import start_profile_creation
        await start_profile_creation(update, context)
        return
    
    elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        from handlers.profile import show_my_profile
        await show_my_profile(update, context)
        return
    
    elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
        from handlers.search import search_profiles
        await search_profiles(update, context)
        return
    
    elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
        from handlers.search import search_by_city
        await search_by_city(update, context)
        return
    
    elif text == "‚ù§Ô∏è –õ–∞–π–∫":
        from handlers.search import handle_like
        await handle_like(update, context)
        return
    
    elif text == "‚û°Ô∏è –î–∞–ª—ñ":
        from handlers.search import show_next_profile
        await show_next_profile(update, context)
        return
    
    elif text == "üîô –ú–µ–Ω—é":
        await update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
        return
    
    elif text == "üèÜ –¢–æ–ø":
        from handlers.search import show_top_users
        await show_top_users(update, context)
        return
    
    elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
        from handlers.search import show_matches
        await show_matches(update, context)
        return
    
    elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
        from handlers.search import show_likes
        await show_likes(update, context)
        return
    
    elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
        from handlers.search import handle_top_selection
        await handle_top_selection(update, context)
        return
    
    # 9. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
    await update.message.reply_text(
        "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu(user.id)
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}")
    try:
        if update and update.effective_user:
            await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except:
        pass

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Chatrix Bot...")
    
    try:
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", show_admin_panel))
        
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –Ü–ú–ü–û–†–¢–ò
        application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
        application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
        application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
        application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
        application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
        application.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
        application.add_handler(MessageHandler(filters.Regex('^üîô –ú–µ–Ω—é$'), lambda u, c: u.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(u.effective_user.id))))
        application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
        application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
        application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
        application.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
        
        # –ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏
        application.add_handler(MessageHandler(filters.Regex('^(üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ|üì¢ –†–æ–∑—Å–∏–ª–∫–∞|üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É|üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è|üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), handle_admin_actions))
        
        # –§–æ—Ç–æ —Ç–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        application.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))

        # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        application.add_error_handler(error_handler)

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
        
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")

# –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –ø—ñ—Å–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è main() - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –Ü–ú–ü–û–†–¢–ò
from handlers.admin import show_admin_panel, handle_admin_actions
from handlers.profile import start_profile_creation, show_my_profile, handle_main_photo, handle_profile_message
from handlers.search import search_profiles, search_by_city, handle_like, show_next_profile, show_top_users, show_matches, show_likes, handle_top_selection, show_user_profile

if __name__ == '__main__':
    main()