import logging
import os
import asyncio
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from handlers.profile import start_edit_profile

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger('werkzeug').setLevel(logging.WARNING)

app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤
try:
    from database_postgres import db
    logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    raise

try:
    from config import ADMIN_ID
    from config import TOKEN
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    raise

try:
    from keyboards.main_menu import get_main_menu
    from utils.states import user_states, States
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —É—Ç–∏–ª—ñ—Ç: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
PORT = int(os.environ.get('PORT', 10000))
application = None
bot_initialized = False

async def debug_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ª–∞–¥–∫–∞ –±–æ—Ç–∞"""
    user = update.effective_user
    
    try:
        user_data = db.get_user(user.id)
        user_count = db.get_users_count()
        stats = db.get_statistics()
        male, female, total_active, goals_stats = stats
        
        message = f"""
üîß *–î–ï–¢–ê–õ–¨–ù–ê –í–Ü–î–õ–ê–î–ö–ê –ë–û–¢–ê*

üìä *–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:* PostgreSQL ‚úÖ
üë§ *–í–∞—à ID:* `{user.id}`
üìõ *–í–∞—à–µ —ñ–º'—è:* {user.first_name}
üìà *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—Å—å–æ–≥–æ:* {user_count}
üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* {male} —á–æ–ª., {female} –∂—ñ–Ω., {total_active} –∞–∫—Ç–∏–≤.

*–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π:*
"""
        
        # –¢–µ—Å—Ç –ø–æ—à—É–∫—É
        try:
            random_user = db.get_random_user(user.id)
            if random_user:
                if isinstance(random_user, dict):
                    user_name = random_user.get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
                else:
                    user_name = random_user[3] if len(random_user) > 3 else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
                message += f"üîç *–ü–æ—à—É–∫:* ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {user_name}\n"
            else:
                message += f"üîç *–ü–æ—à—É–∫:* ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        except Exception as e:
            message += f"üîç *–ü–æ—à—É–∫:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        # –¢–µ—Å—Ç –ª–∞–π–∫—ñ–≤
        try:
            can_like, like_msg = db.can_like_today(user.id)
            message += f"‚ù§Ô∏è *–õ–∞–π–∫–∏:* {like_msg}\n"
        except Exception as e:
            message += f"‚ù§Ô∏è *–õ–∞–π–∫–∏:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        # –¢–µ—Å—Ç –º–∞—Ç—á—ñ–≤
        try:
            matches = db.get_user_matches(user.id)
            message += f"üíå *–ú–∞—Ç—á—ñ:* {len(matches)} –∑–Ω–∞–π–¥–µ–Ω–æ\n"
        except Exception as e:
            message += f"üíå *–ú–∞—Ç—á—ñ:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        # –¢–µ—Å—Ç —Ñ–æ—Ç–æ
        try:
            photos = db.get_profile_photos(user.id)
            message += f"üì∑ *–§–æ—Ç–æ:* {len(photos)} –¥–æ–¥–∞–Ω–æ\n"
        except Exception as e:
            message += f"üì∑ *–§–æ—Ç–æ:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)[:200]}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = update.effective_user
        
        logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")
        
        db.add_user(user.id, user.username, user.first_name)
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –¥–æ–¥–∞–Ω–∏–π –≤ –±–∞–∑—É")
        
        user_states[user.id] = States.START
        
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
            f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
        )
        
        user_data, is_complete = db.get_user_profile(user.id)
        
        if not is_complete:
            welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
            keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
        else:
            keyboard = [
                ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
                ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏'],
                ['‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤', 'üíå –ú–æ—ó –º–∞—Ç—á—ñ'],
                ['üèÜ –¢–æ–ø', "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
            ]
        
        if user.id == ADMIN_ID:
            keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user.first_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /start: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º"""
    try:
        user = update.effective_user
        user_states[user.id] = States.CONTACT_ADMIN
        
        contact_text = f"""üë®‚Äçüíº *–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*

üìß –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.

üÜî –í–∞—à ID: `{user.id}`
üë§ –í–∞—à–µ —ñ–º'—è: {user.first_name}

üí¨ *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*"""

        await update.message.reply_text(
            contact_text,
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ contact_admin: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

async def handle_contact_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º"""
    try:
        user = update.effective_user
        
        if user_states.get(user.id) != States.CONTACT_ADMIN:
            return
        
        message_text = update.message.text
        
        if message_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return
        
        from handlers.notifications import notification_system
        await notification_system.notify_contact_admin(context, user.id, message_text)
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_main_menu(user.id)
        )
        
        user_states[user.id] = States.START
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_contact_message: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

# –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ –≤–µ—Ä—Å—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ
async def start_profile_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    try:
        from handlers.profile import start_profile_creation as real_start_profile
        await real_start_profile(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é"""
    try:
        from handlers.profile import show_my_profile as real_show_profile
        await real_show_profile(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—à—É–∫—É –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
    try:
        from handlers.search import search_profiles as real_search
        await real_search(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def search_by_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º"""
    try:
        from handlers.search import search_by_city as real_search_city
        await real_search_city(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
    try:
        from handlers.search import show_next_profile as real_next_profile
        await real_next_profile(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ª–∞–π–∫—É"""
    try:
        from handlers.search import handle_like as real_handle_like
        await real_handle_like(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ª–∞–π–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_like_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É"""
    try:
        from handlers.search import handle_like_back as real_handle_like_back
        await real_handle_like_back(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        from handlers.search import show_top_users as real_show_top
        await real_show_top(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –º–∞—Ç—á—ñ–≤"""
    try:
        from handlers.search import show_matches as real_show_matches
        await real_show_matches(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –º–∞—Ç—á—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_likes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ª–∞–π–∫—ñ–≤"""
    try:
        from handlers.search import show_likes as real_show_likes
        await real_show_likes(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–∞–π–∫—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_top_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –≤–∏–±–æ—Ä—É —Ç–æ–ø—É"""
    try:
        from handlers.search import handle_top_selection as real_handle_top
        await real_handle_top(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É —Ç–æ–ø—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –∞–¥–º—ñ–Ω –¥—ñ–π"""
    try:
        from handlers.admin import handle_admin_actions as real_admin_actions
        await real_admin_actions(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

async def handle_main_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        from handlers.profile import handle_main_photo as real_handle_photo
        await real_handle_photo(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥—ñ—ó"""
    user = update.effective_user
    user_states[user.id] = States.START
    await update.message.reply_text(
        "‚úÖ –í—Å—ñ –¥—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user.id)
    )

async def reset_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º—É—Å–æ–≤–µ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É"""
    user = update.effective_user
    user_states[user.id] = States.START
    await update.message.reply_text(
        "‚úÖ –°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user.id)
    )

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user = update.effective_user
        text = update.message.text if update.message.text else ""
        
        state = user_states.get(user.id, States.START)

        if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return

        if state == States.CONTACT_ADMIN:
            await handle_contact_message(update, context)
            return

        if state == States.ADD_MAIN_PHOTO:
            await handle_main_photo(update, context)
            return

        if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                     States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
            try:
                from handlers.profile import handle_profile_message
                await handle_profile_message(update, context)
            except ImportError:
                await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        if context.user_data.get('waiting_for_city'):
            clean_city = text.replace('üèôÔ∏è ', '').strip()
            users = db.get_users_by_city(clean_city, user.id)
            
            if users:
                try:
                    from handlers.search import show_user_profile
                    user_data = users[0]
                    await show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
                    context.user_data['search_users'] = users
                    context.user_data['current_index'] = 0
                    context.user_data['search_type'] = 'city'
                except ImportError:
                    await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                await update.message.reply_text(
                    f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                    reply_markup=get_main_menu(user.id)
                )
            
            context.user_data['waiting_for_city'] = False
            return
        
        if user.id == ADMIN_ID:
            admin_state = user_states.get(user.id)
            if admin_state == States.ADMIN_BAN_USER:
                try:
                    from handlers.admin import handle_ban_user
                    await handle_ban_user(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
            elif admin_state == States.ADMIN_UNBAN_USER:
                try:
                    from handlers.admin import handle_unban_user
                    await handle_unban_user(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
            elif admin_state == States.BROADCAST:
                try:
                    from handlers.admin import handle_broadcast_message
                    await handle_broadcast_message(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
            elif admin_state == States.ADMIN_SEARCH_USER:
                try:
                    from handlers.admin import handle_user_search
                    await handle_user_search(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏":
            await start_profile_creation(update, context)
            return
        
        elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            await show_my_profile(update, context)
            return
        
        elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
            await search_profiles(update, context)
            return
        
        elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
            await search_by_city(update, context)
            return
        
        elif text == "‚û°Ô∏è –î–∞–ª—ñ":
            await show_next_profile(update, context)
            return
        
        elif text == "‚ù§Ô∏è –õ–∞–π–∫":
            await handle_like(update, context)
            return
        
        elif text == "‚ù§Ô∏è –í–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫":
            await handle_like_back(update, context)
            return
        
        elif text == "üîô –ú–µ–Ω—é":
            await update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
            return
        
        elif text == "üèÜ –¢–æ–ø":
            await show_top_users(update, context)
            return
        
        elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
            await show_matches(update, context)
            return
        
        elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
            await show_likes(update, context)
            return
        
        elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
            await handle_top_selection(update, context)
            return
        
        elif text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
            await contact_admin(update, context)
            return

        elif text == "üëÄ –•—Ç–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞–≤":
            from handlers.search import show_profile_views
            await show_profile_views(update, context)
            return

        elif text == "‚ù§Ô∏è –õ–∞–π–∫":  # –î–ª—è –ª–∞–π–∫—ñ–≤ –∑ —Ç–æ–ø—É
            from handlers.search import handle_top_like
            await handle_top_like(update, context)
            return

        elif text == "‚ù§Ô∏è –õ–∞–π–∫–Ω—É—Ç–∏":  # –î–ª—è –ª–∞–π–∫—ñ–≤ –∑ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
            from handlers.search import handle_like
            await handle_like(update, context)
            return

        elif text == "‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥":
            from handlers.search import show_next_profile_view
            await show_next_profile_view(update, context)
            return

        elif text == "‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —É —Ç–æ–ø—ñ":
            from handlers.search import handle_top_navigation
            await handle_top_navigation(update, context)
            return 

        elif text == "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            from handlers.admin import show_detailed_stats
            await show_detailed_stats(update, context)
            return     

        elif text == "üîô –ú–µ–Ω—é":
            await update.message.reply_text(
                "üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                reply_markup=get_main_menu(user.id)
            )
            return

        elif text == "üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
            from handlers.admin import start_user_search
            await start_user_search(update, context)
            return  

        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            from handlers.admin import show_admin_panel
            await show_admin_panel(update, context)
            return

        elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
            from handlers.admin import show_users_management
            await show_users_management(update, context)
            return

        elif text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞":
            from handlers.admin import start_broadcast
            await start_broadcast(update, context)
            return    

        elif user.id == ADMIN_ID:
            if text in ["üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üì¢ –†–æ–∑—Å–∏–ª–∫–∞", "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è"]:
                await handle_admin_actions(update, context)
                return
            
            if text in ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]:
                try:
                    from handlers.admin import show_users_list, show_banned_users, start_ban_user, start_unban_user, show_admin_panel
                    if text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
                        await show_users_list(update, context)
                    elif text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                        await start_ban_user(update, context)
                    elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                        await start_unban_user(update, context)
                    elif text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö":
                        await show_banned_users(update, context)
                    elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ":
                        await show_admin_panel(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
        
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user.id)
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)[:100]}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user.id)
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    try:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ: {context.error}", exc_info=True)
        if update and update.effective_user:
            await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global application, bot_initialized
    
    if bot_initialized:
        logger.info("‚úÖ –ë–æ—Ç –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return True
        
    try:
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setup_handlers(application)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
        application.initialize()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
        application.bot.set_webhook(WEBHOOK_URL)
        
        bot_initialized = True
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        logger.info(f"üåê –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
        return False

def setup_handlers(application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    logger.info("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤...")
    
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("debug", debug_bot))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CommandHandler("reset_state", reset_state))
    
    # –û—Å–Ω–æ–≤–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏)$'), start_profile_creation))
    application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
    application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
    application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
    application.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –í–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫$'), handle_like_back))
    application.add_handler(MessageHandler(filters.Regex('^üîô –ú–µ–Ω—é$'), lambda update, context: update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(update.effective_user.id))))
    application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
    application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
    application.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
    application.add_handler(MessageHandler(filters.Regex("^üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º$"), contact_admin))
    
    # –ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(MessageHandler(filters.Regex('^(üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ|üì¢ –†–æ–∑—Å–∏–ª–∫–∞|üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É|üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è)$'), handle_admin_actions))
    
    # –§–æ—Ç–æ —Ç–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    application.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))

    application.add_error_handler(error_handler)
    logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

# ==================== FLASK ROUTES ====================

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    global application, bot_initialized
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ, —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        if not bot_initialized:
            logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ...")
            if not init_bot():
                return "Bot initialization failed", 500
            
        update_data = request.get_json()
        if update_data is None:
            return "Empty update data", 400
            
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(update_data, application.bot)
        application.update_queue.put(update)
        
        return 'ok'
        
    except Exception as e:
        logger.error(f"‚ùå Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return "Error", 200

# ==================== –î–ï–¢–ê–õ–¨–ù–ê –í–Ü–î–õ–ê–î–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• ====================
print("=" * 60)
print("üîß –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ë–ê–ó–£ –î–ê–ù–ò–•")
print("=" * 60)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
if 'postgres' in str(type(db)).lower():
    print("‚úÖ –ê–ö–¢–ò–í–ù–ê –ë–ê–ó–ê: PostgreSQL")
    db_type = "PostgreSQL"
else:
    print("‚ÑπÔ∏è –ê–ö–¢–ò–í–ù–ê –ë–ê–ó–ê: SQLite")
    db_type = "SQLite"

# –¢–µ—Å—Ç –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
try:
    user_count = db.get_users_count()
    print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_count}")
    
    stats = db.get_statistics()
    male, female, total_active, goals_stats = stats
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {male} —á–æ–ª., {female} –∂—ñ–Ω., {total_active} –∞–∫—Ç–∏–≤.")
    
    print("‚úÖ –¢–µ—Å—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

print("=" * 60)
print("üöÄ –°–ï–†–í–ï–† –ì–û–¢–û–í–ò–ô –î–û –†–û–ë–û–¢–ò!")
print(f"üåê –ü–æ—Ä—Ç: {PORT}")
print("üì± –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ")
print("=" * 60)

# ==================== SERVER STARTUP ====================

if __name__ == '__main__':
    print("=" * 50)
    print("üöÄ –ó–∞–ø—É—Å–∫ Chatrix Bot...")
    print("=" * 50)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    print("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
    if init_bot():
        print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 10000))
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    
    app.run(host='0.0.0.0', port=port, debug=False)