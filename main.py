import logging
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("=" * 60)
print("ü§ñ CHATRIX BOT STARTING...")
print("=" * 60)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = os.environ.get('ADMIN_ID', '1385645772')
PORT = int(os.environ.get('PORT', 10000))

print(f"üîß Configuration:")
print(f"   TOKEN: {TOKEN[:10] + '...' if TOKEN else 'NOT SET'}")
print(f"   ADMIN_ID: {ADMIN_ID}")
print(f"   PORT: {PORT}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not TOKEN:
    print("‚ùå CRITICAL: BOT_TOKEN not set!")
    print("üí° Please set BOT_TOKEN environment variable in Render dashboard")
    exit(1)

# –Ü–º–ø–æ—Ä—Ç –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
try:
    print("üì¶ Importing dependencies...")
    from flask import Flask, request
    print("   ‚úÖ Flask")
    
    from telegram import Update
    from telegram.ext import Application, CommandHandler, ContextTypes
    print("   ‚úÖ python-telegram-bot")
    
    # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        from database_postgres import db
        print("   ‚úÖ PostgreSQL database")
    except ImportError as e:
        print(f"   ‚ö†Ô∏è Database: {e}")
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        class DatabaseStub:
            def get_user(self, user_id): return None
            def add_user(self, user_id, username, first_name): 
                logger.info(f"üìù Added user: {user_id} - {first_name}")
                return True
            def get_users_count(self): return 0
            def get_statistics(self): return (0, 0, 0, [])
            def get_user_profile(self, user_id): return (None, False)
        db = DatabaseStub()
    
    print("‚úÖ All dependencies imported successfully!")
    
except ImportError as e:
    print(f"‚ùå Failed to import dependencies: {e}")
    print("üí° Please check requirements.txt and rebuild")
    exit(1)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
application = None
bot_initialized = False

# –ü—Ä–æ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        logger.info(f"üÜï User {user.id} started the bot")
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
        db.add_user(user.id, user.username, user.first_name)
        
        await update.message.reply_text(
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            f"üíû *Chatrix* ‚Äî –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤\n\n"
            f"üÜî –í–∞—à ID: `{user.id}`\n"
            f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {db.get_users_count()}\n\n"
            f"üéØ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é üëá",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error in /start: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
def init_bot():
    global application, bot_initialized
    
    if bot_initialized:
        return application
        
    try:
        print("üîÑ Initializing bot...")
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("debug", start_command))
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
        application.initialize()
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
        WEBHOOK_URL = os.environ.get('WEBHOOK_URL', f"https://chatrix-bot-4m1p.onrender.com/webhook")
        application.bot.set_webhook(WEBHOOK_URL)
        
        bot_initialized = True
        print(f"‚úÖ Bot initialized successfully!")
        print(f"üåê Webhook: {WEBHOOK_URL}")
        
        return application
        
    except Exception as e:
        print(f"‚ùå Bot initialization failed: {e}")
        return None

# –ú–∞—Ä—à—Ä—É—Ç–∏ Flask
@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running! Use /start in Telegram.", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    global application
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ
        if not application:
            application = init_bot()
            if not application:
                return "Bot initialization failed", 500
        
        update_data = request.get_json()
        if not update_data:
            return "Empty data", 400
            
        update = Update.de_json(update_data, application.bot)
        application.process_update(update)
        
        return "OK", 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return "Error", 500

@app.route('/init', methods=['GET'])
def initialize():
    """–†—É—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    result = init_bot()
    if result:
        return "Bot initialized successfully", 200
    else:
        return "Bot initialization failed", 500

print("=" * 60)
print("‚úÖ BOT INITIALIZATION COMPLETED!")
print("ü§ñ Server is ready to handle requests")
print("=" * 60)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
init_bot()

if __name__ == '__main__':
    print(f"üåê Starting Flask server on port {PORT}...")
    app.run(host='0.0.0.0', port=PORT, debug=False)