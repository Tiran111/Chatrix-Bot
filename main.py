import logging
import os
from flask import Flask
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from telegram import Update, ReplyKeyboardMarkup
from database.models import db
from keyboards.main_menu import get_main_menu
from utils.states import user_states, States
from config import TOKEN, ADMIN_ID

# –Ü–º–ø–æ—Ä—Ç –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
from handlers.profile import start_profile_creation, show_my_profile, handle_main_photo, handle_profile_message
from handlers.search import search_profiles, search_by_city, handle_like, show_next_profile, show_top_users, show_matches, show_likes, handle_top_selection, show_user_profile

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥–∏ Flask/Werkzeug
logging.getLogger('werkzeug').setLevel(logging.WARNING)

# Flask app –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!"

@app.route('/health')
def health():
    return "OK", 200

@app.route('/healthz')
def healthz():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = update.effective_user
        
        logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id})")
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
        db.add_user(user.id, user.username, user.first_name)
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        user_states[user.id] = States.START
        
        # –í—ñ—Ç–∞–Ω–Ω—è
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
            f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        user_data, is_complete = db.get_user_profile(user.id)
        
        if not is_complete:
            welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
            keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
        else:
            keyboard = [
                ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
                ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
                ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
                ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
            ]
        
        if user.id == ADMIN_ID:
            keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /start: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def contact_admin(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º"""
    try:
        user = update.effective_user
        
        contact_text = f"""üë®‚Äçüíº *–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*

üìß –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.

üÜî –í–∞—à ID: `{user.id}`
üë§ –í–∞—à–µ —ñ–º'—è: {user.first_name}

üí¨ *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*"""

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
        user_states[user.id] = States.CONTACT_ADMIN
        
        update.message.reply_text(
            contact_text,
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ contact_admin: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def handle_contact_message(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    try:
        user = update.effective_user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
        if user_states.get(user.id) != States.CONTACT_ADMIN:
            logger.info(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {user_states.get(user.id)}")
            return
        
        message_text = update.message.text
        
        if message_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        try:
            admin_message = f"""üì© *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*

üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* {user.first_name}
üÜî *ID:* `{user.id}`
üìù *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
{message_text}"""

            context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message,
                parse_mode='Markdown'
            )
            
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            update.message.reply_text(
                "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É! –í—ñ–Ω –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                reply_markup=get_main_menu(user.id)
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
            update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu(user.id)
            )
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        user_states[user.id] = States.START
        logger.info(f"‚úÖ –°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_contact_message: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def show_admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID:
            update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", reply_markup=get_main_menu(user.id))
            return
        
        stats = db.get_statistics()
        male, female, total_active, goals_stats = stats
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.get_users_count()
        banned_users = len(db.get_banned_users())
        
        stats_text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–Ω–∫–µ—Ç: {total_active}
üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}
üë® –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
üë© –ñ—ñ–Ω–æ–∫: {female}"""

        if goals_stats:
            stats_text += "\n\nüéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*"
            for goal, count in goals_stats:
                stats_text += f"\n‚Ä¢ {goal}: {count}"
        
        update.message.reply_text(stats_text, parse_mode='Markdown')
        
        # –ê–¥–º—ñ–Ω –º–µ–Ω—é
        keyboard = [
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'],
            ['üì¢ –†–æ–∑—Å–∏–ª–∫–∞', 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É'],
            ['üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è', 'üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
        ]
        
        update.message.reply_text(
            "üëë *–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_admin_panel: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def handle_admin_actions(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID:
            return
        
        text = update.message.text
        
        logger.info(f"üîß [ADMIN] {user.first_name}: '{text}'")
        
        if text == "üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å" or text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            show_admin_panel(update, context)
        
        elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
            show_users_management(update, context)
        
        elif text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞":
            start_broadcast(update, context)
        
        elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É":
            update_database(update, context)
        
        elif text == "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è":
            show_ban_management(update, context)
        
        elif text == "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            show_detailed_stats(update, context)
        
        elif text == "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_admin_actions: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def show_users_management(update: Update, context: CallbackContext):
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    try:
        user = update.effective_user
        
        users_text = f"""üë• *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {db.get_users_count()}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {db.get_statistics()[2]}

‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"""
        
        keyboard = [
            ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"],
            ["üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"],
            ["üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]
        ]
        
        update.message.reply_text(
            users_text, 
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True), 
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_users_management: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def show_users_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        user = update.effective_user
        users = db.get_all_active_users(user.id)
        
        if not users:
            update.message.reply_text("üòî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        users_text = "üìã *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
        for i, user_data in enumerate(users[:10], 1):
            user_name = user_data[3] if len(user_data) > 3 else "–ù–µ–≤—ñ–¥–æ–º–æ"
            user_id = user_data[1] if len(user_data) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
            is_banned = user_data[13] if len(user_data) > 13 else False
            
            status = "üö´" if is_banned else "‚úÖ"
            users_text += f"{i}. {status} {user_name} (ID: `{user_id}`)\n"
        
        if len(users) > 10:
            users_text += f"\n... —Ç–∞ —â–µ {len(users) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        
        update.message.reply_text(users_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_users_list: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def start_broadcast(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID:
            return
        
        total_users = db.get_users_count()
        
        update.message.reply_text(
            f"üì¢ *–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å*\n\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–µ—Ä–∂—É–≤–∞—á—ñ–≤: {total_users}\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True),
            parse_mode='Markdown'
        )
        user_states[user.id] = States.BROADCAST
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ start_broadcast: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def update_database(update: Update, context: CallbackContext):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID:
            return
        
        update.message.reply_text("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
        db.cleanup_old_data()
        
        update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ update_database: {e}")
        update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏: {e}")

def show_ban_management(update: Update, context: CallbackContext):
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º"""
    try:
        user = update.effective_user
        banned_users = db.get_banned_users()
        
        ban_text = f"""üö´ *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º*

–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(banned_users)}

–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"""
        
        keyboard = [
            ["üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"],
            ["üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]
        ]
        
        update.message.reply_text(
            ban_text, 
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True), 
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_ban_management: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def show_banned_users(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        banned_users = db.get_banned_users()
        
        if not banned_users:
            update.message.reply_text("üòä –ù–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            return
        
        ban_text = "üö´ *–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n\n"
        for i, user_data in enumerate(banned_users, 1):
            user_id = user_data[1] if len(user_data) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
            user_name = user_data[3] if len(user_data) > 3 else "–ù–µ–≤—ñ–¥–æ–º–æ"
            ban_text += f"{i}. {user_name} (ID: `{user_id}`)\n"
        
        update.message.reply_text(ban_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_banned_users: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def show_detailed_stats(update: Update, context: CallbackContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID:
            return
        
        stats = db.get_statistics()
        male, female, total_active, goals_stats = stats
        total_users = db.get_users_count()
        banned_users = len(db.get_banned_users())
        
        stats_text = f"""üìà *–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*
‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {total_active}
‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}
‚Ä¢ –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
‚Ä¢ –ñ—ñ–Ω–æ–∫: {female}"""

        if goals_stats:
            stats_text += "\n\nüéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*"
            for goal, count in goals_stats:
                percentage = (count/total_active*100) if total_active > 0 else 0
                stats_text += f"\n‚Ä¢ {goal}: {count} ({percentage:.1f}%)"
        
        update.message.reply_text(stats_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ show_detailed_stats: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def handle_broadcast_message(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID or user_states.get(user.id) != States.BROADCAST:
            return
        
        message_text = update.message.text
        
        if message_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            update.message.reply_text("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
            return
        
        users = db.get_all_users()
        
        if not users:
            update.message.reply_text("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
            user_states[user.id] = States.START
            return
        
        update.message.reply_text(f"üîÑ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º...")
        
        success_count = 0
        fail_count = 0
        
        for user_data in users:
            try:
                context.bot.send_message(
                    chat_id=user_data[1],  # telegram_id
                    text=f"üì¢ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}",
                    parse_mode='Markdown'
                )
                success_count += 1
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_data[1]}: {e}")
                fail_count += 1
        
        update.message.reply_text(
            f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:*\n\n"
            f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {fail_count}",
            parse_mode='Markdown'
        )
        user_states[user.id] = States.START
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_broadcast_message: {e}")
        update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def start_ban_user(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user = update.effective_user
        user_states[user.id] = States.ADMIN_BAN_USER
        update.message.reply_text(
            "üö´ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ start_ban_user: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def start_unban_user(update: Update, context: CallbackContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user = update.effective_user
        user_states[user.id] = States.ADMIN_UNBAN_USER
        update.message.reply_text(
            "‚úÖ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ start_unban_user: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def handle_ban_user(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_BAN_USER:
            return
        
        user_id_text = update.message.text
        
        if user_id_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            update.message.reply_text("‚ùå –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        try:
            user_id = int(user_id_text)
            if db.ban_user(user_id):
                update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π", parse_mode='Markdown')
            else:
                update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", parse_mode='Markdown')
        except ValueError:
            update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        
        user_states[user.id] = States.START
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_ban_user: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def handle_unban_user(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user = update.effective_user
        if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_UNBAN_USER:
            return
        
        user_id_text = update.message.text
        
        if user_id_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            update.message.reply_text("‚ùå –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        try:
            user_id = int(user_id_text)
            if db.unban_user(user_id):
                update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π", parse_mode='Markdown')
            else:
                update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ", parse_mode='Markdown')
        except ValueError:
            update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        
        user_states[user.id] = States.START
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_unban_user: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def debug_search(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–±–∞–≥—É –ø–æ—à—É–∫—É"""
    try:
        user = update.effective_user
        logger.info(f"üîß [DEBUG COMMAND] –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        current_user = db.get_user(user.id)
        
        if not current_user:
            update.message.reply_text("‚ùå –í–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –î–µ–±–∞–≥ –ø–æ—à—É–∫—É
        seeking_gender = current_user.get('seeking_gender', 'all')
        current_gender = current_user.get('gender')
        
        # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        random_user = db.get_random_user(user.id)
        
        debug_info = f"""üîß *–î–ï–ë–ê–ì –ü–û–®–£–ö–£*

üë§ *–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:*
‚Ä¢ ID: `{user.id}`
‚Ä¢ –°—Ç–∞—Ç—å: {current_gender}
‚Ä¢ –®—É–∫–∞—î—Ç–µ: {seeking_gender}

üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É:*
‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç: {'1' if random_user else '0'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–Ü–®–ù–û' if random_user else '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û'}

üìä *–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:*
‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {db.get_users_count()}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–Ω–∫–µ—Ç: {db.get_statistics()[2]}"""

        if random_user:
            debug_info += f"\n\nüë§ *–ó–Ω–∞–π–¥–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:*\n‚Ä¢ ID: `{random_user[1]}`\n‚Ä¢ –°—Ç–∞—Ç—å: {random_user[5]}"
        
        update.message.reply_text(debug_info, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ debug_search: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def universal_handler(update: Update, context: CallbackContext):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user = update.effective_user
        text = update.message.text if update.message.text else ""
        state = user_states.get(user.id, States.START)
        
        logger.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.first_name}: '{text}', —Å—Ç–∞–Ω: {state}")

        # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏" or text == "üîô –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
            user_states[user.id] = States.START
            context.user_data.pop('waiting_for_city', None)
            context.user_data.pop('contact_admin', None)
            update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return

        # 2. –û–±—Ä–æ–±–∫–∞ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º
        if state == States.CONTACT_ADMIN:
            logger.info(f"üîß –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –≤—ñ–¥ {user.id}")
            handle_contact_message(update, context)
            return

        # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
        if state == States.ADD_MAIN_PHOTO:
            handle_main_photo(update, context)
            return

        # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é
        if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                     States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
            handle_profile_message(update, context)
            return
        
        # 5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
        if context.user_data.get('waiting_for_city'):
            clean_city = text.replace('üèôÔ∏è ', '').strip()
            users = db.get_users_by_city(clean_city, user.id)
            
            if users:
                user_data = users[0]
                show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
                context.user_data['search_users'] = users
                context.user_data['current_index'] = 0
                context.user_data['search_type'] = 'city'
            else:
                update.message.reply_text(
                    f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                    reply_markup=get_main_menu(user.id)
                )
            
            context.user_data['waiting_for_city'] = False
            return
        
        # 6. –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ –∞–¥–º—ñ–Ω–∞
        if user.id == ADMIN_ID:
            state = user_states.get(user.id)
            if state == States.ADMIN_BAN_USER:
                handle_ban_user(update, context)
                return
            elif state == States.ADMIN_UNBAN_USER:
                handle_unban_user(update, context)
                return
            elif state == States.BROADCAST:
                handle_broadcast_message(update, context)
                return
        
        # 7. –ê–¥–º—ñ–Ω-–º–µ–Ω—é
        if user.id == ADMIN_ID:
            if text in ["üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üì¢ –†–æ–∑—Å–∏–ª–∫–∞", "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
                handle_admin_actions(update, context)
                return
            
            # –û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω-–∫–Ω–æ–ø–æ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
            if text in ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]:
                if text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
                    show_users_list(update, context)
                elif text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                    start_ban_user(update, context)
                elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                    start_unban_user(update, context)
                elif text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö":
                    show_banned_users(update, context)
                elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ":
                    show_admin_panel(update, context)
                return
        
        # 8. –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
            start_profile_creation(update, context)
            return
        
        elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            show_my_profile(update, context)
            return
        
        elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
            search_profiles(update, context)
            return
        
        elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
            search_by_city(update, context)
            return
        
        elif text == "‚ù§Ô∏è –õ–∞–π–∫":
            handle_like(update, context)
            return
        
        elif text == "‚û°Ô∏è –î–∞–ª—ñ":
            show_next_profile(update, context)
            return
        
        elif text == "üîô –ú–µ–Ω—é":
            update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
            return
        
        elif text == "üèÜ –¢–æ–ø":
            show_top_users(update, context)
            return
        
        elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
            show_matches(update, context)
            return
        
        elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
            show_likes(update, context)
            return
        
        elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
            handle_top_selection(update, context)
            return
        
        # 9. –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º
        elif text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
            contact_admin(update, context)
            return
        
        # 10. –ö–æ–º–∞–Ω–¥–∞ –¥–µ–±–∞–≥—É
        elif text == "/debug_search":
            debug_search(update, context)
            return
        
        # 11. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ
        update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user.id)
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    try:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}", exc_info=True)
        if update and update.effective_user:
            update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

def setup_handlers(updater):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("debug_search", debug_search))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
    dispatcher.add_handler(MessageHandler(Filters.regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
    dispatcher.add_handler(MessageHandler(Filters.regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üîô –ú–µ–Ω—é$'), lambda update, context: update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(update.effective_user.id))))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üèÜ –¢–æ–ø$'), show_top_users))
    dispatcher.add_handler(MessageHandler(Filters.regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
    dispatcher.add_handler(MessageHandler(Filters.regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
    dispatcher.add_handler(MessageHandler(Filters.regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
    dispatcher.add_handler(MessageHandler(Filters.regex("^üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º$"), contact_admin))
    
    # –ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏
    dispatcher.add_handler(MessageHandler(Filters.regex('^(üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ|üì¢ –†–æ–∑—Å–∏–ª–∫–∞|üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É|üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è|üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), handle_admin_actions))
    dispatcher.add_handler(MessageHandler(Filters.regex('^(üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤|üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö|üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)$'), universal_handler))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    dispatcher.add_handler(MessageHandler(Filters.text & Filters.regex('^üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏$'), start_ban_user))
    dispatcher.add_handler(MessageHandler(Filters.text & Filters.regex('^‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏$'), start_unban_user))
    dispatcher.add_handler(MessageHandler(Filters.text & Filters.regex('^üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞$'), start_ban_user))
    dispatcher.add_handler(MessageHandler(Filters.text & Filters.regex('^‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞$'), start_unban_user))
    
    # –§–æ—Ç–æ —Ç–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    dispatcher.add_handler(MessageHandler(Filters.photo, handle_main_photo))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, universal_handler))

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    dispatcher.add_error_handler(error_handler)

def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ updater
        updater = Updater(TOKEN, use_context=True)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        setup_handlers(updater)
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling –ë–ï–ó idle()
        updater.start_polling()
        
        # –ü—Ä–æ—Å—Ç–∏–π –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª
        import time
        while True:
            time.sleep(10)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

def start_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}...")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–ø—É—Å–∫—É —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è
    run_type = os.environ.get("RUN_TYPE", "web")
    
    if run_type == "bot":
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot...")
        start_telegram_bot()
    else:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask Web Server...")
        start_flask()

if __name__ == "__main__":
    main()