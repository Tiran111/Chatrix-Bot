import logging
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("==========================================")
print("ü§ñ CHATRIX BOT - STARTING...")
print("==========================================")

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = os.environ.get('ADMIN_ID', '1385645772')
PORT = int(os.environ.get('PORT', 10000))

print(f"TOKEN: {TOKEN[:10] + '...' if TOKEN else 'NOT SET'}")
print(f"ADMIN_ID: {ADMIN_ID}")
print(f"PORT: {PORT}")

if not TOKEN:
    print("‚ùå ERROR: BOT_TOKEN not set!")
    print("üí° Set BOT_TOKEN in Render environment variables")
    exit(1)

# –Ü–º–ø–æ—Ä—Ç –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
try:
    from flask import Flask, request
    from telegram import Update
    from telegram.ext import Application, CommandHandler, ContextTypes
    print("‚úÖ Dependencies imported")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    exit(1)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
application = None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n"
        f"üÜî –í–∞—à ID: {user.id}\n\n"
        f"üíû Chatrix Bot –ø—Ä–∞—Ü—é—î!",
        parse_mode='Markdown'
    )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
def init_bot():
    global application
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start_command))
        application.initialize()
        
        WEBHOOK_URL = os.environ.get('WEBHOOK_URL', "https://chatrix-bot-4m1p.onrender.com/webhook")
        application.bot.set_webhook(WEBHOOK_URL)
        
        print(f"‚úÖ Bot initialized - Webhook: {WEBHOOK_URL}")
        return application
    except Exception as e:
        print(f"‚ùå Bot init error: {e}")
        return None

# –ú–∞—Ä—à—Ä—É—Ç–∏ Flask
@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running!", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    global application
    try:
        if not application:
            application = init_bot()
        update_data = request.get_json()
        if update_data:
            update = Update.de_json(update_data, application.bot)
            application.process_update(update)
        return "OK", 200
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return "Error", 500

print("==========================================")
print("‚úÖ BOT READY - Starting server...")
print("==========================================")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
init_bot()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=PORT, debug=False)