import logging
import os
import asyncio
import threading
import time
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
import urllib.request
import json

# –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–•
print("üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
try:
    from database_postgres import db
    print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
    print(f"üîó DATABASE_URL: {os.environ.get('DATABASE_URL', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    try:
        test_user = db.get_user(1)  # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç
        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL —É—Å–ø—ñ—à–Ω–µ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL: {e}")
        
except ImportError as e:
    print(f"‚ö†Ô∏è PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    from database_postgres import db  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PostgreSQL —è–∫ –æ—Å–Ω–æ–≤–Ω—É
    print("‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logging.getLogger('werkzeug').setLevel(logging.WARNING)

app = Flask(__name__)

WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
PORT = int(os.environ.get('PORT', 10000))

application = None
event_loop = None
bot_initialized = False
bot_initialization_started = False

# –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
from keyboards.main_menu import get_main_menu
from utils.states import user_states, States
from config import ADMIN_ID

def keep_alive():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞—Ç–∫—É –±–µ–∑ requests"""
    while True:
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ urllib –∑–∞–º—ñ—Å—Ç—å requests
            with urllib.request.urlopen('https://chatrix-bot-4m1p.onrender.com/health', timeout=10) as response:
                logger.info(f"üîÑ Keep-alive: {response.getcode()}")
        except Exception as e:
            logger.error(f"‚ùå Keep-alive –ø–æ–º–∏–ª–∫–∞: {e}")
        
        # –ß–µ–∫–∞—î–º–æ 4 —Ö–≤–∏–ª–∏–Ω–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        time.sleep(240)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ keep-alive –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
keep_alive_thread.start()

def validate_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    required_vars = ['BOT_TOKEN', 'ADMIN_ID']
    missing_vars = []
    
    for var in required_vars:
        if not os.environ.get(var):
            missing_vars.append(var)
    
    if missing_vars:
        error_msg = f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {', '.join(missing_vars)}"
        logger.error(error_msg)
        raise ValueError(error_msg)
    
    token = os.environ.get('BOT_TOKEN')
    if not token or token == 'your_bot_token_here':
        error_msg = "‚ùå –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–∫–µ–Ω. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞."
        logger.error(error_msg)
        raise ValueError(error_msg)
    
    try:
        admin_id = int(os.environ.get('ADMIN_ID', 0))
        if admin_id == 0:
            raise ValueError("ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except ValueError:
        raise ValueError("‚ùå ADMIN_ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º")
    
    logger.info("‚úÖ –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")

def run_async_tasks():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    global event_loop
    event_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(event_loop)
    event_loop.run_forever()

async_thread = threading.Thread(target=run_async_tasks, daemon=True)
async_thread.start()

async def debug_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ª–∞–¥–∫–∞ –±–æ—Ç–∞"""
    user = update.effective_user
    
    try:
        user_data = db.get_user(user.id)
        user_count = db.get_users_count()
        stats = db.get_statistics()
        male, female, total_active, goals_stats = stats
        
        message = f"""
üîß *–î–ï–¢–ê–õ–¨–ù–ê –í–Ü–î–õ–ê–î–ö–ê –ë–û–¢–ê*

üìä *–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:* PostgreSQL ‚úÖ
üë§ *–í–∞—à ID:* `{user.id}`
üìõ *–í–∞—à–µ —ñ–º'—è:* {user.first_name}
üìà *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—Å—å–æ–≥–æ:* {user_count}
üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* {male} —á–æ–ª., {female} –∂—ñ–Ω., {total_active} –∞–∫—Ç–∏–≤.

*–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π:*
"""
        
        # –¢–µ—Å—Ç –ø–æ—à—É–∫—É
        try:
            random_user = db.get_random_user(user.id)
            if random_user:
                if isinstance(random_user, dict):
                    user_name = random_user.get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
                else:
                    user_name = random_user[3] if len(random_user) > 3 else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
                message += f"üîç *–ü–æ—à—É–∫:* ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {user_name}\n"
            else:
                message += f"üîç *–ü–æ—à—É–∫:* ‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        except Exception as e:
            message += f"üîç *–ü–æ—à—É–∫:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        # –¢–µ—Å—Ç –ª–∞–π–∫—ñ–≤
        try:
            can_like, like_msg = db.can_like_today(user.id)
            message += f"‚ù§Ô∏è *–õ–∞–π–∫–∏:* {like_msg}\n"
        except Exception as e:
            message += f"‚ù§Ô∏è *–õ–∞–π–∫–∏:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        # –¢–µ—Å—Ç –º–∞—Ç—á—ñ–≤
        try:
            matches = db.get_user_matches(user.id)
            message += f"üíå *–ú–∞—Ç—á—ñ:* {len(matches)} –∑–Ω–∞–π–¥–µ–Ω–æ\n"
        except Exception as e:
            message += f"üíå *–ú–∞—Ç—á—ñ:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        # –¢–µ—Å—Ç —Ñ–æ—Ç–æ
        try:
            photos = db.get_profile_photos(user.id)
            message += f"üì∑ *–§–æ—Ç–æ:* {len(photos)} –¥–æ–¥–∞–Ω–æ\n"
        except Exception as e:
            message += f"üì∑ *–§–æ—Ç–æ:* ‚ùå –ü–æ–º–∏–ª–∫–∞ - {str(e)[:100]}\n"
            
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)[:200]}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = update.effective_user
        
        logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")
        
        db.add_user(user.id, user.username, user.first_name)
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –¥–æ–¥–∞–Ω–∏–π –≤ –±–∞–∑—É")
        
        user_states[user.id] = States.START
        
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤!\n\n"
            f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
        )
        
        user_data, is_complete = db.get_user_profile(user.id)
        
        if not is_complete:
            welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
            keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
        else:
            keyboard = [
                ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
                ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
                ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
                ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
            ]
        
        if user.id == ADMIN_ID:
            keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user.first_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ /start: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω–æ–º"""
    try:
        user = update.effective_user
        user_states[user.id] = States.CONTACT_ADMIN
        
        contact_text = f"""üë®‚Äçüíº *–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*

üìß –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è.

üÜî –í–∞—à ID: `{user.id}`
üë§ –í–∞—à–µ —ñ–º'—è: {user.first_name}

üí¨ *–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*"""

        await update.message.reply_text(
            contact_text,
            reply_markup=ReplyKeyboardMarkup([['üîô –°–∫–∞—Å—É–≤–∞—Ç–∏']], resize_keyboard=True),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ contact_admin: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

async def handle_contact_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º"""
    try:
        user = update.effective_user
        
        if user_states.get(user.id) != States.CONTACT_ADMIN:
            return
        
        message_text = update.message.text
        
        if message_text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return
        
        from handlers.notifications import notification_system
        await notification_system.notify_contact_admin(context, user.id, message_text)
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_main_menu(user.id)
        )
        
        user_states[user.id] = States.START
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_contact_message: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

# –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ –≤–µ—Ä—Å—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ
async def start_profile_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    try:
        from handlers.profile import start_profile_creation as real_start_profile
        await real_start_profile(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é"""
    try:
        from handlers.profile import show_my_profile as real_show_profile
        await real_show_profile(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—à—É–∫—É –ø—Ä–æ—Ñ—ñ–ª—ñ–≤"""
    try:
        from handlers.search import search_profiles as real_search
        await real_search(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def search_by_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º"""
    try:
        from handlers.search import search_by_city as real_search_city
        await real_search_city(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
    try:
        from handlers.search import show_next_profile as real_next_profile
        await real_next_profile(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ª–∞–π–∫—É"""
    try:
        from handlers.search import handle_like as real_handle_like
        await real_handle_like(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ª–∞–π–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_like_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É"""
    try:
        from handlers.search import handle_like_back as real_handle_like_back
        await real_handle_like_back(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        from handlers.search import show_top_users as real_show_top
        await real_show_top(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –º–∞—Ç—á—ñ–≤"""
    try:
        from handlers.search import show_matches as real_show_matches
        await real_show_matches(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –º–∞—Ç—á—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def show_likes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –ª–∞–π–∫—ñ–≤"""
    try:
        from handlers.search import show_likes as real_show_likes
        await real_show_likes(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–∞–π–∫—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_top_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –≤–∏–±–æ—Ä—É —Ç–æ–ø—É"""
    try:
        from handlers.search import handle_top_selection as real_handle_top
        await real_handle_top(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É —Ç–æ–ø—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –∞–¥–º—ñ–Ω –¥—ñ–π"""
    try:
        from handlers.admin import handle_admin_actions as real_admin_actions
        await real_admin_actions(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

async def handle_main_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        from handlers.profile import handle_main_photo as real_handle_photo
        await real_handle_photo(update, context)
    except ImportError:
        await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user = update.effective_user
        text = update.message.text if update.message.text else ""
        
        state = user_states.get(user.id, States.START)

        if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
            user_states[user.id] = States.START
            await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_main_menu(user.id))
            return

        if state == States.CONTACT_ADMIN:
            await handle_contact_message(update, context)
            return

        if state == States.ADD_MAIN_PHOTO:
            await handle_main_photo(update, context)
            return

        if state in [States.PROFILE_AGE, States.PROFILE_GENDER, States.PROFILE_SEEKING_GENDER, 
                     States.PROFILE_CITY, States.PROFILE_GOAL, States.PROFILE_BIO]:
            try:
                from handlers.profile import handle_profile_message
                await handle_profile_message(update, context)
            except ImportError:
                await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        if context.user_data.get('waiting_for_city'):
            clean_city = text.replace('üèôÔ∏è ', '').strip()
            users = db.get_users_by_city(clean_city, user.id)
            
            if users:
                try:
                    from handlers.search import show_user_profile
                    user_data = users[0]
                    await show_user_profile(update, context, user_data, f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {clean_city}")
                    context.user_data['search_users'] = users
                    context.user_data['current_index'] = 0
                    context.user_data['search_type'] = 'city'
                except ImportError:
                    await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                await update.message.reply_text(
                    f"üòî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç —É –º—ñ—Å—Ç—ñ {clean_city}",
                    reply_markup=get_main_menu(user.id)
                )
            
            context.user_data['waiting_for_city'] = False
            return
        
        if user.id == ADMIN_ID:
            admin_state = user_states.get(user.id)
            if admin_state == States.ADMIN_BAN_USER:
                try:
                    from handlers.admin import handle_ban_user
                    await handle_ban_user(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
            elif admin_state == States.ADMIN_UNBAN_USER:
                try:
                    from handlers.admin import handle_unban_user
                    await handle_unban_user(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
            elif admin_state == States.BROADCAST:
                try:
                    from handlers.admin import handle_broadcast_message
                    await handle_broadcast_message(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
            elif admin_state == States.ADMIN_SEARCH_USER:
                try:
                    from handlers.admin import handle_user_search
                    await handle_user_search(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" or text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
            await start_profile_creation(update, context)
            return
        
        elif text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            await show_my_profile(update, context)
            return
        
        elif text == "üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç":
            await search_profiles(update, context)
            return
        
        elif text == "üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É":
            await search_by_city(update, context)
            return
        
        elif text == "‚û°Ô∏è –î–∞–ª—ñ":
            await show_next_profile(update, context)
            return
        
        elif text == "‚ù§Ô∏è –õ–∞–π–∫":
            await handle_like(update, context)
            return
        
        elif text == "‚ù§Ô∏è –í–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫":
            await handle_like_back(update, context)
            return
        
        elif text == "üîô –ú–µ–Ω—é":
            await update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))
            return
        
        elif text == "üèÜ –¢–æ–ø":
            await show_top_users(update, context)
            return
        
        elif text == "üíå –ú–æ—ó –º–∞—Ç—á—ñ":
            await show_matches(update, context)
            return
        
        elif text == "‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
            await show_likes(update, context)
            return
        
        elif text in ["üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"]:
            await handle_top_selection(update, context)
            return
        
        elif text == "üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º":
            await contact_admin(update, context)
            return
        
        elif user.id == ADMIN_ID:
            if text in ["üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üì¢ –†–æ–∑—Å–∏–ª–∫–∞", "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É", "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è"]:
                await handle_admin_actions(update, context)
                return
            
            if text in ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]:
                try:
                    from handlers.admin import show_users_list, show_banned_users, start_ban_user, start_unban_user, show_admin_panel
                    if text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
                        await show_users_list(update, context)
                    elif text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                        await start_ban_user(update, context)
                    elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
                        await start_unban_user(update, context)
                    elif text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö":
                        await show_banned_users(update, context)
                    elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ":
                        await show_admin_panel(update, context)
                except ImportError:
                    await update.message.reply_text("‚ùå –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                return
        
        await update.message.reply_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user.id)
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    try:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ: {context.error}", exc_info=True)
        if update and update.effective_user:
            await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

async def process_update(update):
    """–û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        await application.process_update(update)
        logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {update.update_id}")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

async def initialize_bot_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global application, bot_initialized
    
    try:
        logger.info("üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
        
        from config import initialize_config
        initialize_config()
        from config import TOKEN
        
        application = Application.builder().token(TOKEN).build()
        logger.info("‚úÖ Application —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        setup_handlers(application)
        logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
        await application.initialize()
        logger.info("‚úÖ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        
        bot_initialized = True
        logger.info("ü§ñ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}", exc_info=True)

def setup_handlers(application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    logger.info("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤...")
    
    # –î–æ–¥–∞—î–º–æ debug –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("debug", debug_bot))
    print("‚úÖ Debug –∫–æ–º–∞–Ω–¥–∞ –¥–æ–¥–∞–Ω–∞")
    
    # –†–µ—à—Ç–∞ –≤–∞—à–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex('^(üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å|‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å)$'), start_profile_creation))
    application.add_handler(MessageHandler(filters.Regex('^üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å$'), show_my_profile))
    application.add_handler(MessageHandler(filters.Regex('^üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç$'), search_profiles))
    application.add_handler(MessageHandler(filters.Regex('^üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É$'), search_by_city))
    application.add_handler(MessageHandler(filters.Regex('^‚û°Ô∏è –î–∞–ª—ñ$'), show_next_profile))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –õ–∞–π–∫$'), handle_like))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –í–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫$'), handle_like_back))
    application.add_handler(MessageHandler(filters.Regex('^üîô –ú–µ–Ω—é$'), lambda update, context: update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é", reply_markup=get_main_menu(update.effective_user.id))))
    application.add_handler(MessageHandler(filters.Regex('^üèÜ –¢–æ–ø$'), show_top_users))
    application.add_handler(MessageHandler(filters.Regex('^üíå –ú–æ—ó –º–∞—Ç—á—ñ$'), show_matches))
    application.add_handler(MessageHandler(filters.Regex('^‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤$'), show_likes))
    application.add_handler(MessageHandler(filters.Regex('^(üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤|üë© –¢–æ–ø –∂—ñ–Ω–æ–∫|üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø)$'), handle_top_selection))
    application.add_handler(MessageHandler(filters.Regex("^üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º$"), contact_admin))
    
    # –ê–¥–º—ñ–Ω –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(MessageHandler(filters.Regex('^(üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ|üì¢ –†–æ–∑—Å–∏–ª–∫–∞|üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É|üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è)$'), handle_admin_actions))
    application.add_handler(MessageHandler(filters.Regex('^(üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤|üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞|üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö|üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)$'), universal_handler))
    
    # –§–æ—Ç–æ —Ç–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    application.add_handler(MessageHandler(filters.PHOTO, handle_main_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))

    application.add_error_handler(error_handler)
    logger.info("‚úÖ –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global event_loop, bot_initialization_started
    
    if bot_initialization_started:
        return
        
    bot_initialization_started = True
    
    try:
        validate_environment()
        
        max_wait_time = 10
        start_time = time.time()
        
        while event_loop is None and (time.time() - start_time) < max_wait_time:
            time.sleep(0.1)
            logger.info("‚è≥ –ß–µ–∫–∞—î–º–æ –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é event loop...")
        
        if event_loop is None:
            logger.error("‚ùå Event loop –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º 10 —Å–µ–∫—É–Ω–¥")
            return
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–æ—Ç–∞ —á–µ—Ä–µ–∑ event loop...")
        
        future = asyncio.run_coroutine_threadsafe(initialize_bot_async(), event_loop)
        future.result(timeout=30)
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", exc_info=True)

@app.route('/')
def home():
    if not bot_initialization_started:
        init_bot()
    return "ü§ñ Chatrix Bot is running!"

@app.route('/health')
def health():
    return "OK", 200

@app.route('/healthz')
def healthz():
    return "OK", 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/keepalive')
def keepalive():
    """–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è keep-alive"""
    return "ALIVE", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("üì® –û—Ç—Ä–∏–º–∞–Ω–æ webhook –∑–∞–ø–∏—Ç –≤—ñ–¥ Telegram")
        
        if not bot_initialized or application is None:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏...")
            init_bot()
            
            time.sleep(2)
            
            if not bot_initialized or application is None:
                logger.error("‚ùå –ë–æ—Ç –≤—Å–µ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
                return "Bot not initialized", 500
            
        update_data = request.get_json()
        
        if update_data is None:
            logger.error("‚ùå –ü–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return "Empty update data", 400
            
        update = Update.de_json(update_data, application.bot)
        
        asyncio.run_coroutine_threadsafe(process_update(update), event_loop)
        logger.info("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É –æ–±—Ä–æ–±–∫–∏")
        
        return 'ok'
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ webhook: {e}", exc_info=True)
        return "Error", 500

@app.route('/set_webhook')
def set_webhook_route():
    logger.info("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook")
    try:
        if not bot_initialized:
            init_bot()
            return "üîÑ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è... –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥."
        
        future = asyncio.run_coroutine_threadsafe(application.bot.get_webhook_info(), event_loop)
        webhook_info = future.result(timeout=30)
        
        result = f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}<br>Pending updates: {webhook_info.pending_update_count}"
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ webhook: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ webhook: {e}", exc_info=True)
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

# ==================== –î–ï–¢–ê–õ–¨–ù–ê –í–Ü–î–õ–ê–î–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• ====================
print("=" * 60)
print("üîß –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ë–ê–ó–£ –î–ê–ù–ò–•")
print("=" * 60)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
if 'postgres' in str(type(db)).lower():
    print("‚úÖ –ê–ö–¢–ò–í–ù–ê –ë–ê–ó–ê: PostgreSQL")
    db_type = "PostgreSQL"
else:
    print("‚ÑπÔ∏è –ê–ö–¢–ò–í–ù–ê –ë–ê–ó–ê: SQLite")
    db_type = "SQLite"

# –¢–µ—Å—Ç –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
try:
    user_count = db.get_users_count()
    print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_count}")
    
    stats = db.get_statistics()
    male, female, total_active, goals_stats = stats
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {male} —á–æ–ª., {female} –∂—ñ–Ω., {total_active} –∞–∫—Ç–∏–≤.")
    
    print("‚úÖ –¢–µ—Å—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

print("=" * 60)
print("üöÄ –ë–æ—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
print("=" * 60)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get('PORT', 10000))
    print(f"üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}...")
    app.run(host='0.0.0.0', port=port, debug=False)