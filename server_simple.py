from flask import Flask, request
import threading
import asyncio
import os
import logging
from main import app as flask_app, setup_handlers
from config import TOKEN, ADMIN_ID
from telegram.ext import Application
from telegram import Update
import importlib

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

WEBHOOK_URL = "https://chatrix-bot-4m1p.onrender.com/webhook"
application = None

def setup_bot():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    global application
    
    try:
        logger.info("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–∞—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
            from handlers.profile import start_profile_creation, show_my_profile, handle_profile_message, handle_main_photo
            from handlers.search import search_profiles, search_by_city, show_next_profile, handle_like
            from handlers.admin import handle_admin_actions, show_admin_panel
            from handlers.notifications import notification_system
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑ main.py
            setup_handlers(application)
            
            logger.info("‚úÖ –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
            
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤: {e}")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
            from telegram.ext import CommandHandler, MessageHandler, filters
            
            async def start(update: Update, context):
                await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")
            
            async def echo(update: Update, context):
                await update.message.reply_text("üîß –ë–æ—Ç –≤ —Ä–µ–∂–∏–º—ñ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            
            application.add_handler(CommandHandler("start", start))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def init_webhook():
            await application.initialize()
            await application.bot.set_webhook(WEBHOOK_URL)
            await application.start()
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≤–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            logger.info("üéØ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        loop.run_until_complete(init_webhook())
        loop.run_forever()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
bot_thread = threading.Thread(target=setup_bot, daemon=True)
bot_thread.start()

@flask_app.route('/webhook', methods=['POST'])
def webhook_handler():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram"""
    try:
        if not application:
            return "Bot not initialized", 500
            
        update_data = request.get_json()
        if not update_data:
            return "Empty update data", 400
            
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Ç–æ–º—É –∂ –ø–æ—Ç–æ—Ü—ñ, –¥–µ –ø—Ä–∞—Ü—é—î –±–æ—Ç
        update = Update.de_json(update_data, application.bot)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π event loop –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        if hasattr(application, 'update_queue'):
            # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É –±–æ—Ç–∞
            async def put_update():
                await application.update_queue.put(update)
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –ø–æ—Ç–æ—Ü—ñ –±–æ—Ç–∞
            import asyncio
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    asyncio.create_task(put_update())
                else:
                    loop.run_until_complete(put_update())
            except RuntimeError:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î event loop, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                new_loop = asyncio.new_event_loop()
                asyncio.set_event_loop(new_loop)
                new_loop.run_until_complete(put_update())
        
        return 'ok'
        
    except Exception as e:
        logger.error(f"‚ùå Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return 'error', 500

# –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏
@flask_app.route('/')
def home():
    return "ü§ñ Chatrix Bot is running with full functionality!", 200

@flask_app.route('/health')
def health():
    return "OK", 200

@flask_app.route('/test-bot')
def test_bot():
    """–¢–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –±–æ—Ç–∞"""
    if application and application.bot:
        return f"‚úÖ Bot is running. Webhook: {WEBHOOK_URL}"
    return "‚ùå Bot not initialized", 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    flask_app.run(host='0.0.0.0', port=port, debug=False)