from flask import Flask, request, jsonify
import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import urllib.request
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('BOT_TOKEN')
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
application = None

async def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global application
    try:
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
        await application.initialize()
        
        logger.info("‚úÖ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
        return False

async def start(update: Update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ /start"""
    user = update.effective_user
    logger.info(f"üéØ –û—Ç—Ä–∏–º–∞–Ω–æ /start –≤—ñ–¥ {user.id}")
    await update.message.reply_text(
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n"
        f"üÜî –í–∞—à ID: {user.id}\n"
        "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!\n\n"
        "üéâ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–æ!"
    )

async def echo(update: Update, context):
    """–ï—Ö–æ-–æ–±—Ä–æ–±–Ω–∏–∫"""
    await update.message.reply_text(f"üìù –í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

def set_webhook_manual():
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫ –±–µ–∑ requests"""
    try:
        webhook_url = "https://chatrix-bot-4m1p.onrender.com/webhook"
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ POST –∑–∞–ø–∏—Ç
        data = urllib.parse.urlencode({"url": webhook_url}).encode()
        req = urllib.request.Request(url, data=data, method='POST')
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {result}")
            return result
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"error": str(e)}

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    try:
        if request.method == 'GET':
            return jsonify({"status": "webhook is ready"})
            
        # –û–±—Ä–æ–±–ª—è—î–º–æ POST –∑–∞–ø–∏—Ç
        data = request.get_json()
        if not data:
            return jsonify({"error": "No data"}), 400
        
        logger.info(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫ –≤—ñ–¥ Telegram")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(data, application.bot)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async def process_update():
            await application.process_update(update)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(process_update())
        loop.close()
        
        return jsonify({"status": "ok"})
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/')
def home():
    return "ü§ñ Chatrix Bot is RUNNING! ‚úÖ", 200

@app.route('/health')
def health():
    return "OK", 200

@app.route('/test')
def test():
    return "üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î! –í–µ–±—Ö—É–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.", 200

@app.route('/set_webhook')
def set_webhook_route():
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫ –≤—Ä—É—á–Ω—É"""
    result = set_webhook_manual()
    return jsonify(result)

@app.route('/check_webhook')
def check_webhook():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –≤–µ–±—Ö—É–∫–∞"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo"
        with urllib.request.urlopen(url) as response:
            result = json.loads(response.read().decode())
            return jsonify(result)
    except Exception as e:
        return jsonify({"error": str(e)})

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    success = loop.run_until_complete(init_bot())
    
    if not success:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    logger.info("üåê –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞...")
    set_webhook_manual()
    
    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main()