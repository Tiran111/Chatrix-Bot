import os
import asyncio
import threading
from flask import Flask, request
from telegram.ext import Application, CommandHandler
from telegram import Update

app = Flask(__name__)
TOKEN = os.environ.get('BOT_TOKEN')

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–æ—Ç–∞
application = None

async def start(update: Update, context):
    """–°—Ç–∞–±—ñ–ª—å–Ω–∏–π —Å—Ç–∞—Ä—Ç"""
    user = update.effective_user
    print(f"üéØ –û—Ç—Ä–∏–º–∞–Ω–æ /start –≤—ñ–¥ {user.id}")
    await update.message.reply_text(f"üëã –í—ñ—Ç–∞—é, {user.first_name}! –ë–æ—Ç —Å—Ç–∞–±—ñ–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î! üéâ")

async def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global application
    
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    
    await application.initialize()
    await application.bot.set_webhook("https://chatrix-bot-4m1p.onrender.com/webhook")
    await application.start()
    
    print("‚úÖ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    return application

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø–æ—Ç–æ—Ü—ñ"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(init_bot())
        loop.run_forever()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ—Ç–æ—Ü—ñ –±–æ—Ç–∞: {e}")

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    global application
    
    try:
        if not application:
            return "Bot not initialized", 500
            
        update_data = request.get_json()
        if not update_data:
            return "Empty update data", 400
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(update_data, application.bot)
        
        # –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ event loop –±–æ—Ç–∞
        future = asyncio.run_coroutine_threadsafe(
            application.process_update(update), 
            application._get_running_loop()
        )
        
        # –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            future.result(timeout=10)
            return 'ok'
        except asyncio.TimeoutError:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return "Timeout", 500
            
    except Exception as e:
        print(f"‚ùå Webhook –ø–æ–º–∏–ª–∫–∞: {e}")
        return "Error", 500

@app.route('/')
def home():
    return "ü§ñ Bot is running STABLY! ‚úÖ", 200

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ß–µ–∫–∞—î–º–æ –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    import time
    time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
    port = int(os.environ.get('PORT', 10000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)