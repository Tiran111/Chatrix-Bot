import os
import logging
from flask import Flask, request, jsonify
import asyncio
from telegram.ext import Application, CommandHandler
from telegram import Update

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TOKEN = os.environ.get('BOT_TOKEN')
PORT = int(os.environ.get('PORT', 10000))

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
application = None

# ==================== TELEGRAM BOT ====================

async def start(update: Update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    await update.message.reply_text(f"üëã –í—ñ—Ç–∞—é, {user.first_name}! –ë–æ—Ç –ø—Ä–∞—Ü—é—î! üéâ")

async def init_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global application
    try:
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        
        await application.initialize()
        await application.bot.set_webhook("https://chatrix-bot-4m1p.onrender.com/webhook")
        await application.start()
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        return application
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
        return None

# ==================== FLASK ROUTES ====================

@app.route('/')
def home():
    return jsonify({"status": "running", "service": "Chatrix Bot"}), 200

@app.route('/health')
def health():
    return jsonify({"status": "healthy"}), 200

@app.route('/ping')
def ping():
    return "pong", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    global application
    try:
        if not application:
            return "Bot not initialized", 500
            
        update_data = request.get_json()
        if not update_data:
            return "No data", 400
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(update_data, application.bot)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        asyncio.create_task(application.process_update(update))
        
        return "ok", 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return "Error", 500

# ==================== –ó–ê–ü–£–°–ö ====================

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(init_bot())
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ event loop
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        loop.close()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    import threading
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}")
    app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)