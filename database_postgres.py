import os
import psycopg2
from psycopg2.extras import RealDictCursor
import logging
from datetime import datetime, date

logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        # –û—Ç—Ä–∏–º—É—î–º–æ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            database_url = "postgresql://user:pass@localhost/dating_bot"
        
        logger.info("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...")
        try:
            self.conn = psycopg2.connect(database_url, sslmode='require')
            self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            self.init_db()
            self.update_database_structure()
            logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL: {e}")
            raise

    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL...")

        # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT NOT NULL,
                age INTEGER,
                gender TEXT,
                city TEXT,
                seeking_gender TEXT,
                goal TEXT,
                bio TEXT,
                has_photo BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                likes_count INTEGER DEFAULT 0,
                is_banned BOOLEAN DEFAULT FALSE,
                rating REAL DEFAULT 5.0,
                daily_likes_count INTEGER DEFAULT 0,
                last_like_date DATE,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è —Ñ–æ—Ç–æ
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS photos (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                file_id TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –ª–∞–π–∫—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS likes (
                id SERIAL PRIMARY KEY,
                from_user_id INTEGER NOT NULL REFERENCES users(id),
                to_user_id INTEGER NOT NULL REFERENCES users(id),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(from_user_id, to_user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –º–∞—Ç—á—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS matches (
                id SERIAL PRIMARY KEY,
                user1_id INTEGER NOT NULL REFERENCES users(id),
                user2_id INTEGER NOT NULL REFERENCES users(id),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user1_id, user2_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS profile_views (
                id SERIAL PRIMARY KEY,
                viewer_id INTEGER NOT NULL REFERENCES users(id),
                viewed_user_id INTEGER NOT NULL REFERENCES users(id),
                viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        self.conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö PostgreSQL —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")

    def update_database_structure(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤
            self.cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'users'
            """)
            columns = [row['column_name'] for row in self.cursor.fetchall()]
            
            logger.info(f"üîç –ù–∞—è–≤–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ: {columns}")
            
            changes_made = False
            
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ
            if 'first_name' not in columns:
                logger.info("‚ûï –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å first_name...")
                self.cursor.execute('ALTER TABLE users ADD COLUMN first_name TEXT')
                changes_made = True
            
            if 'last_active' not in columns:
                logger.info("‚ûï –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å last_active...")
                self.cursor.execute('ALTER TABLE users ADD COLUMN last_active TIMESTAMP')
                changes_made = True
            
            if 'rating' not in columns:
                logger.info("‚ûï –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å rating...")
                self.cursor.execute('ALTER TABLE users ADD COLUMN rating REAL')
                changes_made = True
            
            if 'daily_likes_count' not in columns:
                logger.info("‚ûï –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å daily_likes_count...")
                self.cursor.execute('ALTER TABLE users ADD COLUMN daily_likes_count INTEGER')
                changes_made = True
            
            if 'last_like_date' not in columns:
                logger.info("‚ûï –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å last_like_date...")
                self.cursor.execute('ALTER TABLE users ADD COLUMN last_like_date DATE')
                changes_made = True
            
            if changes_made:
                self.conn.commit()
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞")
                self.initialize_new_columns()
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î: {e}")

    def initialize_new_columns(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –Ω–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤"""
        try:
            logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –Ω–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤...")
            
            self.cursor.execute("UPDATE users SET first_name = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á' WHERE first_name IS NULL")
            self.cursor.execute("UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE last_active IS NULL")
            self.cursor.execute("UPDATE users SET rating = 5.0 WHERE rating IS NULL")
            self.cursor.execute("UPDATE users SET daily_likes_count = 0 WHERE daily_likes_count IS NULL")
            
            self.conn.commit()
            logger.info("‚úÖ –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–æ–≤–ø—Ü—ñ–≤: {e}")

    def add_user(self, telegram_id, username, first_name):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                INSERT INTO users (telegram_id, username, first_name)
                VALUES (%s, %s, %s)
                ON CONFLICT (telegram_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name
            ''', (telegram_id, username, first_name))
            self.conn.commit()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π: {telegram_id} - {first_name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return False

    def get_user(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            if user:
                return dict(user)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def update_user_profile(self, telegram_id, age, gender, city, seeking_gender, goal, bio):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {telegram_id}")
            logger.info(f"üîÑ –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –≤—ñ–∫={age}, —Å—Ç–∞—Ç—å={gender}, –º—ñ—Å—Ç–æ={city}, —à—É–∫–∞—î={seeking_gender}, —Ü—ñ–ª—å={goal}")
        
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
        
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            self.cursor.execute('''
                UPDATE users 
                SET age = %s, gender = %s, city = %s, seeking_gender = %s, goal = %s, bio = %s, 
                    last_active = CURRENT_TIMESTAMP, has_photo = TRUE
                WHERE telegram_id = %s
            ''', (age, gender, city, seeking_gender, goal, bio, telegram_id))
        
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
            self.update_user_rating(telegram_id)
        
            self.conn.commit()
        
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            self.conn.rollback()
            return False

    def update_user_rating(self, telegram_id):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user = self.get_user(telegram_id)
            if not user:
                return
            
            base_rating = 5.0
            bonus = 0.0
            
            if user.get('has_photo'):
                bonus += 1.0
            
            if user.get('bio') and len(user.get('bio', '')) > 20:
                bonus += 1.0
            
            likes_count = user.get('likes_count', 0)
            bonus += min(likes_count * 0.1, 3.0)
            
            new_rating = min(base_rating + bonus, 10.0)
            
            self.cursor.execute('UPDATE users SET rating = %s WHERE telegram_id = %s', (new_rating, telegram_id))
            logger.info(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}: {new_rating}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")

    def get_random_user(self, current_user_id, city=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É"""
        try:
            current_user = self.get_user(current_user_id)
            if not current_user:
                logger.error(f"‚ùå –ü–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {current_user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            seeking_gender = current_user.get('seeking_gender', 'all')
            current_gender = current_user.get('gender')
            
            query = '''
                SELECT u.* FROM users u
                WHERE u.telegram_id != %s AND u.age IS NOT NULL 
                AND u.has_photo = TRUE AND u.is_banned = FALSE
            '''
            params = [current_user_id]
            
            if seeking_gender != 'all':
                query += ' AND u.gender = %s'
                params.append(seeking_gender)
            
            if city:
                query += ' AND u.city LIKE %s'
                params.append(f'%{city}%')
            
            # –î–õ–Ø –ê–î–ú–Ü–ù–ê - –Ω–µ –≤–∏–∫–ª—é—á–∞—î–º–æ –≤–∂–µ –ª–∞–π–∫–Ω—É—Ç–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            admin_id_str = os.environ.get('ADMIN_ID', '0')
            if str(current_user_id) != admin_id_str:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                query += ' AND u.telegram_id NOT IN (SELECT u2.telegram_id FROM users u2 JOIN likes l ON u2.id = l.to_user_id JOIN users u3 ON u3.id = l.from_user_id WHERE u3.telegram_id = %s)'
                params.append(current_user_id)
            
            query += ' ORDER BY RANDOM() LIMIT 1'
            
            self.cursor.execute(query, params)
            user = self.cursor.fetchone()
            
            return user
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def add_profile_photo(self, telegram_id, file_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            logger.info(f"üîÑ –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}")
            
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            user_id = user['id']
            
            current_photos = self.get_profile_photos(telegram_id)
            if len(current_photos) >= 3:
                logger.error("‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3)")
                return False
            
            self.cursor.execute('INSERT INTO photos (user_id, file_id) VALUES (%s, %s)', (user_id, file_id))
            self.cursor.execute('UPDATE users SET has_photo = TRUE WHERE telegram_id = %s', (telegram_id,))
            self.update_user_rating(telegram_id)
            
            self.conn.commit()
            logger.info("‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return False

    def get_main_photo(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = %s
                LIMIT 1
            ''', (telegram_id,))
            result = self.cursor.fetchone()
            return result['file_id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return None

    def get_profile_photos(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = %s
            ''', (telegram_id,))
            photos = self.cursor.fetchall()
            return [photo['file_id'] for photo in photos]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return []

    def get_user_profile(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            if user and user['age'] is not None:
                return user, True
            return user, False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return None, False

    def get_users_by_city(self, city, current_user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –º—ñ—Å—Ç–æ–º"""
        try:
            current_user = self.get_user(current_user_id)
            if not current_user:
                return []
        
            seeking_gender = current_user.get('seeking_gender', 'all')
        
            # –û—á–∏—â–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –≤—ñ–¥ –µ–º–æ–¥–∑—ñ —Ç–∞ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
            clean_city = city.replace('üèôÔ∏è', '').strip()
        
            logger.info(f"üîç [CITY SEARCH] –®—É–∫–∞—î–º–æ –≤ –º—ñ—Å—Ç—ñ: '{clean_city}', —à—É–∫–∞—î —Å—Ç–∞—Ç—å: {seeking_gender}")
        
            query = '''
                SELECT u.* FROM users u
                WHERE u.telegram_id != %s 
                AND LOWER(u.city) LIKE LOWER(%s)
                AND u.age IS NOT NULL 
                AND u.has_photo = TRUE 
                AND u.is_banned = FALSE
            '''
            params = [current_user_id, f'%{clean_city}%']
        
            if seeking_gender != 'all':
                query += ' AND u.gender = %s'
                params.append(seeking_gender)
        
            # –í–∏–∫–ª—é—á–∞—î–º–æ –≤–∂–µ –ª–∞–π–∫–Ω—É—Ç–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            admin_id_str = os.environ.get('ADMIN_ID', '0')
            if str(current_user_id) != admin_id_str:
                query += ' AND u.telegram_id NOT IN (SELECT u2.telegram_id FROM users u2 JOIN likes l ON u2.id = l.to_user_id JOIN users u3 ON u3.id = l.from_user_id WHERE u3.telegram_id = %s)'
                params.append(current_user_id)
        
            query += ' ORDER BY RANDOM() LIMIT 20'
        
            self.cursor.execute(query, params)
            users = self.cursor.fetchall()
        
            logger.info(f"üîç [CITY SEARCH] –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}")
        
            return users
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º: {e}")
            return []

    def get_likes_count(self, user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–π–∫—ñ–≤"""
        try:
            self.cursor.execute('SELECT likes_count FROM users WHERE telegram_id = %s', (user_id,))
            result = self.cursor.fetchone()
            return result['likes_count'] if result else 0
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–π–∫—ñ–≤: {e}")
            return 0

    def can_like_today(self, user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        try:
            user = self.get_user(user_id)
            if not user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            today = date.today()
            last_like_date = user.get('last_like_date')
            daily_likes = user.get('daily_likes_count', 0)
            
            if last_like_date != today:
                self.cursor.execute(
                    'UPDATE users SET daily_likes_count = 0, last_like_date = %s WHERE telegram_id = %s',
                    (today, user_id)
                )
                self.conn.commit()
                return True, "–ú–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏"
            
            if daily_likes >= 50:
                return False, "–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ª–∞–π–∫—ñ–≤ (50)"
            
            return True, f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∞–π–∫—ñ–≤: {50 - daily_likes}"
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—ñ–≤: {e}")
            return False, "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"

    def add_like(self, from_user_id, to_user_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –æ–±–º–µ–∂–µ–Ω—å"""
        try:
            can_like, message = self.can_like_today(from_user_id)
            if not can_like:
                return False, message
            
            if self.has_liked(from_user_id, to_user_id):
                return False, "–í–∏ –≤–∂–µ –ª–∞–π–∫–∞–ª–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
            
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (from_user_id,))
            from_user = self.cursor.fetchone()
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (to_user_id,))
            to_user = self.cursor.fetchone()
            
            if not from_user or not to_user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            self.cursor.execute('INSERT INTO likes (from_user_id, to_user_id) VALUES (%s, %s) ON CONFLICT DO NOTHING', (from_user['id'], to_user['id']))
            self.cursor.execute('UPDATE users SET likes_count = likes_count + 1 WHERE id = %s', (to_user['id'],))
            
            today = date.today()
            self.cursor.execute(
                'UPDATE users SET daily_likes_count = daily_likes_count + 1, last_like_date = %s WHERE telegram_id = %s',
                (today, from_user_id)
            )
            
            self.update_user_rating(to_user_id)
            
            self.conn.commit()
            
            is_mutual = self.has_liked(to_user_id, from_user_id)
            
            if is_mutual:
                self.cursor.execute('''
                    INSERT INTO matches (user1_id, user2_id)
                    VALUES (%s, %s) ON CONFLICT DO NOTHING
                ''', (min(from_user['id'], to_user['id']), max(from_user['id'], to_user['id'])))
                self.conn.commit()
            
            return True, "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ" if not is_mutual else "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ! üíï –£ –≤–∞—Å –º–∞—Ç—á!"
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É: {e}")
            return False, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"

    def get_user_matches(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            if not user:
                return []
            
            self.cursor.execute('''
                SELECT DISTINCT u.* FROM users u
                JOIN matches m ON (u.id = m.user1_id OR u.id = m.user2_id)
                WHERE (m.user1_id = %s OR m.user2_id = %s) AND u.id != %s
            ''', (user['id'], user['id'], user['id']))
            
            matches = self.cursor.fetchall()
            return matches
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤: {e}")
            return []

    def get_top_users_by_rating(self, limit=10, gender=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        try:
            query = '''
                SELECT * FROM users 
                WHERE is_banned = FALSE AND age IS NOT NULL AND has_photo = TRUE
            '''
            params = []
            
            if gender:
                query += ' AND gender = %s'
                params.append(gender)
                
            query += ' ORDER BY rating DESC, likes_count DESC LIMIT %s'
            params.append(limit)
            
            self.cursor.execute(query, params)
            users = self.cursor.fetchall()
            
            return users
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º: {e}")
            return []

    def get_user_likers(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            if not user:
                return []
            
            self.cursor.execute('''
                SELECT u.* FROM users u
                JOIN likes l ON u.id = l.from_user_id
                JOIN users target ON target.id = l.to_user_id
                WHERE target.telegram_id = %s AND u.telegram_id != %s
            ''', (telegram_id, telegram_id))
            
            likers = self.cursor.fetchall()
            return likers
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–π–∫–µ—Ä—ñ–≤: {e}")
            return []

    def has_liked(self, from_user_id, to_user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Å—Ç–∞–≤–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ª–∞–π–∫ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            self.cursor.execute('''
                SELECT l.id FROM likes l
                JOIN users u1 ON u1.id = l.from_user_id
                JOIN users u2 ON u2.id = l.to_user_id
                WHERE u1.telegram_id = %s AND u2.telegram_id = %s
            ''', (from_user_id, to_user_id))
            
            result = self.cursor.fetchone()
            return result is not None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—É: {e}")
            return False

    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = %s AND age IS NOT NULL', ('male',))
            male = self.cursor.fetchone()['count']
            
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = %s AND age IS NOT NULL', ('female',))
            female = self.cursor.fetchone()['count']
            
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE age IS NOT NULL AND has_photo = TRUE')
            total_active = self.cursor.fetchone()['count']
            
            self.cursor.execute('SELECT goal, COUNT(*) FROM users WHERE goal IS NOT NULL GROUP BY goal')
            goals_stats = self.cursor.fetchall()
            
            return male, female, total_active, goals_stats
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0, 0, []

    def get_users_count(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM users')
            return self.cursor.fetchone()['count']
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return 0

    def get_all_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT * FROM users ORDER BY created_at DESC')
            users = self.cursor.fetchall()
            return users
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def get_banned_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE is_banned = TRUE')
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {e}")
            return []

    def get_all_active_users(self, exclude_user_id=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            if exclude_user_id:
                self.cursor.execute('''
                    SELECT * FROM users 
                    WHERE age IS NOT NULL AND has_photo = TRUE AND is_banned = FALSE AND telegram_id != %s
                    ORDER BY last_active DESC
                ''', (exclude_user_id,))
            else:
                self.cursor.execute('''
                    SELECT * FROM users 
                    WHERE age IS NOT NULL AND has_photo = TRUE AND is_banned = FALSE
                    ORDER BY last_active DESC
                ''')
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def search_users_advanced(self, user_id, gender, city, goal):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            query = '''
                SELECT * FROM users 
                WHERE telegram_id != %s AND age IS NOT NULL 
                AND has_photo = TRUE AND is_banned = FALSE
            '''
            params = [user_id]
            
            if gender != 'all':
                query += ' AND gender = %s'
                params.append(gender)
            
            if city:
                query += ' AND city LIKE %s'
                params.append(f'%{city}%')
            
            if goal:
                query += ' AND goal = %s'
                params.append(goal)
            
            query += ' ORDER BY RANDOM() LIMIT 20'
            
            self.cursor.execute(query, params)
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {e}")
            return []

    def cleanup_old_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            self.cursor.execute('''
                DELETE FROM users 
                WHERE age IS NULL AND created_at < CURRENT_TIMESTAMP - INTERVAL '30 days'
            ''')
            
            self.cursor.execute('''
                DELETE FROM likes 
                WHERE created_at < CURRENT_TIMESTAMP - INTERVAL '90 days'
            ''')
            
            self.conn.commit()
            logger.info("‚úÖ –°—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return False

    def ban_user(self, telegram_id):
        """–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
                return False
            
            self.cursor.execute('UPDATE users SET is_banned = TRUE WHERE telegram_id = %s', (telegram_id,))
            self.conn.commit()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return False

    def unban_user(self, telegram_id):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
                return False
            
            self.cursor.execute('UPDATE users SET is_banned = FALSE WHERE telegram_id = %s', (telegram_id,))
            self.conn.commit()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return False

    def unban_all_users(self):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = FALSE WHERE is_banned = TRUE')
            self.conn.commit()
            logger.info("‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return False

    def search_user(self, query):
        """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ —ñ–º–µ–Ω–µ–º"""
        try:
            try:
                user_id = int(query)
                self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (user_id,))
                result_by_id = self.cursor.fetchall()
                if result_by_id:
                    return result_by_id
            except ValueError:
                pass
            
            self.cursor.execute('''
                SELECT * FROM users 
                WHERE first_name ILIKE %s OR username ILIKE %s
                ORDER BY created_at DESC
            ''', (f'%{query}%', f'%{query}%'))
            
            results = self.cursor.fetchall()
            return results
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return []

    def get_user_by_id(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            if user:
                return dict(user)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def update_user_name(self, telegram_id, first_name):
        """–û–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                UPDATE users SET first_name = %s WHERE telegram_id = %s
            ''', (first_name, telegram_id))
            self.conn.commit()
            logger.info(f"‚úÖ –Ü–º'—è –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}: {first_name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ: {e}")
            return False

    def add_profile_view(self, viewer_id, viewed_user_id):
        """–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –ø—Ä–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (viewer_id,))
            viewer = self.cursor.fetchone()
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (viewed_user_id,))
            viewed = self.cursor.fetchone()
            
            if viewer and viewed:
                self.cursor.execute('''
                    INSERT INTO profile_views (viewer_id, viewed_user_id)
                    VALUES (%s, %s)
                ''', (viewer['id'], viewed['id']))
                self.conn.commit()
                return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
        return False

    def debug_user_profile(self, telegram_id):
        """–í—ñ–¥–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if user:
                logger.info(f"üîç [DEBUG USER] ID: {user['telegram_id']}")
                logger.info(f"üîç [DEBUG USER] –Ü–º'—è: {user['first_name']}")
                logger.info(f"üîç [DEBUG USER] –í—ñ–∫: {user['age']}")
                logger.info(f"üîç [DEBUG USER] –°—Ç–∞—Ç—å: {user['gender']}")
                logger.info(f"üîç [DEBUG USER] –ú—ñ—Å—Ç–æ: {user['city']}")
                logger.info(f"üîç [DEBUG USER] –§–æ—Ç–æ: {user['has_photo']}")
                logger.info(f"üîç [DEBUG USER] –õ–∞–π–∫—ñ–≤: {user['likes_count']}")
                logger.info(f"üîç [DEBUG USER] –†–µ–π—Ç–∏–Ω–≥: {user['rating']}")
                logger.info(f"üîç [DEBUG USER] –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π: {user['is_banned']}")
                return True
            else:
                logger.info(f"üîç [DEBUG USER] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ª–∞–¥–∫–∏: {e}")
            return False

    def calculate_user_rating(self, user_id):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user = self.get_user(user_id)
            if not user:
                return 5.0
            
            base_rating = 5.0
            bonus = 0.0
            
            if user.get('has_photo'):
                bonus += 1.0
            
            if user.get('bio') and len(user.get('bio', '')) > 20:
                bonus += 1.0
            
            likes_count = user.get('likes_count', 0)
            bonus += min(likes_count * 0.1, 3.0)
            
            if user.get('last_active'):
                try:
                    last_active = user['last_active']
                    if isinstance(last_active, str):
                        last_active = datetime.fromisoformat(last_active.replace('Z', '+00:00'))
                    
                    days_since_active = (datetime.now().replace(tzinfo=last_active.tzinfo) - last_active).days
                    if days_since_active <= 7:
                        bonus += 0.5
                except:
                    pass
            
            final_rating = min(base_rating + bonus, 10.0)
            return round(final_rating, 1)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
            return 5.0

    def update_all_ratings(self):
        """–û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT telegram_id FROM users WHERE age IS NOT NULL')
            users = self.cursor.fetchall()
            
            updated_count = 0
            for user in users:
                telegram_id = user['telegram_id']
                new_rating = self.calculate_user_rating(telegram_id)
                self.cursor.execute('UPDATE users SET rating = %s WHERE telegram_id = %s', (new_rating, telegram_id))
                updated_count += 1
            
            self.conn.commit()
            logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è {updated_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤: {e}")
            return False

    def reset_database(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–¥–ª—è –∞–¥–º—ñ–Ω–∞)"""
        try:
            logger.info("üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
            self.cursor.execute('DROP TABLE IF EXISTS likes CASCADE')
            self.cursor.execute('DROP TABLE IF EXISTS matches CASCADE')
            self.cursor.execute('DROP TABLE IF EXISTS photos CASCADE')
            self.cursor.execute('DROP TABLE IF EXISTS profile_views CASCADE')
            self.cursor.execute('DROP TABLE IF EXISTS users CASCADE')
            
            self.conn.commit()
            
            # –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
            self.init_db()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–∫–∏–Ω—É—Ç–∞ —Ç–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ë–î: {e}")
            self.conn.rollback()
            return False

    def get_profile_views(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∞–ª–∏ –ø—Ä–æ—Ñ—ñ–ª—å"""
        try:
            self.cursor.execute('''
                SELECT u.* FROM users u
                JOIN profile_views pv ON u.id = pv.viewer_id
                JOIN users target ON target.id = pv.viewed_user_id
                WHERE target.telegram_id = %s AND u.telegram_id != %s
                ORDER BY pv.viewed_at DESC
            ''', (telegram_id, telegram_id))
        
            viewers = self.cursor.fetchall()
            return viewers
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {e}")
            return []        

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()