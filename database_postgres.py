import os
import psycopg2
from psycopg2.extras import RealDictCursor
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import logging
from datetime import datetime, date
import time

logger = logging.getLogger(__name__)

def cleanup_connections():
    """–û—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    try:
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            return
            
        conn = psycopg2.connect(database_url, sslmode='require')
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        cursor.execute("""
            SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE pg_stat_activity.datname = current_database()
            AND pid <> pg_backend_pid()
            AND state = 'idle in transaction'
        """)
        
        cursor.close()
        conn.close()
        logger.info("‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")

class Database:
    def __init__(self):
        # –û—á–∏—â–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        cleanup_connections()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            raise ValueError("DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        logger.info("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...")
        self.conn = None
        self.cursor = None
        self.database_url = database_url
        self.connect_with_retry()
        self.init_db()
        logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL")

    def connect_with_retry(self, max_retries=5):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                self.conn = psycopg2.connect(self.database_url, sslmode='require')
                self.conn.autocommit = True  # –í–∞–∂–ª–∏–≤–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
                self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
                logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL (—Å–ø—Ä–æ–±–∞ {attempt + 1})")
                return
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (—Å–ø—Ä–æ–±–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    time.sleep(2)
                    # –°–ø—Ä–æ–±—É—î–º–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    cleanup_connections()
                else:
                    logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ PostgreSQL –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±")
                    raise

    def reconnect(self):
        """–ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            if self.conn:
                self.conn.close()
        except:
            pass
        
        self.connect_with_retry()

    def execute_safe(self, query, params=None):
        """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        try:
            if params:
                self.cursor.execute(query, params)
            else:
                self.cursor.execute(query)
            return True
        except psycopg2.InterfaceError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}. –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è...")
            self.reconnect()
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–∫–æ—Ç–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            try:
                self.conn.rollback()
            except:
                self.reconnect()
            return False

    def fetch_safe(self, query, params=None):
        """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
        try:
            if params:
                self.cursor.execute(query, params)
            else:
                self.cursor.execute(query)
            return self.cursor.fetchall()
        except psycopg2.InterfaceError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}. –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è...")
            self.reconnect()
            return []
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
            try:
                self.conn.rollback()
            except:
                self.reconnect()
            return []

    def fetch_one_safe(self, query, params=None):
        """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
        try:
            if params:
                self.cursor.execute(query, params)
            else:
                self.cursor.execute(query)
            return self.cursor.fetchone()
        except psycopg2.InterfaceError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}. –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è...")
            self.reconnect()
            return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
            try:
                self.conn.rollback()
            except:
                self.reconnect()
            return None

    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users
        self.execute_safe('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                username VARCHAR(255),
                first_name VARCHAR(255) NOT NULL,
                age INTEGER,
                gender VARCHAR(10),
                city VARCHAR(255),
                seeking_gender VARCHAR(10) DEFAULT 'all',
                goal VARCHAR(255),
                bio TEXT,
                has_photo BOOLEAN DEFAULT FALSE,
                rating FLOAT DEFAULT 5.0,
                likes_count INTEGER DEFAULT 0,
                is_banned BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ photos
        self.execute_safe('''
            CREATE TABLE IF NOT EXISTS photos (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                file_id VARCHAR(255) NOT NULL,
                is_main BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ likes
        self.execute_safe('''
            CREATE TABLE IF NOT EXISTS likes (
                id SERIAL PRIMARY KEY,
                from_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                to_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(from_user_id, to_user_id)
            )
        ''')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ matches
        self.execute_safe('''
            CREATE TABLE IF NOT EXISTS matches (
                id SERIAL PRIMARY KEY,
                user1_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                user2_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user1_id, user2_id)
            )
        ''')
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ profile_views –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        self.execute_safe('''
            CREATE TABLE IF NOT EXISTS profile_views (
                id SERIAL PRIMARY KEY,
                viewer_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                viewed_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫
        self.add_missing_columns()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")

    def add_missing_columns(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        columns_to_add = [
            ("users", "likes_count", "INTEGER DEFAULT 0"),
            ("users", "is_banned", "BOOLEAN DEFAULT FALSE"),
            ("photos", "is_main", "BOOLEAN DEFAULT FALSE")
        ]
        
        for table, column, definition in columns_to_add:
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞
                self.execute_safe(f'''
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = '{table}' AND column_name = '{column}'
                ''')
                exists = self.cursor.fetchone() is not None
                
                if not exists:
                    self.execute_safe(f'ALTER TABLE {table} ADD COLUMN {column} {definition}')
                    logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column} –¥–æ–¥–∞–Ω–∞ –¥–æ {table}")
                else:
                    logger.info(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ {column} –≤–∂–µ —ñ—Å–Ω—É—î –≤ {table}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ {column} –¥–æ {table}: {e}")

    def add_user(self, telegram_id, username, first_name):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            existing_user = self.fetch_one_safe('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            
            if existing_user:
                logger.info(f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î")
                return True
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if self.execute_safe('''
                INSERT INTO users (telegram_id, username, first_name, created_at, last_active, rating)
                VALUES (%s, %s, %s, %s, %s, %s)
            ''', (telegram_id, username, first_name, datetime.now(), datetime.now(), 5.0)):
                logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π")
                return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return False

    def get_user(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
        try:
            return self.fetch_one_safe('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return None

    def update_user_profile(self, telegram_id, age=None, gender=None, city=None, 
                          seeking_gender=None, goal=None, bio=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            user = self.fetch_one_safe('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
                return False
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            update_fields = []
            values = []
            
            if age is not None:
                update_fields.append("age = %s")
                values.append(age)
            if gender is not None:
                update_fields.append("gender = %s")
                values.append(gender)
            if city is not None:
                update_fields.append("city = %s")
                values.append(city)
            if seeking_gender is not None:
                update_fields.append("seeking_gender = %s")
                values.append(seeking_gender)
            if goal is not None:
                update_fields.append("goal = %s")
                values.append(goal)
            if bio is not None:
                update_fields.append("bio = %s")
                values.append(bio)
            
            # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            update_fields.append("last_active = %s")
            values.append(datetime.now())
            
            # –î–æ–¥–∞—î–º–æ telegram_id –≤ –∫—ñ–Ω–µ—Ü—å –¥–ª—è WHERE —É–º–æ–≤–∏
            values.append(telegram_id)
            
            if update_fields:
                query = f"UPDATE users SET {', '.join(update_fields)} WHERE telegram_id = %s"
                if self.execute_safe(query, values):
                    logger.info(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")
                    return True
                return False
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é {telegram_id}: {e}")
            return False

    def update_or_create_user_profile(self, telegram_id, age, gender, city, seeking_gender, goal, bio):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            user = self.get_user(telegram_id)
            
            if not user:
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
                logger.info(f"üîÑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
                success = self.add_user(telegram_id, "unknown", "User")
                if not success:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                    return False
            
            # –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            return self.update_user_profile(
                telegram_id=telegram_id,
                age=age,
                gender=gender,
                city=city,
                seeking_gender=seeking_gender,
                goal=goal,
                bio=bio
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ update_or_create_user_profile: {e}")
            return False

    def get_user_profile(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user = self.fetch_one_safe('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            
            if user:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π
                is_complete = all([
                    user.get('age'),
                    user.get('gender'), 
                    user.get('city'),
                    user.get('goal'),
                    user.get('bio')
                ])
                return user, is_complete
            return None, False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é {telegram_id}: {e}")
            return None, False

    def add_user_photo(self, telegram_id, file_id, is_main=False):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = self.fetch_one_safe('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            result = self.fetch_one_safe('SELECT COUNT(*) FROM photos WHERE user_id = %s', (user['id'],))
            photo_count = result['count'] if result else 0
            
            # –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–±–∏–º–æ –π–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–∏–º
            if photo_count == 0:
                is_main = True
            
            # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ
            if self.execute_safe('''
                INSERT INTO photos (user_id, file_id, is_main)
                VALUES (%s, %s, %s)
            ''', (user['id'], file_id, is_main)):
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å has_photo —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.execute_safe('''
                    UPDATE users SET has_photo = TRUE 
                    WHERE telegram_id = %s
                ''', (telegram_id,))
                
                logger.info(f"‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}, is_main: {is_main}")
                return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return False

    def get_profile_photos(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞ is_main
            has_is_main = self.fetch_one_safe('''
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'photos' AND column_name = 'is_main'
            ''') is not None
            
            if has_is_main:
                photos = self.fetch_safe('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s
                    ORDER BY p.is_main DESC, p.created_at ASC
                ''', (telegram_id,))
            else:
                # –Ø–∫—â–æ –∫–æ–ª–æ–Ω–∫–∏ is_main –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Ç
                photos = self.fetch_safe('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s
                    ORDER BY p.created_at ASC
                ''', (telegram_id,))
                
            return [photo['file_id'] for photo in photos]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return []

    def get_main_photo(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞ is_main
            has_is_main = self.fetch_one_safe('''
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'photos' AND column_name = 'is_main'
            ''') is not None
            
            if has_is_main:
                result = self.fetch_one_safe('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s AND p.is_main = TRUE
                    ORDER BY p.created_at ASC
                    LIMIT 1
                ''', (telegram_id,))
            else:
                # –Ø–∫—â–æ –∫–æ–ª–æ–Ω–∫–∏ is_main –Ω–µ–º–∞—î, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ
                result = self.fetch_one_safe('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s
                    ORDER BY p.created_at ASC
                    LIMIT 1
                ''', (telegram_id,))
                
            return result['file_id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return None

    def set_main_photo(self, telegram_id, file_id):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = self.fetch_one_safe('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            
            if not user:
                return False
            
            # –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∏–¥–∞—î–º–æ –≤—Å—ñ is_main –Ω–∞ False
            self.execute_safe('''
                UPDATE photos SET is_main = FALSE 
                WHERE user_id = %s
            ''', (user['id'],))
            
            # –ü–æ—Ç—ñ–º –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–∞–Ω–µ —Ñ–æ—Ç–æ —è–∫ –≥–æ–ª–æ–≤–Ω–µ
            if self.execute_safe('''
                UPDATE photos SET is_main = TRUE 
                WHERE user_id = %s AND file_id = %s
            ''', (user['id'], file_id)):
                logger.info(f"‚úÖ –ì–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
                return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return False

    def delete_photo(self, telegram_id, file_id):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = self.fetch_one_safe('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            
            if not user:
                return False
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ
            if self.execute_safe('''
                DELETE FROM photos 
                WHERE user_id = %s AND file_id = %s
            ''', (user['id'], file_id)):
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è —Ñ–æ—Ç–æ
                result = self.fetch_one_safe('SELECT COUNT(*) FROM photos WHERE user_id = %s', (user['id'],))
                remaining_photos = result['count'] if result else 0
                
                # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ has_photo
                if remaining_photos == 0:
                    self.execute_safe('''
                        UPDATE users SET has_photo = FALSE 
                        WHERE telegram_id = %s
                    ''', (telegram_id,))
                # –Ø–∫—â–æ –≤–∏–¥–∞–ª–∏–ª–∏ –≥–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–µ –≥–æ–ª–æ–≤–Ω–µ
                else:
                    new_main = self.fetch_one_safe('''
                        SELECT file_id FROM photos 
                        WHERE user_id = %s 
                        ORDER BY created_at ASC 
                        LIMIT 1
                    ''', (user['id'],))
                    if new_main:
                        self.set_main_photo(telegram_id, new_main['file_id'])
                
                logger.info(f"‚úÖ –§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
                return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return False

    def get_users_count(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            result = self.fetch_one_safe('SELECT COUNT(*) FROM users')
            return result['count'] if result else 0
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return 0

    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–æ–ª–æ–≤—ñ–∫—ñ–≤
            male_result = self.fetch_one_safe('SELECT COUNT(*) FROM users WHERE gender = %s AND is_banned = FALSE', ('male',))
            male_count = male_result['count'] if male_result else 0
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂—ñ–Ω–æ–∫
            female_result = self.fetch_one_safe('SELECT COUNT(*) FROM users WHERE gender = %s AND is_banned = FALSE', ('female',))
            female_count = female_result['count'] if female_result else 0
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            active_result = self.fetch_one_safe('SELECT COUNT(*) FROM users WHERE age IS NOT NULL AND is_banned = FALSE')
            total_active = active_result['count'] if active_result else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü—ñ–ª–µ–π
            goals_stats = self.fetch_safe('SELECT goal, COUNT(*) FROM users WHERE goal IS NOT NULL AND is_banned = FALSE GROUP BY goal')
            
            return male_count, female_count, total_active, goals_stats
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0, 0, []

    def get_random_user(self, exclude_telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            return self.fetch_one_safe('''
                SELECT u.* FROM users u
                WHERE u.telegram_id != %s 
                AND u.age IS NOT NULL 
                AND u.gender IS NOT NULL
                AND u.is_banned = FALSE
                ORDER BY RANDOM()
                LIMIT 1
            ''', (exclude_telegram_id,))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def get_all_active_users(self, exclude_telegram_id=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            if exclude_telegram_id:
                return self.fetch_safe('''
                    SELECT * FROM users 
                    WHERE telegram_id != %s 
                    AND age IS NOT NULL 
                    AND is_banned = FALSE
                    ORDER BY created_at DESC
                ''', (exclude_telegram_id,))
            else:
                return self.fetch_safe('''
                    SELECT * FROM users 
                    WHERE age IS NOT NULL 
                    AND is_banned = FALSE
                    ORDER BY created_at DESC
                ''')
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def get_all_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            return self.fetch_safe('SELECT * FROM users ORDER BY created_at DESC')
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def get_banned_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            return self.fetch_safe('SELECT * FROM users WHERE is_banned = TRUE ORDER BY created_at DESC')
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def ban_user(self, telegram_id):
        """–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            if self.execute_safe('UPDATE users SET is_banned = TRUE WHERE telegram_id = %s', (telegram_id,)):
                return self.cursor.rowcount > 0
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return False

    def unban_user(self, telegram_id):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            if self.execute_safe('UPDATE users SET is_banned = FALSE WHERE telegram_id = %s', (telegram_id,)):
                return self.cursor.rowcount > 0
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return False

    def search_user(self, query):
        """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            return self.fetch_safe('''
                SELECT * FROM users 
                WHERE telegram_id::TEXT LIKE %s 
                   OR username ILIKE %s 
                   OR first_name ILIKE %s
                ORDER BY created_at DESC
            ''', (f'%{query}%', f'%{query}%', f'%{query}%'))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return []

    def add_like(self, from_user_id, to_user_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            from_user = self.get_user(from_user_id)
            to_user = self.get_user(to_user_id)
            
            if not from_user or not to_user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫
            if self.execute_safe('''
                INSERT INTO likes (from_user_id, to_user_id)
                VALUES ((SELECT id FROM users WHERE telegram_id = %s), 
                       (SELECT id FROM users WHERE telegram_id = %s))
                ON CONFLICT (from_user_id, to_user_id) DO NOTHING
            ''', (from_user_id, to_user_id)):
                
                if self.cursor.rowcount > 0:
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
                    self.execute_safe('''
                        UPDATE users SET likes_count = likes_count + 1 
                        WHERE telegram_id = %s
                    ''', (to_user_id,))
                    
                    return True, "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ"
                else:
                    return False, "–õ–∞–π–∫ –≤–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            return False, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É: {e}")
            return False, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"

    def has_liked(self, from_user_id, to_user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –ª–∞–π–∫–Ω—É–≤"""
        try:
            result = self.fetch_one_safe('''
                SELECT 1 FROM likes 
                WHERE from_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                AND to_user_id = (SELECT id FROM users WHERE telegram_id = %s)
            ''', (from_user_id, to_user_id))
            return result is not None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—É: {e}")
            return False

    def get_user_matches(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            return self.fetch_safe('''
                SELECT u.* FROM users u
                WHERE u.id IN (
                    SELECT l1.from_user_id FROM likes l1
                    JOIN likes l2 ON l1.from_user_id = l2.to_user_id AND l1.to_user_id = l2.from_user_id
                    WHERE l1.to_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                )
                OR u.id IN (
                    SELECT l2.to_user_id FROM likes l1
                    JOIN likes l2 ON l1.from_user_id = l2.to_user_id AND l1.to_user_id = l2.from_user_id
                    WHERE l1.from_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                )
            ''', (telegram_id, telegram_id))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤: {e}")
            return []

    def get_user_likers(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏—Ö, —Ö—Ç–æ –ª–∞–π–∫–Ω—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            return self.fetch_safe('''
                SELECT u.* FROM users u
                JOIN likes l ON u.id = l.from_user_id
                WHERE l.to_user_id = (SELECT id FROM users WHERE telegram_id = %s)
            ''', (telegram_id,))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–π–∫–µ—Ä—ñ–≤: {e}")
            return []

    def add_profile_view(self, viewer_id, viewed_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            if self.execute_safe('''
                INSERT INTO profile_views (viewer_user_id, viewed_user_id)
                VALUES ((SELECT id FROM users WHERE telegram_id = %s), 
                       (SELECT id FROM users WHERE telegram_id = %s))
            ''', (viewer_id, viewed_id)):
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
            return False

    def get_profile_views(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            return self.fetch_safe('''
                SELECT u.* FROM users u
                JOIN profile_views pv ON u.id = pv.viewer_user_id
                WHERE pv.viewed_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                ORDER BY pv.viewed_at DESC
            ''', (telegram_id,))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {e}")
            return []

    def get_top_users_by_rating(self, limit=10, gender=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        try:
            if gender:
                return self.fetch_safe('''
                    SELECT * FROM users 
                    WHERE gender = %s AND age IS NOT NULL AND is_banned = FALSE
                    ORDER BY rating DESC, likes_count DESC
                    LIMIT %s
                ''', (gender, limit))
            else:
                return self.fetch_safe('''
                    SELECT * FROM users 
                    WHERE age IS NOT NULL AND is_banned = FALSE
                    ORDER BY rating DESC, likes_count DESC
                    LIMIT %s
                ''', (limit,))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É: {e}")
            return []

    def calculate_user_rating(self, telegram_id):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É
            user = self.get_user(telegram_id)
            if not user:
                return 5.0
            
            base_rating = 5.0
            # –ë–æ–Ω—É—Å–∏ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ñ—ñ–ª—é
            if user.get('age'):
                base_rating += 0.5
            if user.get('bio') and len(user.get('bio', '')) > 20:
                base_rating += 0.5
            if user.get('has_photo'):
                base_rating += 1.0
            
            # –ë–æ–Ω—É—Å –∑–∞ –ª–∞–π–∫–∏
            likes_bonus = min(user.get('likes_count', 0) * 0.1, 2.0)
            base_rating += likes_bonus
            
            # –û–±–º–µ–∂—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
            final_rating = min(max(base_rating, 1.0), 10.0)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑—ñ
            self.execute_safe('UPDATE users SET rating = %s WHERE telegram_id = %s', (final_rating, telegram_id))
            
            return final_rating
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
            return 5.0

    def update_all_ratings(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤"""
        try:
            users = self.get_all_active_users()
            for user in users:
                self.calculate_user_rating(user['telegram_id'])
            logger.info("‚úÖ –í—Å—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤: {e}")
            return False

    def cleanup_old_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ª–∞–π–∫—ñ–≤
            self.execute_safe('''
                DELETE FROM likes 
                WHERE id NOT IN (
                    SELECT MIN(id) 
                    FROM likes 
                    GROUP BY from_user_id, to_user_id
                )
            ''')
            
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –º–∞—Ç—á—ñ–≤
            self.execute_safe('''
                DELETE FROM matches 
                WHERE id NOT IN (
                    SELECT MIN(id) 
                    FROM matches 
                    GROUP BY user1_id, user2_id
                )
            ''')
            
            logger.info("‚úÖ –°—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return False

    def reset_database(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
            tables = ['profile_views', 'matches', 'likes', 'photos', 'users']
            for table in tables:
                self.execute_safe(f'DROP TABLE IF EXISTS {table} CASCADE')
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É
            self.init_db()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–∫–∏–Ω—É—Ç–∞ —Ç–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            return False

    def get_users_by_city(self, city, exclude_telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –º—ñ—Å—Ç–æ–º"""
        try:
            return self.fetch_safe('''
                SELECT * FROM users 
                WHERE city ILIKE %s 
                AND telegram_id != %s 
                AND age IS NOT NULL 
                AND is_banned = FALSE
                ORDER BY rating DESC
            ''', (f'%{city}%', exclude_telegram_id))
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º {city}: {e}")
            return []

    def can_like_today(self, telegram_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        try:
            # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - –º–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –¥–æ 50 –ª–∞–π–∫—ñ–≤ –Ω–∞ –¥–µ–Ω—å
            result = self.fetch_one_safe('''
                SELECT COUNT(*) FROM likes 
                WHERE from_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                AND DATE(created_at) = CURRENT_DATE
            ''', (telegram_id,))
            likes_today = result['count'] if result else 0
            
            if likes_today >= 50:
                return False, f"–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ª–∞–π–∫—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({likes_today}/50)"
            return True, f"–õ–∞–π–∫—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {likes_today}/50"
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—ñ–≤: {e}")
            return True, "–õ—ñ–º—ñ—Ç –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ"

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()