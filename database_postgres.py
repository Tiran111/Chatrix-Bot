import os
import psycopg2
from psycopg2.extras import RealDictCursor
import logging
from datetime import datetime, date

logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        # –û—Ç—Ä–∏–º—É—î–º–æ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            database_url = "postgresql://user:pass@localhost/dating_bot"
        
        logger.info("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...")
        try:
            self.conn = psycopg2.connect(database_url, sslmode='require')
            self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            self.init_db()
            self.update_database_structure()
            logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL: {e}")
            raise

    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username VARCHAR(255),
                    first_name VARCHAR(255) NOT NULL,
                    age INTEGER,
                    gender VARCHAR(10),
                    city VARCHAR(255),
                    seeking_gender VARCHAR(10) DEFAULT 'all',
                    goal VARCHAR(255),
                    bio TEXT,
                    has_photo BOOLEAN DEFAULT FALSE,
                    rating FLOAT DEFAULT 5.0,
                    likes_count INTEGER DEFAULT 0,
                    is_banned BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ photos
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS photos (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    file_id VARCHAR(255) NOT NULL,
                    is_main BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ likes
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS likes (
                    id SERIAL PRIMARY KEY,
                    from_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    to_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(from_user_id, to_user_id)
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ matches
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS matches (
                    id SERIAL PRIMARY KEY,
                    user1_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    user2_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user1_id, user2_id)
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ profile_views
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS profile_views (
                    id SERIAL PRIMARY KEY,
                    viewer_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    viewed_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            self.conn.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            self.conn.rollback()

    def update_database_structure(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤
            columns_to_add = [
                "ADD COLUMN IF NOT EXISTS likes_count INTEGER DEFAULT 0",
                "ADD COLUMN IF NOT EXISTS is_banned BOOLEAN DEFAULT FALSE"
            ]
            
            for column_sql in columns_to_add:
                try:
                    self.cursor.execute(f'ALTER TABLE users {column_sql}')
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Å—Ç–æ–≤–ø–µ—Ü—å –¥–æ users: {e}")
            
            # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É is_main –¥–æ —Ç–∞–±–ª–∏—Ü—ñ photos, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            try:
                self.cursor.execute('''
                    ALTER TABLE photos 
                    ADD COLUMN IF NOT EXISTS is_main BOOLEAN DEFAULT FALSE
                ''')
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ is_main –¥–æ–¥–∞–Ω–∞ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ photos")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ is_main –¥–æ photos: {e}")
            
            self.conn.commit()
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {e}")
            self.conn.rollback()

    def add_user(self, telegram_id, username, first_name):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            existing_user = self.cursor.fetchone()
            
            if existing_user:
                logger.info(f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î")
                return True
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('''
                INSERT INTO users (telegram_id, username, first_name, created_at, last_active, rating)
                VALUES (%s, %s, %s, %s, %s, %s)
            ''', (telegram_id, username, first_name, datetime.now(), datetime.now(), 5.0))
            
            self.conn.commit()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def get_user(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            return user
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return None

    def update_user_profile(self, telegram_id, age=None, gender=None, city=None, 
                          seeking_gender=None, goal=None, bio=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
                return False
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            update_fields = []
            values = []
            
            if age is not None:
                update_fields.append("age = %s")
                values.append(age)
            if gender is not None:
                update_fields.append("gender = %s")
                values.append(gender)
            if city is not None:
                update_fields.append("city = %s")
                values.append(city)
            if seeking_gender is not None:
                update_fields.append("seeking_gender = %s")
                values.append(seeking_gender)
            if goal is not None:
                update_fields.append("goal = %s")
                values.append(goal)
            if bio is not None:
                update_fields.append("bio = %s")
                values.append(bio)
            
            # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            update_fields.append("last_active = %s")
            values.append(datetime.now())
            
            # –î–æ–¥–∞—î–º–æ telegram_id –≤ –∫—ñ–Ω–µ—Ü—å –¥–ª—è WHERE —É–º–æ–≤–∏
            values.append(telegram_id)
            
            if update_fields:
                query = f"UPDATE users SET {', '.join(update_fields)} WHERE telegram_id = %s"
                self.cursor.execute(query, values)
                self.conn.commit()
                
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def update_or_create_user_profile(self, telegram_id, age, gender, city, seeking_gender, goal, bio):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            user = self.get_user(telegram_id)
            
            if not user:
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
                logger.info(f"üîÑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
                success = self.add_user(telegram_id, "unknown", "User")
                if not success:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                    return False
            
            # –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            return self.update_user_profile(
                telegram_id=telegram_id,
                age=age,
                gender=gender,
                city=city,
                seeking_gender=seeking_gender,
                goal=goal,
                bio=bio
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ update_or_create_user_profile: {e}")
            return False

    def get_user_profile(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if user:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π
                is_complete = all([
                    user.get('age'),
                    user.get('gender'), 
                    user.get('city'),
                    user.get('goal'),
                    user.get('bio')
                ])
                return user, is_complete
            return None, False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é {telegram_id}: {e}")
            return None, False

    def add_user_photo(self, telegram_id, file_id, is_main=False):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('SELECT COUNT(*) FROM photos WHERE user_id = %s', (user['id'],))
            result = self.cursor.fetchone()
            photo_count = result['count'] if result else 0
            
            # –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–±–∏–º–æ –π–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–∏–º
            if photo_count == 0:
                is_main = True
            
            # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ
            self.cursor.execute('''
                INSERT INTO photos (user_id, file_id, is_main)
                VALUES (%s, %s, %s)
            ''', (user['id'], file_id, is_main))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å has_photo —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('''
                UPDATE users SET has_photo = TRUE 
                WHERE telegram_id = %s
            ''', (telegram_id,))
            
            self.conn.commit()
            logger.info(f"‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}, is_main: {is_main}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def get_profile_photos(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞ is_main
            self.cursor.execute('''
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'photos' AND column_name = 'is_main'
            ''')
            has_is_main = self.cursor.fetchone() is not None
            
            if has_is_main:
                self.cursor.execute('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s
                    ORDER BY p.is_main DESC, p.created_at ASC
                ''', (telegram_id,))
            else:
                # –Ø–∫—â–æ –∫–æ–ª–æ–Ω–∫–∏ is_main –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Ç
                self.cursor.execute('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s
                    ORDER BY p.created_at ASC
                ''', (telegram_id,))
                
            photos = self.cursor.fetchall()
            return [photo['file_id'] for photo in photos]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return []

    def get_main_photo(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞ is_main
            self.cursor.execute('''
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'photos' AND column_name = 'is_main'
            ''')
            has_is_main = self.cursor.fetchone() is not None
            
            if has_is_main:
                self.cursor.execute('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s AND p.is_main = TRUE
                    ORDER BY p.created_at ASC
                    LIMIT 1
                ''', (telegram_id,))
            else:
                # –Ø–∫—â–æ –∫–æ–ª–æ–Ω–∫–∏ is_main –Ω–µ–º–∞—î, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ
                self.cursor.execute('''
                    SELECT p.file_id FROM photos p
                    JOIN users u ON p.user_id = u.id
                    WHERE u.telegram_id = %s
                    ORDER BY p.created_at ASC
                    LIMIT 1
                ''', (telegram_id,))
                
            result = self.cursor.fetchone()
            return result['file_id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return None

    def set_main_photo(self, telegram_id, file_id):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                return False
            
            # –°–ø–æ—á–∞—Ç–∫—É —Å–∫–∏–¥–∞—î–º–æ –≤—Å—ñ is_main –Ω–∞ False
            self.cursor.execute('''
                UPDATE photos SET is_main = FALSE 
                WHERE user_id = %s
            ''', (user['id'],))
            
            # –ü–æ—Ç—ñ–º –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–∞–Ω–µ —Ñ–æ—Ç–æ —è–∫ –≥–æ–ª–æ–≤–Ω–µ
            self.cursor.execute('''
                UPDATE photos SET is_main = TRUE 
                WHERE user_id = %s AND file_id = %s
            ''', (user['id'], file_id))
            
            self.conn.commit()
            logger.info(f"‚úÖ –ì–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def delete_photo(self, telegram_id, file_id):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                return False
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ
            self.cursor.execute('''
                DELETE FROM photos 
                WHERE user_id = %s AND file_id = %s
            ''', (user['id'], file_id))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è —Ñ–æ—Ç–æ
            self.cursor.execute('SELECT COUNT(*) FROM photos WHERE user_id = %s', (user['id'],))
            result = self.cursor.fetchone()
            remaining_photos = result['count'] if result else 0
            
            # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ has_photo
            if remaining_photos == 0:
                self.cursor.execute('''
                    UPDATE users SET has_photo = FALSE 
                    WHERE telegram_id = %s
                ''', (telegram_id,))
            # –Ø–∫—â–æ –≤–∏–¥–∞–ª–∏–ª–∏ –≥–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–µ –≥–æ–ª–æ–≤–Ω–µ
            else:
                self.cursor.execute('''
                    SELECT file_id FROM photos 
                    WHERE user_id = %s 
                    ORDER BY created_at ASC 
                    LIMIT 1
                ''', (user['id'],))
                new_main = self.cursor.fetchone()
                if new_main:
                    self.set_main_photo(telegram_id, new_main['file_id'])
            
            self.conn.commit()
            logger.info(f"‚úÖ –§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def get_users_count(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM users')
            result = self.cursor.fetchone()
            return result['count'] if result else 0
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return 0

    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–æ–ª–æ–≤—ñ–∫—ñ–≤
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = %s AND is_banned = FALSE', ('male',))
            male_count = self.cursor.fetchone()['count']
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂—ñ–Ω–æ–∫
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = %s AND is_banned = FALSE', ('female',))
            female_count = self.cursor.fetchone()['count']
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE age IS NOT NULL AND is_banned = FALSE')
            total_active = self.cursor.fetchone()['count']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü—ñ–ª–µ–π
            self.cursor.execute('SELECT goal, COUNT(*) FROM users WHERE goal IS NOT NULL AND is_banned = FALSE GROUP BY goal')
            goals_stats = self.cursor.fetchall()
            
            return male_count, female_count, total_active, goals_stats
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0, 0, []

    # ... —Ä–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω ...

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()