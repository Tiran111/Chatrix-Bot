import os
import psycopg2
from psycopg2.extras import RealDictCursor
import logging
from datetime import datetime, date

logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        # –û—Ç—Ä–∏–º—É—î–º–æ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            database_url = "postgresql://user:pass@localhost/dating_bot"
        
        logger.info("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...")
        try:
            self.conn = psycopg2.connect(database_url, sslmode='require')
            self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            self.init_db()
            self.update_database_structure()
            logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL: {e}")
            raise

    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    telegram_id BIGINT UNIQUE NOT NULL,
                    username VARCHAR(255),
                    first_name VARCHAR(255) NOT NULL,
                    age INTEGER,
                    gender VARCHAR(10),
                    city VARCHAR(255),
                    seeking_gender VARCHAR(10) DEFAULT 'all',
                    goal VARCHAR(255),
                    bio TEXT,
                    has_photo BOOLEAN DEFAULT FALSE,
                    rating FLOAT DEFAULT 5.0,
                    likes_count INTEGER DEFAULT 0,
                    is_banned BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ photos
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS photos (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    file_id VARCHAR(255) NOT NULL,
                    is_main BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ likes
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS likes (
                    id SERIAL PRIMARY KEY,
                    from_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    to_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(from_user_id, to_user_id)
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ matches
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS matches (
                    id SERIAL PRIMARY KEY,
                    user1_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    user2_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user1_id, user2_id)
                )
            ''')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ profile_views
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS profile_views (
                    id SERIAL PRIMARY KEY,
                    viewer_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    viewed_user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            self.conn.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            self.conn.rollback()

    def update_database_structure(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            columns_to_add = [
                "ADD COLUMN IF NOT EXISTS likes_count INTEGER DEFAULT 0",
                "ADD COLUMN IF NOT EXISTS is_banned BOOLEAN DEFAULT FALSE"
            ]
            
            for column_sql in columns_to_add:
                try:
                    self.cursor.execute(f'ALTER TABLE users {column_sql}')
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Å—Ç–æ–≤–ø–µ—Ü—å: {e}")
            
            self.conn.commit()
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: {e}")
            self.conn.rollback()

    def add_user(self, telegram_id, username, first_name):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            existing_user = self.cursor.fetchone()
            
            if existing_user:
                logger.info(f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î")
                return True
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('''
                INSERT INTO users (telegram_id, username, first_name, created_at, last_active, rating)
                VALUES (%s, %s, %s, %s, %s, %s)
            ''', (telegram_id, username, first_name, datetime.now(), datetime.now(), 5.0))
            
            self.conn.commit()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def get_user(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            return user
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return None

    def update_user_profile(self, telegram_id, age=None, gender=None, city=None, 
                          seeking_gender=None, goal=None, bio=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
                return False
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            update_fields = []
            values = []
            
            if age is not None:
                update_fields.append("age = %s")
                values.append(age)
            if gender is not None:
                update_fields.append("gender = %s")
                values.append(gender)
            if city is not None:
                update_fields.append("city = %s")
                values.append(city)
            if seeking_gender is not None:
                update_fields.append("seeking_gender = %s")
                values.append(seeking_gender)
            if goal is not None:
                update_fields.append("goal = %s")
                values.append(goal)
            if bio is not None:
                update_fields.append("bio = %s")
                values.append(bio)
            
            # –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            update_fields.append("last_active = %s")
            values.append(datetime.now())
            
            # –î–æ–¥–∞—î–º–æ telegram_id –≤ –∫—ñ–Ω–µ—Ü—å –¥–ª—è WHERE —É–º–æ–≤–∏
            values.append(telegram_id)
            
            if update_fields:
                query = f"UPDATE users SET {', '.join(update_fields)} WHERE telegram_id = %s"
                self.cursor.execute(query, values)
                self.conn.commit()
                
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def safe_update_profile(self, telegram_id, age, gender, city, seeking_gender, goal, bio):
        """–ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫—â–æ –Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ
            user_data = self.get_user(telegram_id)
            if not user_data:
                logger.info(f"üîÑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                success = self.add_user(telegram_id, "unknown", "User")
                if not success:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                    return False
            
            # –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            return self.update_user_profile(telegram_id, age, gender, city, seeking_gender, goal, bio)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ safe_update_profile: {e}")
            return False

    def get_user_profile(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if user:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π
                is_complete = all([
                    user.get('age'),
                    user.get('gender'), 
                    user.get('city'),
                    user.get('goal'),
                    user.get('bio')
                ])
                return user, is_complete
            return None, False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é {telegram_id}: {e}")
            return None, False

    def add_profile_photo(self, telegram_id, file_id, is_main=False):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
            self.cursor.execute('SELECT COUNT(*) FROM photos WHERE user_id = %s', (user['id'],))
            photo_count = self.cursor.fetchone()['count']
            
            if photo_count >= 3:
                logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∂–µ –º–∞—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ")
                return False
            
            # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ
            self.cursor.execute('''
                INSERT INTO photos (user_id, file_id, is_main)
                VALUES (%s, %s, %s)
            ''', (user['id'], file_id, is_main))
            
            self.conn.commit()
            logger.info(f"‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def get_profile_photos(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = %s
                ORDER BY p.is_main DESC, p.created_at ASC
            ''', (telegram_id,))
            photos = self.cursor.fetchall()
            return [photo['file_id'] for photo in photos]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return []

    def get_main_photo(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        try:
            photos = self.get_profile_photos(telegram_id)
            return photos[0] if photos else None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}: {e}")
            return None

    def get_users_count(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM users')
            result = self.cursor.fetchone()
            return result['count'] if result else 0
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return 0

    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–æ–ª–æ–≤—ñ–∫—ñ–≤
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = %s AND is_banned = FALSE', ('male',))
            male_count = self.cursor.fetchone()['count']
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂—ñ–Ω–æ–∫
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = %s AND is_banned = FALSE', ('female',))
            female_count = self.cursor.fetchone()['count']
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE age IS NOT NULL AND is_banned = FALSE')
            total_active = self.cursor.fetchone()['count']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü—ñ–ª–µ–π
            self.cursor.execute('SELECT goal, COUNT(*) FROM users WHERE goal IS NOT NULL AND is_banned = FALSE GROUP BY goal')
            goals_stats = self.cursor.fetchall()
            
            return male_count, female_count, total_active, goals_stats
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0, 0, []

    def get_random_user(self, exclude_telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT u.* FROM users u
                WHERE u.telegram_id != %s 
                AND u.age IS NOT NULL 
                AND u.gender IS NOT NULL
                AND u.is_banned = FALSE
                ORDER BY RANDOM()
                LIMIT 1
            ''', (exclude_telegram_id,))
            return self.cursor.fetchone()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def get_all_active_users(self, exclude_telegram_id=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            if exclude_telegram_id:
                self.cursor.execute('''
                    SELECT * FROM users 
                    WHERE telegram_id != %s 
                    AND age IS NOT NULL 
                    AND is_banned = FALSE
                    ORDER BY created_at DESC
                ''', (exclude_telegram_id,))
            else:
                self.cursor.execute('''
                    SELECT * FROM users 
                    WHERE age IS NOT NULL 
                    AND is_banned = FALSE
                    ORDER BY created_at DESC
                ''')
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def get_all_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT * FROM users ORDER BY created_at DESC')
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def get_banned_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE is_banned = TRUE ORDER BY created_at DESC')
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def ban_user(self, telegram_id):
        """–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = TRUE WHERE telegram_id = %s', (telegram_id,))
            self.conn.commit()
            return self.cursor.rowcount > 0
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def unban_user(self, telegram_id):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = FALSE WHERE telegram_id = %s', (telegram_id,))
            self.conn.commit()
            return self.cursor.rowcount > 0
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            self.conn.rollback()
            return False

    def search_user(self, query):
        """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT * FROM users 
                WHERE telegram_id::TEXT LIKE %s 
                   OR username ILIKE %s 
                   OR first_name ILIKE %s
                ORDER BY created_at DESC
            ''', (f'%{query}%', f'%{query}%', f'%{query}%'))
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return []

    def add_like(self, from_user_id, to_user_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—é—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            from_user = self.get_user(from_user_id)
            to_user = self.get_user(to_user_id)
            
            if not from_user or not to_user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫
            self.cursor.execute('''
                INSERT INTO likes (from_user_id, to_user_id)
                VALUES ((SELECT id FROM users WHERE telegram_id = %s), 
                       (SELECT id FROM users WHERE telegram_id = %s))
                ON CONFLICT (from_user_id, to_user_id) DO NOTHING
            ''', (from_user_id, to_user_id))
            
            self.conn.commit()
            
            if self.cursor.rowcount > 0:
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
                self.cursor.execute('''
                    UPDATE users SET likes_count = likes_count + 1 
                    WHERE telegram_id = %s
                ''', (to_user_id,))
                self.conn.commit()
                
                return True, "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ"
            else:
                return False, "–õ–∞–π–∫ –≤–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É: {e}")
            self.conn.rollback()
            return False, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"

    def has_liked(self, from_user_id, to_user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –ª–∞–π–∫–Ω—É–≤"""
        try:
            self.cursor.execute('''
                SELECT 1 FROM likes 
                WHERE from_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                AND to_user_id = (SELECT id FROM users WHERE telegram_id = %s)
            ''', (from_user_id, to_user_id))
            return self.cursor.fetchone() is not None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—É: {e}")
            return False

    def get_user_matches(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT u.* FROM users u
                WHERE u.id IN (
                    SELECT l1.from_user_id FROM likes l1
                    JOIN likes l2 ON l1.from_user_id = l2.to_user_id AND l1.to_user_id = l2.from_user_id
                    WHERE l1.to_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                )
                OR u.id IN (
                    SELECT l2.to_user_id FROM likes l1
                    JOIN likes l2 ON l1.from_user_id = l2.to_user_id AND l1.to_user_id = l2.from_user_id
                    WHERE l1.from_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                )
            ''', (telegram_id, telegram_id))
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤: {e}")
            return []

    def get_user_likers(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏—Ö, —Ö—Ç–æ –ª–∞–π–∫–Ω—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT u.* FROM users u
                JOIN likes l ON u.id = l.from_user_id
                WHERE l.to_user_id = (SELECT id FROM users WHERE telegram_id = %s)
            ''', (telegram_id,))
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–π–∫–µ—Ä—ñ–≤: {e}")
            return []

    def add_profile_view(self, viewer_id, viewed_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('''
                INSERT INTO profile_views (viewer_user_id, viewed_user_id)
                VALUES ((SELECT id FROM users WHERE telegram_id = %s), 
                       (SELECT id FROM users WHERE telegram_id = %s))
            ''', (viewer_id, viewed_id))
            self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
            self.conn.rollback()
            return False

    def get_profile_views(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('''
                SELECT u.* FROM users u
                JOIN profile_views pv ON u.id = pv.viewer_user_id
                WHERE pv.viewed_user_id = (SELECT id FROM users WHERE telegram_id = %s)
                ORDER BY pv.viewed_at DESC
            ''', (telegram_id,))
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {e}")
            return []

    def get_top_users_by_rating(self, limit=10, gender=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        try:
            if gender:
                self.cursor.execute('''
                    SELECT * FROM users 
                    WHERE gender = %s AND age IS NOT NULL AND is_banned = FALSE
                    ORDER BY rating DESC, likes_count DESC
                    LIMIT %s
                ''', (gender, limit))
            else:
                self.cursor.execute('''
                    SELECT * FROM users 
                    WHERE age IS NOT NULL AND is_banned = FALSE
                    ORDER BY rating DESC, likes_count DESC
                    LIMIT %s
                ''', (limit,))
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É: {e}")
            return []

    def calculate_user_rating(self, telegram_id):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É
            user = self.get_user(telegram_id)
            if not user:
                return 5.0
            
            base_rating = 5.0
            # –ë–æ–Ω—É—Å–∏ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ñ—ñ–ª—é
            if user.get('age'):
                base_rating += 0.5
            if user.get('bio') and len(user.get('bio', '')) > 20:
                base_rating += 0.5
            if user.get('has_photo'):
                base_rating += 1.0
            
            # –ë–æ–Ω—É—Å –∑–∞ –ª–∞–π–∫–∏
            likes_bonus = min(user.get('likes_count', 0) * 0.1, 2.0)
            base_rating += likes_bonus
            
            # –û–±–º–µ–∂—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
            final_rating = min(max(base_rating, 1.0), 10.0)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑—ñ
            self.cursor.execute('UPDATE users SET rating = %s WHERE telegram_id = %s', (final_rating, telegram_id))
            self.conn.commit()
            
            return final_rating
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
            return 5.0

    def update_all_ratings(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤"""
        try:
            users = self.get_all_active_users()
            for user in users:
                self.calculate_user_rating(user['telegram_id'])
            logger.info("‚úÖ –í—Å—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤: {e}")
            return False

    def cleanup_old_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ª–∞–π–∫—ñ–≤
            self.cursor.execute('''
                DELETE FROM likes 
                WHERE id NOT IN (
                    SELECT MIN(id) 
                    FROM likes 
                    GROUP BY from_user_id, to_user_id
                )
            ''')
            
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –º–∞—Ç—á—ñ–≤
            self.cursor.execute('''
                DELETE FROM matches 
                WHERE id NOT IN (
                    SELECT MIN(id) 
                    FROM matches 
                    GROUP BY user1_id, user2_id
                )
            ''')
            
            self.conn.commit()
            logger.info("‚úÖ –°—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            self.conn.rollback()
            return False

    def reset_database(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
            tables = ['profile_views', 'matches', 'likes', 'photos', 'users']
            for table in tables:
                self.cursor.execute(f'DROP TABLE IF EXISTS {table} CASCADE')
            
            self.conn.commit()
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É
            self.init_db()
            self.update_database_structure()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–∫–∏–Ω—É—Ç–∞ —Ç–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            self.conn.rollback()
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()