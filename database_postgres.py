import os
import psycopg2
from psycopg2.extras import RealDictCursor
import logging
from datetime import datetime, date

logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        # –û—Ç—Ä–∏–º—É—î–º–æ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            logger.error("‚ùå DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            database_url = "postgresql://user:pass@localhost/dating_bot"
        
        logger.info("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...")
        try:
            self.conn = psycopg2.connect(database_url, sslmode='require')
            self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            self.init_db()
            logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL: {e}")
            raise

    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL...")

        # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT NOT NULL,
                age INTEGER,
                gender TEXT,
                city TEXT,
                seeking_gender TEXT,
                goal TEXT,
                bio TEXT,
                has_photo BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                likes_count INTEGER DEFAULT 0,
                is_banned BOOLEAN DEFAULT FALSE,
                rating REAL DEFAULT 5.0,
                daily_likes_count INTEGER DEFAULT 0,
                last_like_date DATE,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è —Ñ–æ—Ç–æ
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS photos (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                file_id TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –ª–∞–π–∫—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS likes (
                id SERIAL PRIMARY KEY,
                from_user_id INTEGER NOT NULL REFERENCES users(id),
                to_user_id INTEGER NOT NULL REFERENCES users(id),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(from_user_id, to_user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –º–∞—Ç—á—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS matches (
                id SERIAL PRIMARY KEY,
                user1_id INTEGER NOT NULL REFERENCES users(id),
                user2_id INTEGER NOT NULL REFERENCES users(id),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user1_id, user2_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS profile_views (
                id SERIAL PRIMARY KEY,
                viewer_id INTEGER NOT NULL REFERENCES users(id),
                viewed_user_id INTEGER NOT NULL REFERENCES users(id),
                viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        self.conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö PostgreSQL —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")

    def add_user(self, telegram_id, username, first_name):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                INSERT INTO users (telegram_id, username, first_name)
                VALUES (%s, %s, %s)
                ON CONFLICT (telegram_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name
            ''', (telegram_id, username, first_name))
            self.conn.commit()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π: {telegram_id} - {first_name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return False

    def get_user(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            if user:
                return dict(user)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def update_user_profile(self, telegram_id, age, gender, city, seeking_gender, goal, bio):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {telegram_id}")
            
            self.cursor.execute('''
                UPDATE users 
                SET age = %s, gender = %s, city = %s, seeking_gender = %s, goal = %s, bio = %s, last_active = CURRENT_TIMESTAMP
                WHERE telegram_id = %s
            ''', (age, gender, city, seeking_gender, goal, bio, telegram_id))
            
            self.conn.commit()
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return False

    def add_profile_photo(self, telegram_id, file_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            logger.info(f"üîÑ –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}")
            
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            user_id = user['id']
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
            self.cursor.execute('SELECT COUNT(*) FROM photos WHERE user_id = %s', (user_id,))
            photo_count = self.cursor.fetchone()['count']
            
            if photo_count >= 3:
                logger.error("‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3)")
                return False
            
            self.cursor.execute('INSERT INTO photos (user_id, file_id) VALUES (%s, %s)', (user_id, file_id))
            self.cursor.execute('UPDATE users SET has_photo = TRUE WHERE telegram_id = %s', (telegram_id,))
            
            self.conn.commit()
            logger.info("‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return False

    def get_profile_photos(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = %s
            ''', (telegram_id,))
            photos = self.cursor.fetchall()
            return [photo['file_id'] for photo in photos]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return []

    def get_user_profile(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = %s', (telegram_id,))
            user = self.cursor.fetchone()
            if user and user['age']:
                return user, True
            return user, False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return None, False

    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –∑ models.py –ø–æ –º—ñ—Ä—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
    # –ü—Ä–æ—Å—Ç–æ –∞–¥–∞–ø—Ç—É–π—Ç–µ SQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (? ‚Üí %s)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()