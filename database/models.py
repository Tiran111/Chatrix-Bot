import sqlite3
import os
from datetime import datetime, date
import logging

logger = logging.getLogger(__name__)

# –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_PATH = 'dating_bot.db'

class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DATABASE_PATH, check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self.cursor = self.conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –ë–î
        if self.needs_reset():
            logger.info("üîÑ –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ë–î, –≤–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è...")
            self.force_reset_database()
        else:
            self.init_db()
            self.update_database_structure()

    def needs_reset(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –ë–î"""
        try:
            self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            users_exists = self.cursor.fetchone() is not None
            
            self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='likes'")
            likes_exists = self.cursor.fetchone() is not None
            
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –æ–¥–Ω—ñ—î—ó –∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å - –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏
            if not users_exists or not likes_exists:
                logger.warning("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –ë–î")
                return True
                
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ë–î: {e}")
            return True

    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–±–µ–∑ —Å–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö)"""
        try:
            # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL,
                    username TEXT,
                    first_name TEXT NOT NULL,
                    age INTEGER,
                    gender TEXT,
                    city TEXT,
                    seeking_gender TEXT DEFAULT 'all',
                    goal TEXT,
                    bio TEXT,
                    has_photo BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    likes_count INTEGER DEFAULT 0,
                    is_banned BOOLEAN DEFAULT FALSE,
                    rating REAL DEFAULT 5.0,
                    daily_likes_count INTEGER DEFAULT 0,
                    last_like_date DATE,
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è —Ñ–æ—Ç–æ
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS photos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    file_id TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è –ª–∞–π–∫—ñ–≤
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS likes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_user_id INTEGER NOT NULL,
                    to_user_id INTEGER NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (from_user_id) REFERENCES users (id),
                    FOREIGN KEY (to_user_id) REFERENCES users (id),
                    UNIQUE(from_user_id, to_user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è –º–∞—Ç—á—ñ–≤
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS matches (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user1_id INTEGER NOT NULL,
                    user2_id INTEGER NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user1_id) REFERENCES users (id),
                    FOREIGN KEY (user2_id) REFERENCES users (id),
                    UNIQUE(user1_id, user2_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS profile_views (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    viewer_id INTEGER NOT NULL,
                    viewed_user_id INTEGER NOT NULL,
                    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (viewer_id) REFERENCES users (id),
                    FOREIGN KEY (viewed_user_id) REFERENCES users (id)
                )
            ''')
            
            self.conn.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            raise

    def update_database_structure(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
            columns_to_add = [
                ('seeking_gender', 'TEXT DEFAULT "all"'),
                ('rating', 'REAL DEFAULT 5.0'),
                ('daily_likes_count', 'INTEGER DEFAULT 0'),
                ('last_like_date', 'DATE')
            ]
            
            for column_name, column_type in columns_to_add:
                try:
                    self.cursor.execute(f"ALTER TABLE users ADD COLUMN {column_name} {column_type}")
                    logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ —Å—Ç–æ–≤–ø–µ—Ü—å {column_name}")
                except sqlite3.OperationalError:
                    # –°—Ç–æ–≤–ø–µ—Ü—å –≤–∂–µ —ñ—Å–Ω—É—î
                    pass
            
            self.conn.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î: {e}")

    def force_reset_database(self):
        """–ü—Ä–∏–º—É—Å–æ–≤–µ —Å–∫–∏–¥–∞–Ω–Ω—è –ë–î (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö)"""
        try:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
            self.conn.close()
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ë–î
            if os.path.exists(DATABASE_PATH):
                os.remove(DATABASE_PATH)
                logger.info("üóëÔ∏è –°—Ç–∞—Ä–∞ –ë–î –≤–∏–¥–∞–ª–µ–Ω–∞")
            
            # –ü–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
            self.conn = sqlite3.connect(DATABASE_PATH, check_same_thread=False)
            self.conn.row_factory = sqlite3.Row
            self.cursor = self.conn.cursor()
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤—É –ë–î
            self.init_db()
            logger.info("üîÑ –ë–î —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–∞ —Ç–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ë–î: {e}")
            raise

    def reset_database(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –ë–î (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)"""
        try:
            self.force_reset_database()
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ë–î: {e}")
            return False

    def get_users_by_city(self, city, current_user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –º—ñ—Å—Ç–æ–º"""
        try:
            current_user = self.get_user(current_user_id)
            if not current_user:
                return []
            
            seeking_gender = current_user.get('seeking_gender', 'all')
            clean_city = city.replace('üèôÔ∏è ', '').strip()
            
            logger.info(f"üîç [CITY SEARCH] –®—É–∫–∞—î–º–æ –≤ –º—ñ—Å—Ç—ñ: '{clean_city}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {current_user_id}")
            logger.info(f"üîç [CITY SEARCH] –®—É–∫–∞—î —Å—Ç–∞—Ç—å: {seeking_gender}")
            
            query = '''
                SELECT u.* FROM users u
                WHERE u.telegram_id != ? AND u.city LIKE ? 
                AND u.age IS NOT NULL AND u.has_photo = TRUE AND u.is_banned = FALSE
            '''
            params = [current_user_id, f'%{clean_city}%']
            
            if seeking_gender != 'all':
                query += ' AND u.gender = ?'
                params.append(seeking_gender)
            
            # –í–∏–∫–ª—é—á–∞—î–º–æ –≤–∂–µ –ª–∞–π–∫–Ω—É—Ç–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            query += ' AND u.telegram_id NOT IN (SELECT u2.telegram_id FROM users u2 JOIN likes l ON u2.id = l.to_user_id JOIN users u3 ON u3.id = l.from_user_id WHERE u3.telegram_id = ?)'
            params.append(current_user_id)
            
            query += ' ORDER BY RANDOM() LIMIT 20'
            
            self.cursor.execute(query, params)
            users = self.cursor.fetchall()
            
            logger.info(f"üîç [CITY SEARCH] –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}")
            
            return users
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º: {e}")
            return []

    def add_user(self, telegram_id, username, first_name):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                INSERT OR REPLACE INTO users (telegram_id, username, first_name)
                VALUES (?, ?, ?)
            ''', (telegram_id, username, first_name))
            self.conn.commit()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π: {telegram_id} - {first_name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return False

    def get_user(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if user:
                return dict(user)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def update_user_profile(self, telegram_id, age, gender, city, seeking_gender, goal, bio):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {telegram_id}")
            logger.info(f"üîÑ –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –≤—ñ–∫={age}, —Å—Ç–∞—Ç—å={gender}, –º—ñ—Å—Ç–æ={city}, —à—É–∫–∞—î={seeking_gender}, —Ü—ñ–ª—å={goal}")
            
            self.cursor.execute('''
                UPDATE users 
                SET age = ?, gender = ?, city = ?, seeking_gender = ?, goal = ?, bio = ?, last_active = CURRENT_TIMESTAMP
                WHERE telegram_id = ?
            ''', (age, gender, city, seeking_gender, goal, bio, telegram_id))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
            self.update_user_rating(telegram_id)
            
            self.conn.commit()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
            self.cursor.execute('SELECT age, gender, city, seeking_gender, goal FROM users WHERE telegram_id = ?', (telegram_id,))
            updated_data = self.cursor.fetchone()
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: {updated_data}")
            
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return False

    def get_random_user(self, current_user_id, city=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É"""
        try:
            current_user = self.get_user(current_user_id)
            if not current_user:
                logger.error(f"‚ùå –ü–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {current_user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            seeking_gender = current_user.get('seeking_gender', 'all')
            current_gender = current_user.get('gender')
            
            query = '''
                SELECT u.* FROM users u
                WHERE u.telegram_id != ? AND u.age IS NOT NULL 
                AND u.has_photo = TRUE AND u.is_banned = FALSE
            '''
            params = [current_user_id]
            
            if seeking_gender != 'all':
                query += ' AND u.gender = ?'
                params.append(seeking_gender)
            
            if city:
                query += ' AND u.city LIKE ?'
                params.append(f'%{city}%')
            
            # –í–∏–∫–ª—é—á–∞—î–º–æ –≤–∂–µ –ª–∞–π–∫–Ω—É—Ç–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            query += ' AND u.telegram_id NOT IN (SELECT u2.telegram_id FROM users u2 JOIN likes l ON u2.id = l.to_user_id JOIN users u3 ON u3.id = l.from_user_id WHERE u3.telegram_id = ?)'
            params.append(current_user_id)
            
            query += ' ORDER BY RANDOM() LIMIT 1'
            
            self.cursor.execute(query, params)
            user = self.cursor.fetchone()
            
            return user
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def add_like(self, from_user_id, to_user_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –æ–±–º–µ–∂–µ–Ω—å"""
        try:
            can_like, message = self.can_like_today(from_user_id)
            if not can_like:
                return False, message
            
            if self.has_liked(from_user_id, to_user_id):
                return False, "–í–∏ –≤–∂–µ –ª–∞–π–∫–∞–ª–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
            
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (from_user_id,))
            from_user = self.cursor.fetchone()
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (to_user_id,))
            to_user = self.cursor.fetchone()
            
            if not from_user or not to_user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            self.cursor.execute('INSERT OR IGNORE INTO likes (from_user_id, to_user_id) VALUES (?, ?)', (from_user[0], to_user[0]))
            self.cursor.execute('UPDATE users SET likes_count = likes_count + 1 WHERE id = ?', (to_user[0],))
            
            today = date.today()
            self.cursor.execute(
                'UPDATE users SET daily_likes_count = daily_likes_count + 1, last_like_date = ? WHERE telegram_id = ?',
                (today, from_user_id)
            )
            
            self.update_user_rating(to_user_id)
            
            self.conn.commit()
            
            is_mutual = self.has_liked(to_user_id, from_user_id)
            
            if is_mutual:
                self.cursor.execute('''
                    INSERT OR IGNORE INTO matches (user1_id, user2_id)
                    VALUES (?, ?)
                ''', (min(from_user[0], to_user[0]), max(from_user[0], to_user[0])))
                self.conn.commit()
            
            return True, "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ" if not is_mutual else "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ! üíï –£ –≤–∞—Å –º–∞—Ç—á!"
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É: {e}")
            return False, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"

    def has_liked(self, from_user_id, to_user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Å—Ç–∞–≤–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ª–∞–π–∫ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            self.cursor.execute('''
                SELECT l.id FROM likes l
                JOIN users u1 ON u1.id = l.from_user_id
                JOIN users u2 ON u2.id = l.to_user_id
                WHERE u1.telegram_id = ? AND u2.telegram_id = ?
            ''', (from_user_id, to_user_id))
            
            result = self.cursor.fetchone()
            return result is not None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—É: {e}")
            return False

    def get_user_profile(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if user and user[4]:  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –≤—ñ–∫
                return user, True
            return user, False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return None, False

    def get_main_photo(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = ?
                LIMIT 1
            ''', (telegram_id,))
            result = self.cursor.fetchone()
            return result[0] if result else None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return None

    def add_profile_photo(self, telegram_id, file_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            logger.info(f"üîÑ –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}")
            
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            user_id = user[0]
            
            current_photos = self.get_profile_photos(telegram_id)
            if len(current_photos) >= 3:
                logger.error("‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3)")
                return False
            
            self.cursor.execute('INSERT INTO photos (user_id, file_id) VALUES (?, ?)', (user_id, file_id))
            self.cursor.execute('UPDATE users SET has_photo = TRUE WHERE telegram_id = ?', (telegram_id,))
            self.update_user_rating(telegram_id)
            
            self.conn.commit()
            logger.info("‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return False

    def get_profile_photos(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = ?
            ''', (telegram_id,))
            photos = self.cursor.fetchall()
            return [photo[0] for photo in photos]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return []

    def update_user_rating(self, telegram_id):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user = self.get_user(telegram_id)
            if not user:
                return
            
            base_rating = 5.0
            bonus = 0.0
            
            if user.get('has_photo'):
                bonus += 1.0
            
            if user.get('bio') and len(user.get('bio', '')) > 20:
                bonus += 1.0
            
            likes_count = user.get('likes_count', 0)
            bonus += min(likes_count * 0.1, 3.0)
            
            new_rating = min(base_rating + bonus, 10.0)
            
            self.cursor.execute('UPDATE users SET rating = ? WHERE telegram_id = ?', (new_rating, telegram_id))
            logger.info(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}: {new_rating}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")

    def can_like_today(self, user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        try:
            user = self.get_user(user_id)
            if not user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            today = date.today()
            last_like_date = user.get('last_like_date')
            daily_likes = user.get('daily_likes_count', 0)
            
            if last_like_date != today:
                self.cursor.execute(
                    'UPDATE users SET daily_likes_count = 0, last_like_date = ? WHERE telegram_id = ?',
                    (today, user_id)
                )
                self.conn.commit()
                return True, "–ú–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏"
            
            if daily_likes >= 50:
                return False, "–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ª–∞–π–∫—ñ–≤ (50)"
            
            return True, f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∞–π–∫—ñ–≤: {50 - daily_likes}"
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—ñ–≤: {e}")
            return False, "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"

    def get_user_matches(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if not user:
                return []
            
            self.cursor.execute('''
                SELECT DISTINCT u.* FROM users u
                JOIN matches m ON (u.id = m.user1_id OR u.id = m.user2_id)
                WHERE (m.user1_id = ? OR m.user2_id = ?) AND u.id != ?
            ''', (user[0], user[0], user[0]))
            
            matches = self.cursor.fetchall()
            return matches
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤: {e}")
            return []

    def get_user_likers(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if not user:
                return []
            
            self.cursor.execute('''
                SELECT u.* FROM users u
                JOIN likes l ON u.id = l.from_user_id
                JOIN users target ON target.id = l.to_user_id
                WHERE target.telegram_id = ? AND u.telegram_id != ?
            ''', (telegram_id, telegram_id))
            
            likers = self.cursor.fetchall()
            return likers
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–π–∫–µ—Ä—ñ–≤: {e}")
            return []

    def get_top_users_by_rating(self, limit=10, gender=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        try:
            query = '''
                SELECT * FROM users 
                WHERE is_banned = FALSE AND age IS NOT NULL AND has_photo = TRUE
            '''
            params = []
            
            if gender:
                query += ' AND gender = ?'
                params.append(gender)
                
            query += ' ORDER BY rating DESC, likes_count DESC LIMIT ?'
            params.append(limit)
            
            self.cursor.execute(query, params)
            users = self.cursor.fetchall()
            
            return users
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º: {e}")
            return []

    def add_profile_view(self, viewer_id, viewed_user_id):
        """–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –ø—Ä–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (viewer_id,))
            viewer = self.cursor.fetchone()
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (viewed_user_id,))
            viewed = self.cursor.fetchone()
            
            if viewer and viewed:
                self.cursor.execute('''
                    INSERT INTO profile_views (viewer_id, viewed_user_id)
                    VALUES (?, ?)
                ''', (viewer[0], viewed[0]))
                self.conn.commit()
                return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
        return False

    def get_user_by_id(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if user:
                return dict(user)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def calculate_user_rating(self, user_id):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user = self.get_user(user_id)
            if not user:
                return 5.0
            
            base_rating = 5.0
            bonus = 0.0
            
            if user.get('has_photo'):
                bonus += 1.0
            
            if user.get('bio') and len(user.get('bio', '')) > 20:
                bonus += 1.0
            
            likes_count = user.get('likes_count', 0)
            bonus += min(likes_count * 0.1, 3.0)
            
            if user.get('last_active'):
                try:
                    last_active = datetime.fromisoformat(user['last_active'].replace('Z', '+00:00'))
                    days_since_active = (datetime.now() - last_active).days
                    if days_since_active <= 7:
                        bonus += 0.5
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ last_active: {e}")

            new_rating = min(base_rating + bonus, 10.0)
            
            self.cursor.execute('UPDATE users SET rating = ? WHERE telegram_id = ?', (new_rating, user_id))
            self.conn.commit()
            
            logger.info(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –¥–ª—è {user_id}: {new_rating}")
            return new_rating
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
            return 5.0

    # –ê–î–ú–Ü–ù –ú–ï–¢–û–î–ò
    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
        try:
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            self.cursor.execute('SELECT COUNT(*) FROM users')
            total_users = self.cursor.fetchone()[0]
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º –ø—Ä–æ—Ñ—ñ–ª–µ–º)
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE age IS NOT NULL AND has_photo = TRUE')
            active_users = self.cursor.fetchone()[0]
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–æ–ª–æ–≤—ñ–∫—ñ–≤ —Ç–∞ –∂—ñ–Ω–æ–∫
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = ?', ('male',))
            male_count = self.cursor.fetchone()[0]
            
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = ?', ('female',))
            female_count = self.cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü—ñ–ª—è—Ö
            self.cursor.execute('SELECT goal, COUNT(*) FROM users WHERE goal IS NOT NULL GROUP BY goal')
            goals_stats = self.cursor.fetchall()
            
            return male_count, female_count, active_users, goals_stats
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0, 0, []

    def get_users_count(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM users')
            return self.cursor.fetchone()[0]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return 0

    def get_all_active_users(self, admin_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–¥–ª—è –∞–¥–º—ñ–Ω–∞)"""
        try:
            self.cursor.execute('''
                SELECT * FROM users 
                WHERE telegram_id != ? AND age IS NOT NULL 
                ORDER BY created_at DESC
            ''', (admin_id,))
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def get_all_users(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT * FROM users ORDER BY created_at DESC')
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def search_user(self, search_query):
        """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ —ñ–º–µ–Ω–µ–º"""
        try:
            query = '''
                SELECT * FROM users 
                WHERE telegram_id = ? OR first_name LIKE ? OR username LIKE ?
                ORDER BY created_at DESC
            '''
            self.cursor.execute(query, (search_query, f'%{search_query}%', f'%{search_query}%'))
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return []

    def get_banned_users(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE is_banned = TRUE ORDER BY created_at DESC')
            return self.cursor.fetchall()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def ban_user(self, user_id):
        """–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = TRUE WHERE telegram_id = ?', (user_id,))
            self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return False

    def unban_user(self, user_id):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = FALSE WHERE telegram_id = ?', (user_id,))
            self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return False

    def cleanup_old_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±—ñ–ª—å—à–µ 30 –¥–Ω—ñ–≤
            self.cursor.execute('''
                DELETE FROM users 
                WHERE last_active < datetime('now', '-30 days') 
                AND age IS NULL
            ''')
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ñ–æ—Ç–æ
            self.cursor.execute('''
                DELETE FROM photos 
                WHERE user_id NOT IN (SELECT id FROM users)
            ''')
            
            self.conn.commit()
            logger.info("‚úÖ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()