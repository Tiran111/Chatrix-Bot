import sqlite3
import os
from datetime import datetime, date

# –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_PATH = 'dating_bot.db'

class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DATABASE_PATH, check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self.cursor = self.conn.cursor()
        self.init_db()
    
    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        print("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT NOT NULL,
                age INTEGER,
                gender TEXT,
                city TEXT,
                seeking_gender TEXT,
                goal TEXT,
                bio TEXT,
                has_photo BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                likes_count INTEGER DEFAULT 0,
                is_banned BOOLEAN DEFAULT FALSE,
                rating REAL DEFAULT 5.0,
                daily_likes_count INTEGER DEFAULT 0,
                last_like_date DATE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è —Ñ–æ—Ç–æ
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                file_id TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –ª–∞–π–∫—ñ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS likes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                from_user_id INTEGER NOT NULL,
                to_user_id INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (from_user_id) REFERENCES users (id),
                FOREIGN KEY (to_user_id) REFERENCES users (id),
                UNIQUE(from_user_id, to_user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS profile_views (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                viewer_id INTEGER NOT NULL,
                viewed_user_id INTEGER NOT NULL,
                viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (viewer_id) REFERENCES users (id),
                FOREIGN KEY (viewed_user_id) REFERENCES users (id)
            )
        ''')
        
        self.conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    
    def add_user(self, telegram_id, username, first_name):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                INSERT OR REPLACE INTO users (telegram_id, username, first_name)
                VALUES (?, ?, ?)
            ''', (telegram_id, username, first_name))
            self.conn.commit()
            print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π: {telegram_id} - {first_name}")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return False
    
    def get_user(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if user:
                return dict(user)
            return None
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None
    
    def update_user_profile(self, telegram_id, age, gender, city, seeking_gender, goal, bio):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            print(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {telegram_id}")
            
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
            existing_user = self.cursor.fetchone()
            
            if not existing_user:
                print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ...")
                # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.cursor.execute('INSERT INTO users (telegram_id, first_name) VALUES (?, ?)', (telegram_id, "User"))
                self.conn.commit()
                print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –¢–µ–ø–µ—Ä –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            self.cursor.execute('''
                UPDATE users 
                SET age = ?, gender = ?, city = ?, seeking_gender = ?, goal = ?, bio = ?
                WHERE telegram_id = ?
            ''', (age, gender, city, seeking_gender, goal, bio, telegram_id))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –ø—ñ—Å–ª—è –∑–º—ñ–Ω –ø—Ä–æ—Ñ—ñ–ª—é
            self.update_rating_on_profile_update(telegram_id)
            
            self.conn.commit()
            print(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}")
            return True
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return False
    
    def add_profile_photo(self, telegram_id, file_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ)"""
        try:
            print(f"üîÑ –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è {telegram_id}, file_id: {file_id}")
            
            # –û—Ç—Ä–∏–º–∞—î–º–æ user_id
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            
            if not user:
                print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            user_id = user[0]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
            current_photos = self.get_profile_photos(telegram_id)
            if len(current_photos) >= 3:
                print(f"‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3)")
                return False
            
            # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ
            self.cursor.execute('INSERT INTO photos (user_id, file_id) VALUES (?, ?)', (user_id, file_id))
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Ñ–æ—Ç–æ
            self.cursor.execute('UPDATE users SET has_photo = TRUE WHERE telegram_id = ?', (telegram_id,))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
            self.update_rating_on_profile_update(telegram_id)
            
            self.conn.commit()
            print("‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return False
    
    def get_main_photo(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = ?
                LIMIT 1
            ''', (telegram_id,))
            result = self.cursor.fetchone()
            return result[0] if result else None
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return None
    
    def get_profile_photos(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('''
                SELECT p.file_id FROM photos p
                JOIN users u ON p.user_id = u.id
                WHERE u.telegram_id = ?
            ''', (telegram_id,))
            photos = self.cursor.fetchall()
            return [photo[0] for photo in photos]
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            return []
    
    def get_user_profile(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if user and user[4]:  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –≤—ñ–∫
                return user, True
            return user, False
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return None, False
    
    def get_random_user(self, current_user_id, city=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É"""
        try:
            current_user = self.get_user(current_user_id)
            if not current_user:
                return None
            
            seeking_gender = current_user.get('seeking_gender', 'all')
            
            query = '''
                SELECT u.* FROM users u
                WHERE u.telegram_id != ? AND u.age IS NOT NULL 
                AND u.has_photo = TRUE AND u.is_banned = FALSE
            '''
            params = [current_user_id]
            
            if seeking_gender != 'all':
                query += ' AND u.gender = ?'
                params.append(seeking_gender)
            
            if city:
                query += ' AND u.city LIKE ?'
                params.append(f'%{city}%')
            
            query += ' ORDER BY RANDOM() LIMIT 1'
            
            self.cursor.execute(query, params)
            user = self.cursor.fetchone()
            return user
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None
    
    def get_users_by_city(self, city, current_user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –º—ñ—Å—Ç–æ–º"""
        try:
            print(f"üîç –ü–æ—à—É–∫ —É –º—ñ—Å—Ç—ñ: '{city}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {current_user_id}")
            
            current_user = self.get_user(current_user_id)
            if not current_user:
                print("‚ùå –ü–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return []
            
            seeking_gender = current_user.get('seeking_gender', 'all')
            print(f"üîç –®—É–∫–∞—î —Å—Ç–∞—Ç—å: {seeking_gender}")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –µ–º–æ–¥–∑—ñ –∑ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞
            clean_city = city.replace('üèôÔ∏è ', '').strip()
            
            query = '''
                SELECT u.* FROM users u
                WHERE u.telegram_id != ? AND u.city LIKE ? 
                AND u.age IS NOT NULL AND u.has_photo = TRUE AND u.is_banned = FALSE
            '''
            params = [current_user_id, f'%{clean_city}%']
            
            if seeking_gender != 'all':
                query += ' AND u.gender = ?'
                params.append(seeking_gender)
            
            query += ' ORDER BY RANDOM() LIMIT 20'
            
            print(f"üîç SQL –∑–∞–ø–∏—Ç: {query}")
            print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {params}")
            
            self.cursor.execute(query, params)
            users = self.cursor.fetchall()
            print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}")
            return users
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º: {e}")
            return []
    
    def get_likes_count(self, user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–π–∫—ñ–≤"""
        try:
            self.cursor.execute('SELECT likes_count FROM users WHERE telegram_id = ?', (user_id,))
            result = self.cursor.fetchone()
            return result[0] if result else 0
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–π–∫—ñ–≤: {e}")
            return 0
    
    def can_like_today(self, user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        try:
            user = self.get_user(user_id)
            if not user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            today = date.today()
            last_like_date = user.get('last_like_date')
            daily_likes = user.get('daily_likes_count', 0)
            
            # –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ª–∞–π–∫ –±—É–≤ –Ω–µ —Å—å–æ–≥–æ–¥–Ω—ñ - —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
            if last_like_date != today:
                self.cursor.execute(
                    'UPDATE users SET daily_likes_count = 0, last_like_date = ? WHERE telegram_id = ?',
                    (today, user_id)
                )
                self.conn.commit()
                return True, "–ú–æ–∂–Ω–∞ —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç
            if daily_likes >= 50:
                return False, "–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ª–∞–π–∫—ñ–≤ (50)"
            
            return True, f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∞–π–∫—ñ–≤: {50 - daily_likes}"
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—ñ–≤: {e}")
            return False, "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
    
    def add_like(self, from_user_id, to_user_id):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –æ–±–º–µ–∂–µ–Ω—å"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏
            can_like, message = self.can_like_today(from_user_id)
            if not can_like:
                return False, message
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫
            if self.has_liked(from_user_id, to_user_id):
                return False, "–í–∏ –≤–∂–µ –ª–∞–π–∫–∞–ª–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
            
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (from_user_id,))
            from_user = self.cursor.fetchone()
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (to_user_id,))
            to_user = self.cursor.fetchone()
            
            if not from_user or not to_user:
                return False, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫
            self.cursor.execute('INSERT OR IGNORE INTO likes (from_user_id, to_user_id) VALUES (?, ?)', (from_user[0], to_user[0]))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
            self.cursor.execute('UPDATE users SET likes_count = likes_count + 1 WHERE id = ?', (to_user[0],))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–µ–Ω–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤
            today = date.today()
            self.cursor.execute(
                'UPDATE users SET daily_likes_count = daily_likes_count + 1, last_like_date = ? WHERE telegram_id = ?',
                (today, from_user_id)
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
            self.update_rating_on_like(to_user_id)
            
            self.conn.commit()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫
            is_mutual = self.has_liked(to_user_id, from_user_id)
            
            return True, "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ" if not is_mutual else "–õ–∞–π–∫ –¥–æ–¥–∞–Ω–æ! üíï –£ –≤–∞—Å –º–∞—Ç—á!"
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É: {e}")
            return False, "–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫—É"
    
    def get_user_matches(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if not user:
                return []
            
            self.cursor.execute('''
                SELECT u.* FROM users u
                JOIN likes l1 ON u.id = l1.to_user_id
                JOIN likes l2 ON u.id = l2.from_user_id
                WHERE l1.from_user_id = ? AND l2.to_user_id = ? AND u.id != ?
            ''', (user[0], user[0], user[0]))
            
            matches = self.cursor.fetchall()
            return matches
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤: {e}")
            return []
    
    def get_top_users_by_rating(self, limit=10, gender=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        try:
            query = '''
                SELECT * FROM users 
                WHERE is_banned = FALSE AND age IS NOT NULL AND has_photo = TRUE
            '''
            params = []
            
            if gender:
                query += ' AND gender = ?'
                params.append(gender)
                
            query += ' ORDER BY rating DESC, likes_count DESC LIMIT ?'
            params.append(limit)
            
            self.cursor.execute(query, params)
            users = self.cursor.fetchall()
            
            print(f"üîç [TOP] –ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ç–æ–ø—É")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ª–∞–¥–∫–∞
            for i, user in enumerate(users, 1):
                print(f"üîç [TOP {i}] ID: {user[1]}, –Ü–º'—è: {user[3]}, –†–µ–π—Ç–∏–Ω–≥: {user[14]}, –õ–∞–π–∫—ñ–≤: {user[12]}")
            
            return users
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º: {e}")
            return []

    def get_user_likers(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                SELECT u.* FROM users u
                JOIN likes l ON u.id = l.from_user_id
                JOIN users target ON target.id = l.to_user_id
                WHERE target.telegram_id = ? AND u.telegram_id != ?
            ''', (telegram_id, telegram_id))
            
            likers = self.cursor.fetchall()
            return likers
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∞–π–∫–µ—Ä—ñ–≤: {e}")
            return []
    
    def has_liked(self, from_user_id, to_user_id):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Å—Ç–∞–≤–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ª–∞–π–∫ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            self.cursor.execute('''
                SELECT l.id FROM likes l
                JOIN users u1 ON u1.id = l.from_user_id
                JOIN users u2 ON u2.id = l.to_user_id
                WHERE u1.telegram_id = ? AND u2.telegram_id = ?
            ''', (from_user_id, to_user_id))
            
            result = self.cursor.fetchone()
            return result is not None
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–π–∫—É: {e}")
            return False

    def calculate_user_rating(self, user_id):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user_data = self.get_user(user_id)
            if not user_data:
                return 5.0
                
            likes_count = user_data.get('likes_count', 0)
            has_photo = user_data.get('has_photo', False)
            has_bio = bool(user_data.get('bio'))
            bio_length = len(user_data.get('bio', ''))
            
            # –ë–∞–∑–æ–≤–∞ —Ñ–æ—Ä–º—É–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥—É
            base_rating = 5.0
            
            # –ë–æ–Ω—É—Å –∑–∞ –ª–∞–π–∫–∏
            rating_bonus = min(likes_count * 0.2, 3.0)  # –ú–∞–∫—Å–∏–º—É–º +3 –∑–∞ –ª–∞–π–∫–∏
            
            # –ë–æ–Ω—É—Å–∏ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ñ—ñ–ª—é
            if has_photo:
                rating_bonus += 1.0
            
            if has_bio:
                if bio_length > 50:
                    rating_bonus += 1.5
                elif bio_length > 20:
                    rating_bonus += 1.0
                else:
                    rating_bonus += 0.5
            
            final_rating = min(base_rating + rating_bonus, 10.0)
            return round(final_rating, 1)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
            return 5.0

    def update_rating_on_like(self, user_id):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª–∞–π–∫—É"""
        try:
            new_rating = self.calculate_user_rating(user_id)
            
            self.cursor.execute(
                'UPDATE users SET rating = ? WHERE telegram_id = ?',
                (new_rating, user_id)
            )
            self.conn.commit()
            print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {user_id}: {new_rating}")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
            return False

    def update_rating_on_profile_update(self, user_id):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            new_rating = self.calculate_user_rating(user_id)
            
            self.cursor.execute(
                'UPDATE users SET rating = ? WHERE telegram_id = ?',
                (new_rating, user_id)
            )
            self.conn.commit()
            print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è {user_id}: {new_rating}")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
            return False

    # –ê–î–ú–Ü–ù-–§–£–ù–ö–¶–Ü–á
    def get_statistics(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—Ç–∞—Ç—Ç—é
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = ? AND age IS NOT NULL', ('male',))
            male = self.cursor.fetchone()[0]
            
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE gender = ? AND age IS NOT NULL', ('female',))
            female = self.cursor.fetchone()[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ñ –∞–Ω–∫–µ—Ç–∏
            self.cursor.execute('SELECT COUNT(*) FROM users WHERE age IS NOT NULL AND has_photo = TRUE')
            total_active = self.cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ü—ñ–ª—è–º–∏
            self.cursor.execute('SELECT goal, COUNT(*) FROM users WHERE goal IS NOT NULL GROUP BY goal')
            goals_stats = self.cursor.fetchall()
            
            return male, female, total_active, goals_stats
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0, 0, []

    def get_users_count(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM users')
            return self.cursor.fetchone()[0]
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return 0

    def get_all_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT telegram_id FROM users')
            users = self.cursor.fetchall()
            return [user[0] for user in users]
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def get_banned_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE is_banned = TRUE')
            return self.cursor.fetchall()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {e}")
            return []

    def get_all_active_users(self, exclude_user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('''
                SELECT * FROM users 
                WHERE age IS NOT NULL AND has_photo = TRUE AND is_banned = FALSE
            ''')
            return self.cursor.fetchall()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    def search_users_advanced(self, user_id, gender, city, goal):
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            query = '''
                SELECT * FROM users 
                WHERE telegram_id != ? AND age IS NOT NULL 
                AND has_photo = TRUE AND is_banned = FALSE
            '''
            params = [user_id]
            
            if gender != 'all':
                query += ' AND gender = ?'
                params.append(gender)
            
            if city:
                query += ' AND city LIKE ?'
                params.append(f'%{city}%')
            
            if goal:
                query += ' AND goal = ?'
                params.append(goal)
            
            query += ' ORDER BY RANDOM() LIMIT 20'
            
            self.cursor.execute(query, params)
            return self.cursor.fetchall()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {e}")
            return []

    def cleanup_old_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –ø—Ä–æ—Ñ—ñ–ª—é (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω—ñ–≤)
            self.cursor.execute('''
                DELETE FROM users 
                WHERE age IS NULL AND created_at < datetime('now', '-30 days')
            ''')
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ª–∞–π–∫–∏ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω—ñ–≤)
            self.cursor.execute('''
                DELETE FROM likes 
                WHERE created_at < datetime('now', '-90 days')
            ''')
            
            self.conn.commit()
            print("‚úÖ –°—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return False

    def ban_user(self, telegram_id):
        """–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = TRUE WHERE telegram_id = ?', (telegram_id,))
            self.conn.commit()
            print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return False

    def unban_user(self, telegram_id):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = FALSE WHERE telegram_id = ?', (telegram_id,))
            self.conn.commit()
            print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return False

    def unban_all_users(self):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            self.cursor.execute('UPDATE users SET is_banned = FALSE WHERE is_banned = TRUE')
            self.conn.commit()
            print("‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return False

    def search_user(self, query):
        """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ —ñ–º–µ–Ω–µ–º"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–∞ ID (—á–∏—Å–ª–æ)
            try:
                user_id = int(query)
                self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (user_id,))
                result_by_id = self.cursor.fetchall()
                if result_by_id:
                    return result_by_id
            except ValueError:
                pass  # –Ø–∫—â–æ –Ω–µ —á–∏—Å–ª–æ, —à—É–∫–∞—î–º–æ –∑–∞ —ñ–º–µ–Ω–µ–º
            
            # –ü–æ—à—É–∫ –∑–∞ —ñ–º–µ–Ω–µ–º –∞–±–æ username
            self.cursor.execute('''
                SELECT * FROM users 
                WHERE first_name LIKE ? OR username LIKE ?
            ''', (f'%{query}%', f'%{query}%'))
            
            results = self.cursor.fetchall()
            return results
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return []
    
    def get_user_by_id(self, telegram_id):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            if user:
                return dict(user)
            return None
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

    def update_user_name(self, telegram_id, first_name):
        """–û–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('''
                UPDATE users SET first_name = ? WHERE telegram_id = ?
            ''', (first_name, telegram_id))
            self.conn.commit()
            print(f"‚úÖ –Ü–º'—è –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {telegram_id}: {first_name}")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ: {e}")
            return False

    def add_profile_view(self, viewer_id, viewed_user_id):
        """–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –ø—Ä–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—é"""
        try:
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (viewer_id,))
            viewer = self.cursor.fetchone()
            self.cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (viewed_user_id,))
            viewed = self.cursor.fetchone()
            
            if viewer and viewed:
                self.cursor.execute('''
                    INSERT INTO profile_views (viewer_id, viewed_user_id)
                    VALUES (?, ?)
                ''', (viewer[0], viewed[0]))
                self.conn.commit()
                return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
        return False

    def debug_user_profile(self, telegram_id):
        """–í—ñ–¥–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
            user = self.cursor.fetchone()
            
            if user:
                print(f"üîç [DEBUG USER] ID: {user[1]}")
                print(f"üîç [DEBUG USER] –Ü–º'—è: {user[3]}")
                print(f"üîç [DEBUG USER] –í—ñ–∫: {user[4]}")
                print(f"üîç [DEBUG USER] –°—Ç–∞—Ç—å: {user[5]}")
                print(f"üîç [DEBUG USER] –ú—ñ—Å—Ç–æ: {user[6]}")
                print(f"üîç [DEBUG USER] –§–æ—Ç–æ: {user[10]}")
                print(f"üîç [DEBUG USER] –õ–∞–π–∫—ñ–≤: {user[12]}")
                print(f"üîç [DEBUG USER] –†–µ–π—Ç–∏–Ω–≥: {user[14]}")
                print(f"üîç [DEBUG USER] –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π: {user[13]}")
                return True
            else:
                print(f"üîç [DEBUG USER] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ª–∞–¥–∫–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()