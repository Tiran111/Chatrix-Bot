from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
try:
    from database_postgres import db
except ImportError:
    from database.models import db
from utils.states import user_states, States
from keyboards.main_menu import get_main_menu
from config import ADMIN_ID
from utils.states import user_states, States
from keyboards.main_menu import get_main_menu
from config import ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    try:
        user = update.effective_user
        
        logger.info(f"üÜï –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫—â–æ –Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ
        existing_user = db.get_user(user.id)
        if not existing_user:
            db.add_user(user.id, user.username, user.first_name)
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –¥–æ–¥–∞–Ω–∏–π –≤ –±–∞–∑—É")
        else:
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ")
        
        # ... —Ä–µ—à—Ç–∞ –∫–æ–¥—É –±–µ–∑ –∑–º—ñ–Ω
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
    db.add_user(user.id, user.username, user.first_name)
    
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_states[user.id] = States.START
    
    # –í—ñ—Ç–∞–Ω–Ω—è
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
        f"üíû *Chatrix* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤, –¥–µ —Ç–∏ –º–æ–∂–µ—à:\n\n"
        f"‚Ä¢ üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        f"‚Ä¢ üíï –ó–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ü—ñ–∫–∞–≤–∏—Ö –ª—é–¥–µ–π\n"
        f"‚Ä¢ ‚ù§Ô∏è –°—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –º–∞—Ç—á—ñ\n"
        f"‚Ä¢ üèÜ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        f"‚Ä¢ üèôÔ∏è –®—É–∫–∞—Ç–∏ –∑–∞ –º—ñ—Å—Ç–æ–º\n\n"
        f"üéØ *–ü–æ—á–Ω—ñ–º–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ!*"
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    user_data, is_complete = db.get_user_profile(user.id)
    
    if not is_complete:
        welcome_text += "\n\nüìù *–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É*"
        keyboard = [['üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å']]
    else:
        keyboard = [
            ['üíï –ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç', 'üèôÔ∏è –ü–æ –º—ñ—Å—Ç—É'],
            ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', '‚ù§Ô∏è –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤'],
            ['üíå –ú–æ—ó –º–∞—Ç—á—ñ', 'üèÜ –¢–æ–ø'],
            ["üë®‚Äçüíº –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–æ–º"]
        ]
    
    if user.id == ADMIN_ID:
        keyboard.append(['üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    print(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user.first_name}")
