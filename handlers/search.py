import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

async def search_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç"""
    try:
        from database.models import db
        from utils.states import user_states, States
        
        user = update.effective_user
        user_states[user.id] = States.SEARCH
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É
        users = db.get_users_for_search(user.id)
        
        if not users:
            await update.message.reply_text("üòî –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
            return
        
        context.user_data['search_users'] = users
        context.user_data['current_index'] = 0
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—É –∞–Ω–∫–µ—Ç—É
        await show_user_profile(update, context, users[0], "üíï –†–µ–∂–∏–º –ø–æ—à—É–∫—É")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞–Ω–∫–µ—Ç: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞–Ω–∫–µ—Ç.")

async def search_by_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç –ø–æ –º—ñ—Å—Ç—É"""
    try:
        from utils.states import user_states, States
        
        user = update.effective_user
        user_states[user.id] = States.SEARCH_BY_CITY
        
        await update.message.reply_text(
            "üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_search")]])
        )
        
        context.user_data['waiting_for_city'] = True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–æ –º—ñ—Å—Ç—É: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–æ –º—ñ—Å—Ç—É.")

async def show_next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –∞–Ω–∫–µ—Ç—É"""
    try:
        current_index = context.user_data.get('current_index', 0)
        search_users = context.user_data.get('search_users', [])
        
        if current_index + 1 >= len(search_users):
            await update.message.reply_text("üéâ –í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ –∞–Ω–∫–µ—Ç–∏!")
            return
        
        context.user_data['current_index'] = current_index + 1
        next_user = search_users[current_index + 1]
        
        await show_user_profile(update, context, next_user, "üíï –†–µ–∂–∏–º –ø–æ—à—É–∫—É")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏.")

async def show_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data, caption=""):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user_id = update.effective_user.id
        
        profile_text = f"""
üë§ *–ê–Ω–∫–µ—Ç–∞*

üÜî ID: `{user_data['user_id']}`
üë§ –Ü–º'—è: {user_data['name']}
üìÖ –í—ñ–∫: {user_data['age']}
üöª –°—Ç–∞—Ç—å: {user_data['gender']}
üéØ –®—É–∫–∞—î: {user_data['seeking_gender']}
üèôÔ∏è –ú—ñ—Å—Ç–æ: {user_data['city']}
üí¨ –ü—Ä–æ —Å–µ–±–µ: {user_data['bio']}

{caption}
"""
        
        keyboard = [
            [InlineKeyboardButton("‚ù§Ô∏è –í–ø–æ–¥–æ–±–∞—Ç–∏", callback_data=f"like_{user_data['user_id']}")],
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="next_profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if 'message' in update and update.message:
            await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')
        elif 'callback_query' in update and update.callback_query:
            await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        if 'message' in update and update.message:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏.")

async def show_top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        keyboard = [
            [InlineKeyboardButton("üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤", callback_data="top_male")],
            [InlineKeyboardButton("üë© –¢–æ–ø –∂—ñ–Ω–æ–∫", callback_data="top_female")],
            [InlineKeyboardButton("üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø", callback_data="top_all")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üèÜ *–¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤*\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Ç–æ–ø—É: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–ø—É.")

async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ç—á—ñ"""
    try:
        from database.models import db
        
        user_id = update.effective_user.id
        matches = db.get_matches(user_id)
        
        if not matches:
            await update.message.reply_text("üíî –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –º–∞—Ç—á—ñ–≤.")
            return
        
        matches_text = "üíå *–í–∞—à—ñ –º–∞—Ç—á—ñ:*\n\n"
        
        for match in matches:
            matches_text += f"üë§ {match['name']} (ID: `{match['user_id']}`)\n"
        
        await update.message.reply_text(matches_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–∞—Ç—á—ñ–≤: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ç—á—ñ–≤.")

async def show_likes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ö—Ç–æ –≤–∞—Å –ª–∞–π–∫–Ω—É–≤"""
    try:
        from database.models import db
        
        user_id = update.effective_user.id
        likes = db.get_likes(user_id)
        
        if not likes:
            await update.message.reply_text("üíî –í–∞—Å —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≤–ø–æ–¥–æ–±–∞–≤.")
            return
        
        likes_text = "‚ù§Ô∏è *–í–∞—Å –≤–ø–æ–¥–æ–±–∞–ª–∏:*\n\n"
        
        for like in likes:
            likes_text += f"üë§ {like['name']} (ID: `{like['user_id']}`)\n"
            keyboard = [[InlineKeyboardButton("‚ù§Ô∏è –í–ø–æ–¥–æ–±–∞—Ç–∏ –≤–∑–∞—î–º–Ω–æ", callback_data=f"like_back_{like['user_id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üë§ {like['name']} –≤–ø–æ–¥–æ–±–∞–≤(–ª–∞) –≤–∞—à—É –∞–Ω–∫–µ—Ç—É!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ª–∞–π–∫—ñ–≤: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–∞–π–∫—ñ–≤.")

async def handle_top_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–æ–ø—É"""
    try:
        from database.models import db
        
        text = update.message.text
        user_id = update.effective_user.id
        
        if text == "üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤":
            top_users = db.get_top_users(gender="–ß–æ–ª–æ–≤—ñ–∫")
            title = "üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤"
        elif text == "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫":
            top_users = db.get_top_users(gender="–ñ—ñ–Ω–∫–∞")
            title = "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫"
        else:
            top_users = db.get_top_users()
            title = "üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø"
        
        if not top_users:
            await update.message.reply_text("üòî –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–æ–ø—É.")
            return
        
        top_text = f"{title}:\n\n"
        
        for i, user in enumerate(top_users[:10], 1):
            top_text += f"{i}. {user['name']} - {user['likes_count']} ‚ù§Ô∏è\n"
        
        await update.message.reply_text(top_text)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–æ–ø—É: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–ø—É.")

# CALLBACK HANDLERS - –î–û–î–ê–ù–Ü –í–Ü–î–°–£–¢–ù–Ü –§–£–ù–ö–¶–Ü–á
async def handle_like_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫—É –∑ callback"""
    try:
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        liked_user_id = int(callback_data.split('_')[1])
        
        from database.models import db
        user_id = query.from_user.id
        
        # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫
        db.add_like(user_id, liked_user_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫
        if db.has_like(liked_user_id, user_id):
            # –¶–µ –º–∞—Ç—á!
            await query.edit_message_text(
                "üéâ –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫! –¶–µ –º–∞—Ç—á!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíå –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data=f"message_{liked_user_id}")],
                    [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ—à—É–∫", callback_data="next_profile")]
                ])
            )
        else:
            # –ó–≤–∏—á–∞–π–Ω–∏–π –ª–∞–π–∫
            await query.edit_message_text(
                "‚ù§Ô∏è –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ —Ü—é –∞–Ω–∫–µ—Ç—É!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="next_profile")]
                ])
            )
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫—É: {e}")
        try:
            await update.callback_query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ª–∞–π–∫—É")
        except:
            pass

async def handle_next_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—ñ' –∑ callback"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        current_index = context.user_data.get('current_index', 0)
        search_users = context.user_data.get('search_users', [])
        
        if current_index + 1 < len(search_users):
            context.user_data['current_index'] = current_index + 1
            next_user = search_users[current_index + 1]
            await show_user_profile(update, context, next_user, "üíï –†–µ–∂–∏–º –ø–æ—à—É–∫—É")
        else:
            await query.edit_message_text("üéâ –í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ –∞–Ω–∫–µ—Ç–∏!")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        try:
            await update.callback_query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏")
        except:
            pass

async def handle_like_back(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int = None):
    """–û–±—Ä–æ–±–∫–∞ –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É"""
    try:
        query = update.callback_query
        await query.answer()
        
        if user_id is None:
            callback_data = query.data
            user_id = int(callback_data.split('_')[2])
        
        from database.models import db
        current_user_id = query.from_user.id
        
        # –î–æ–¥–∞—î–º–æ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫
        db.add_like(current_user_id, user_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –º–∞—Ç—á
        if db.has_like(user_id, current_user_id):
            await query.edit_message_text(
                "üéâ –¢–µ–ø–µ—Ä —É –≤–∞—Å –º–∞—Ç—á!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíå –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data=f"message_{user_id}")],
                    [InlineKeyboardButton("üîô –î–æ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
        else:
            await query.edit_message_text("‚ù§Ô∏è –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ —Ü—é –∞–Ω–∫–µ—Ç—É!")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É: {e}")
        try:
            await update.callback_query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ª–∞–π–∫—É")
        except:
            pass

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó
async def handle_admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from database.models import db
        
        user_id = update.effective_user.id
        from config import ADMIN_ID
        
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        search_query = update.message.text
        users = db.search_users(search_query)
        
        if not users:
            await update.message.reply_text("üòî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        users_text = "üë• *–ó–Ω–∞–π–¥–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n\n"
        
        for user in users[:10]:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users_text += f"üÜî {user['user_id']} | üë§ {user['name']} | üìÖ {user['age']}\n"
        
        await update.message.reply_text(users_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–¥–º—ñ–Ω –ø–æ—à—É–∫—É: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É.")

async def handle_user_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Ä–≥ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        from database.models import db
        
        user_id = update.effective_user.id
        reported_user_id = context.user_data.get('reported_user_id')
        
        if not reported_user_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Å–∫–∞—Ä–≥–∏.")
            return
        
        report_text = update.message.text
        db.add_report(user_id, reported_user_id, report_text)
        
        await update.message.reply_text(
            "‚úÖ –°–∫–∞—Ä–≥—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –î–æ –ø–æ—à—É–∫—É", callback_data="back_to_search")]])
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–∫–∞—Ä–≥–∏: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∫–∞—Ä–≥–∏.")