from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext
from database.models import db
from keyboards.main_menu import get_main_menu
from utils.states import user_states, States
from config import ADMIN_ID
from handlers.notifications import notification_system
import logging

logger = logging.getLogger(__name__)

def format_profile_text(user_data, title=""):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
    try:
        if isinstance(user_data, dict):
            gender_display = "üë® –ß–æ–ª–æ–≤—ñ–∫" if user_data.get('gender') == 'male' else "üë© –ñ—ñ–Ω–∫–∞"
            rating = user_data.get('rating', 5.0)
            profile_text = f"""üë§ {title}

*–Ü–º'—è:* {user_data.get('first_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
*–í—ñ–∫:* {user_data.get('age', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')} —Ä–æ–∫—ñ–≤
*–°—Ç–∞—Ç—å:* {gender_display}
*–ú—ñ—Å—Ç–æ:* {user_data.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
*–¶—ñ–ª—å:* {user_data.get('goal', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
*‚≠ê –†–µ–π—Ç–∏–Ω–≥:* {rating:.1f}/10.0

*–ü—Ä–æ —Å–µ–±–µ:*
{user_data.get('bio', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}"""
        else:
            full_user_data = db.get_user_by_id(user_data[1])
            
            if full_user_data:
                first_name = full_user_data.get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
                rating = full_user_data.get('rating', 5.0)
            else:
                first_name = user_data[3] if len(user_data) > 3 and user_data[3] else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
                rating = 5.0
            
            gender_display = "üë® –ß–æ–ª–æ–≤—ñ–∫" if user_data[5] == 'male' else "üë© –ñ—ñ–Ω–∫–∞"
            profile_text = f"""üë§ {title}

*–Ü–º'—è:* {first_name}
*–í—ñ–∫:* {user_data[4]} —Ä–æ–∫—ñ–≤
*–°—Ç–∞—Ç—å:* {gender_display}
*–ú—ñ—Å—Ç–æ:* {user_data[6]}
*–¶—ñ–ª—å:* {user_data[8]}
*‚≠ê –†–µ–π—Ç–∏–Ω–≥:* {rating:.1f}/10.0

*–ü—Ä–æ —Å–µ–±–µ:*
{user_data[9] if user_data[9] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}"""
        
        return profile_text
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"

async def search_profiles(update: Update, context: CallbackContext):
    """–ü–æ—à—É–∫ –∞–Ω–∫–µ—Ç"""
    user = update.effective_user
    
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    user_data, is_complete = db.get_user_profile(user.id)
    
    if not is_complete:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å!", reply_markup=get_main_menu(user.id))
        return
    
    if not db.get_main_photo(user.id):
        await update.message.reply_text(
            "‚ùå –î–æ–¥–∞–π—Ç–µ –≥–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± —à—É–∫–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏!",
            reply_markup=get_main_menu(user.id)
        )
        return
    
    await update.message.reply_text("üîç –®—É–∫–∞—é –∞–Ω–∫–µ—Ç–∏...")
    
    random_user = db.get_random_user(user.id)
    
    if random_user:
        logger.info(f"üîç [SEARCH] –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {random_user[1]}")
        
        db.add_profile_view(user.id, random_user[1])
        
        await show_user_profile(update, context, random_user, "üíï –ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏")
        context.user_data['search_users'] = [random_user]
        context.user_data['current_index'] = 0
        context.user_data['search_type'] = 'random'
    else:
        await update.message.reply_text(
            "üòî –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n\n"
            "üí° *–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:*\n"
            "‚Ä¢ –ù–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –∞–Ω–∫–µ—Ç –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏\n"
            "‚Ä¢ –í—Å—ñ –∞–Ω–∫–µ—Ç–∏ –≤–∂–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ\n"
            "‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É",
            reply_markup=get_main_menu(user.id)
        )

async def search_by_city(update: Update, context: CallbackContext):
    """–ü–æ—à—É–∫ –∑–∞ –º—ñ—Å—Ç–æ–º"""
    user = update.effective_user
    
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    user_data, is_complete = db.get_user_profile(user.id)
    
    if not is_complete:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å!", reply_markup=get_main_menu(user.id))
        return
    
    context.user_data['waiting_for_city'] = True
    await update.message.reply_text("üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É:")

async def show_user_profile(update: Update, context: CallbackContext, user_data, title=""):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    
    current_user_data = db.get_user(user.id)
    if current_user_data and current_user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    profile_text = format_profile_text(user_data, title)
    
    if isinstance(user_data, dict):
        telegram_id = user_data.get('telegram_id')
    else:
        telegram_id = user_data[1]
    
    context.user_data['current_profile_id'] = telegram_id
    
    main_photo = db.get_main_photo(telegram_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ª–∞–π–∫—É
    context.user_data['current_profile_for_like'] = telegram_id
    
    try:
        if main_photo:
            await update.message.reply_photo(
                photo=main_photo, 
                caption=profile_text,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                profile_text,
                parse_mode='Markdown'
            )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∞–π–∫—É —Ç–∞ –¥–∞–ª—ñ
        keyboard = [
            ['‚ù§Ô∏è –õ–∞–π–∫', '‚û°Ô∏è –î–∞–ª—ñ'],
            ['üîô –ú–µ–Ω—é']
        ]
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu(user.id)
        )

async def handle_like(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫—É –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏"""
    try:
        user = update.effective_user
        
        user_data = db.get_user(user.id)
        if user_data and user_data.get('is_banned'):
            await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        target_user_id = context.user_data.get('current_profile_for_like')
        
        if not target_user_id:
            await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ª–∞–π–∫—É")
            return
        
        logger.info(f"üîç [LIKE] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –ª–∞–π–∫–∞—î {target_user_id}")
        
        # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –æ–±–º–µ–∂–µ–Ω—å
        success, message = db.add_like(user.id, target_user_id)
        
        logger.info(f"üîç [LIKE RESULT] –£—Å–ø—ñ—Ö: {success}, –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
        
        if success:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ (–º–∞—Ç—á)
            is_mutual = db.has_liked(target_user_id, user.id)
            logger.info(f"üîç [LIKE MUTUAL] –í–∑–∞—î–º–Ω–∏–π: {is_mutual}")
            
            if is_mutual:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–∞—Ç—á
                await notification_system.notify_new_match(context, user.id, target_user_id)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥—É –≤ Telegram
                matched_user = db.get_user(target_user_id)
                if matched_user:
                    username = matched_user.get('username')
                    if username:
                        await update.message.reply_text(
                            "üíï –£ –≤–∞—Å –º–∞—Ç—á! –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!\n\n"
                            f"üí¨ *–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ {matched_user['first_name']}!*\n"
                            f"Username: @{username}",
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text(
                            "üíï –£ –≤–∞—Å –º–∞—Ç—á! –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!\n\n"
                            f"‚ÑπÔ∏è *–£ {matched_user['first_name']} –Ω–µ–º–∞—î username*",
                            parse_mode='Markdown'
                        )
                else:
                    await update.message.reply_text("üíï –£ –≤–∞—Å –º–∞—Ç—á! –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!")
            else:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ª–∞–π–∫
                await notification_system.notify_new_like(context, user.id, target_user_id)
                await update.message.reply_text(f"‚ù§Ô∏è {message}")
        else:
            await update.message.reply_text(f"‚ùå {message}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫—É: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ª–∞–π–∫—É.")

async def show_next_profile(update: Update, context: CallbackContext):
    """–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å"""
    user = update.effective_user
    
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    search_users = context.user_data.get('search_users', [])
    current_index = context.user_data.get('current_index', 0)
    search_type = context.user_data.get('search_type', 'random')
    
    if not search_users:
        await search_profiles(update, context)
        return
    
    # –Ø–∫—â–æ —Ü–µ –ø–æ—à—É–∫ –∑–∞ –º—ñ—Å—Ç–æ–º, —à—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if search_type == 'city':
        if current_index < len(search_users) - 1:
            current_index += 1
            context.user_data['current_index'] = current_index
            user_data = search_users[current_index]
            
            db.add_profile_view(user.id, user_data[1])
            
            await show_user_profile(update, context, user_data, "üèôÔ∏è –ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏")
        else:
            await update.message.reply_text("‚úÖ –¶–µ –æ—Å—Ç–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∞ –≤ —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ", reply_markup=get_main_menu(user.id))
    else:
        # –î–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É - —à—É–∫–∞—î–º–æ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É
        random_user = db.get_random_user(user.id)
        if random_user:
            db.add_profile_view(user.id, random_user[1])
            
            await show_user_profile(update, context, random_user, "üíï –ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏")
            context.user_data['search_users'] = [random_user]
            context.user_data['current_index'] = 0
        else:
            await update.message.reply_text(
                "üòî –ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n\n"
                "üí° –°–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ó–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É\n"
                "‚Ä¢ –ü–æ—à—É–∫–∞—Ç–∏ –∑–∞ —ñ–Ω—à–∏–º –º—ñ—Å—Ç–æ–º\n"
                "‚Ä¢ –ó–∞—á–µ–∫–∞—Ç–∏ –ø–æ–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
                reply_markup=get_main_menu(user.id)
            )

async def show_top_users(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä —Ç–æ–ø—É"""
    user = update.effective_user
    
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    keyboard = [
        ['üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤', 'üë© –¢–æ–ø –∂—ñ–Ω–æ–∫'],
        ['üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø', 'üîô –ú–µ–Ω—é']
    ]
    
    await update.message.reply_text(
        "üèÜ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–ø—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def show_matches(update: Update, context: CallbackContext):
    """–ú–æ—ó –º–∞—Ç—á—ñ"""
    user = update.effective_user
    
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    matches = db.get_user_matches(user.id)
    
    if matches:
        await update.message.reply_text(f"üíå *–í–∞—à—ñ –º–∞—Ç—á—ñ ({len(matches)}):*", parse_mode='Markdown')
        for match in matches:
            profile_text = format_profile_text(match, "üíï –ú–ê–¢–ß!")
            main_photo = db.get_main_photo(match[1])
            
            matched_user = db.get_user(match[1])
            username = matched_user.get('username') if matched_user else None
            
            if main_photo:
                if username:
                    await update.message.reply_photo(
                        photo=main_photo,
                        caption=profile_text + f"\n\nüí¨ Username: @{username}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_photo(
                        photo=main_photo,
                        caption=profile_text + "\n\n‚ÑπÔ∏è *–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î username*",
                        parse_mode='Markdown'
                    )
            else:
                if username:
                    await update.message.reply_text(
                        profile_text + f"\n\nüí¨ Username: @{username}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        profile_text + "\n\n‚ÑπÔ∏è *–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î username*",
                        parse_mode='Markdown'
                    )
    else:
        await update.message.reply_text("üòî –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –º–∞—Ç—á—ñ–≤", reply_markup=get_main_menu(user.id))

async def show_likes(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ö—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤"""
    user = update.effective_user
    
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    likers = db.get_user_likers(user.id)
    
    if likers:
        await update.message.reply_text(f"‚ù§Ô∏è *–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏ ({len(likers)}):*", parse_mode='Markdown')
        
        for liker in likers:
            is_mutual = db.has_liked(user.id, liker[1])
            status = "üíï –ú–ê–¢–ß" if is_mutual else "‚ù§Ô∏è –õ–∞–π–∫–Ω—É–≤(–ª–∞) –≤–∞—Å"
            
            profile_text = format_profile_text(liker, status)
            main_photo = db.get_main_photo(liker[1])
            
            liked_user = db.get_user(liker[1])
            username = liked_user.get('username') if liked_user else None
            
            if main_photo:
                caption = profile_text
                if username:
                    caption += f"\n\nüí¨ Username: @{username}"
                
                await update.message.reply_photo(
                    photo=main_photo,
                    caption=caption,
                    parse_mode='Markdown'
                )
            else:
                text = profile_text
                if username:
                    text += f"\n\nüí¨ Username: @{username}"
                
                await update.message.reply_text(
                    text,
                    parse_mode='Markdown'
                )
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É, —è–∫—â–æ —â–µ –Ω–µ –º–∞—Ç—á
            if not is_mutual:
                context.user_data['current_profile_for_like'] = liker[1]
                keyboard = [
                    ['‚ù§Ô∏è –í–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫'],
                    ['üîô –ù–∞–∑–∞–¥ –¥–æ –ª–∞–π–∫—ñ–≤']
                ]
                await update.message.reply_text(
                    "–ë–∞–∂–∞—î—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫?",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
    else:
        await update.message.reply_text(
            "üòî –í–∞—Å —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–≤\n\n"
            "üí° *–ü–æ—Ä–∞–¥–∞:* –ê–∫—Ç–∏–≤–Ω—ñ—à–µ —à—É–∫–∞–π—Ç–µ –∞–Ω–∫–µ—Ç–∏ —Ç–∞ —Å—Ç–∞–≤—Ç–µ –ª–∞–π–∫–∏ - —Ü–µ –∑–±—ñ–ª—å—à–∏—Ç—å –≤–∞—à—É –≤–∏–¥–∏–º—ñ—Å—Ç—å!",
            reply_markup=get_main_menu(user.id),
            parse_mode='Markdown'
        )

async def handle_like_back(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –ª–∞–π–∫—ñ–≤"""
    try:
        user = update.effective_user
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        target_user_id = context.user_data.get('current_profile_for_like')
        
        if not target_user_id:
            await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ª–∞–π–∫—É")
            return
        
        logger.info(f"üîç [LIKE BACK] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –ª–∞–π–∫–∞—î –Ω–∞–∑–∞–¥ {target_user_id}")
        
        success, message = db.add_like(user.id, target_user_id)
        
        logger.info(f"üîç [LIKE BACK RESULT] –£—Å–ø—ñ—Ö: {success}, –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
        
        if success:
            current_user = db.get_user(user.id)
            target_user = db.get_user(target_user_id)
            
            if current_user and target_user:
                if db.has_liked(target_user_id, user.id):
                    match_text = "üéâ –£ –≤–∞—Å –Ω–æ–≤–∏–π –º–∞—Ç—á!"
                    
                    await update.message.reply_text(
                        f"{match_text}\n\nüíû –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ {target_user['first_name']}!"
                    )
                    
                    try:
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=f"üéâ –£ –≤–∞—Å –Ω–æ–≤–∏–π –º–∞—Ç—á –∑ {current_user['first_name']}!"
                        )
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id} –ø—Ä–æ –º–∞—Ç—á: {e}")
                else:
                    await update.message.reply_text(
                        "‚ù§Ô∏è –í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ª–∞–π–∫! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤–∑–∞—î–º–Ω—ñ—Å—Ç—å."
                    )
                    
                    try:
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=f"‚ù§Ô∏è –í–∞—Å –ª–∞–π–∫–Ω—É–≤(–ª–∞) {current_user['first_name']}! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ö—Ç–æ –≤–∞—Å –ª–∞–π–∫–Ω—É–≤ —É –º–µ–Ω—é."
                        )
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id} –ø—Ä–æ –ª–∞–π–∫: {e}")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            await update.message.reply_text(f"‚ùå {message}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ handle_like_back: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ª–∞–π–∫—É.")

async def handle_top_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–æ–ø—É"""
    user = update.effective_user
    
    user_data = db.get_user(user.id)
    if user_data and user_data.get('is_banned'):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    text = update.message.text
    
    if text == "üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤":
        top_users = db.get_top_users_by_rating(limit=10, gender='male')
        title = "üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤"
    elif text == "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫":
        top_users = db.get_top_users_by_rating(limit=10, gender='female')
        title = "üë© –¢–æ–ø –∂—ñ–Ω–æ–∫"
    else:
        top_users = db.get_top_users_by_rating(limit=10)
        title = "üèÜ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    
    if top_users:
        await update.message.reply_text(f"**{title}** üèÜ\n\n*–ó–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç: {len(top_users)}*", parse_mode='Markdown')
        
        for i, user_data in enumerate(top_users, 1):
            user_info = db.get_user_by_id(user_data[1])
            
            if user_info:
                first_name = user_info.get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
                rating = user_info.get('rating', 5.0)
                likes_count = user_info.get('likes_count', 0)
            else:
                first_name = user_data[3] if len(user_data) > 3 and user_data[3] else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
                rating = user_data[14] if len(user_data) > 14 else 5.0
                likes_count = user_data[12] if len(user_data) > 12 else 0
            
            profile_text = f"""üèÖ #{i} | ‚≠ê {rating:.1f} | ‚ù§Ô∏è {likes_count} –ª–∞–π–∫—ñ–≤

*–Ü–º'—è:* {first_name}
*–í—ñ–∫:* {user_data[4]} —Ä–æ–∫—ñ–≤
*–°—Ç–∞—Ç—å:* {'üë® –ß–æ–ª–æ–≤—ñ–∫' if user_data[5] == 'male' else 'üë© –ñ—ñ–Ω–∫–∞'}
*–ú—ñ—Å—Ç–æ:* {user_data[6]}
*–¶—ñ–ª—å:* {user_data[8]}
*‚≠ê –†–µ–π—Ç–∏–Ω–≥:* {rating:.1f}/10.0

*–ü—Ä–æ —Å–µ–±–µ:*
{user_data[9] if user_data[9] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}"""
            
            main_photo = db.get_main_photo(user_data[1])
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ª–∞–π–∫—É
            context.user_data['current_profile_for_like'] = user_data[1]
            
            if main_photo:
                await update.message.reply_photo(
                    photo=main_photo,
                    caption=profile_text,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(profile_text, parse_mode='Markdown')
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é –ª–∞–π–∫—É –¥–ª—è —Ç–æ–ø—É
            keyboard = [
                ['‚ù§Ô∏è –õ–∞–π–∫'],
                ['‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —É —Ç–æ–ø—ñ']
            ]
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        
        keyboard = [
            ['üë® –¢–æ–ø —á–æ–ª–æ–≤—ñ–∫—ñ–≤', 'üë© –¢–æ–ø –∂—ñ–Ω–æ–∫'],
            ['üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç–æ–ø', 'üîô –ú–µ–Ω—é']
        ]
        await update.message.reply_text(
            "üèÜ –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"üòî –©–µ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É {title}\n\n"
            f"üí° *–ü–æ—Ä–∞–¥–∞:* –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ–≤–Ω—ñ—Å—Ç—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ, —â–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ —Ç–æ–ø!",
            reply_markup=get_main_menu(user.id)
        )