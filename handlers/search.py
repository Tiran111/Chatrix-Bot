from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.models import db
from keyboards.main_menu import get_main_menu, get_search_navigation
from utils.states import user_states, States
from handlers.notifications import notification_system

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é - –û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –ó –†–ï–ô–¢–ò–ù–ì–û–ú
def format_profile_text(user_data, title=""):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
    if isinstance(user_data, dict):
        # –Ø–∫—â–æ user_data - —Å–ª–æ–≤–Ω–∏–∫
        gender_display = "üë® –ß–æ–ª–æ–≤—ñ–∫" if user_data.get('gender') == 'male' else "üë© –ñ—ñ–Ω–∫–∞"
        rating = user_data.get('rating', 5.0)
        profile_text = f"""üë§ {title}

*–Ü–º'—è:* {user_data.get('first_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}
*–í—ñ–∫:* {user_data.get('age', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
*–°—Ç–∞—Ç—å:* {gender_display}
*–ú—ñ—Å—Ç–æ:* {user_data.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
*–¶—ñ–ª—å:* {user_data.get('goal', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
*–ü—Ä–æ —Å–µ–±–µ:* {user_data.get('bio', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
*–†–µ–π—Ç–∏–Ω–≥:* ‚≠ê {rating:.1f}/10.0

üíå –ù–∞—Ç–∏—Å–Ω–∏ /like —â–æ–± –ª–∞–π–∫–Ω—É—Ç–∏ –∞–±–æ /dislike —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"""
    else:
        # –Ø–∫—â–æ user_data - –∫–æ—Ä—Ç–µ–∂ (–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö)
        gender_display = "üë® –ß–æ–ª–æ–≤—ñ–∫" if user_data[5] == 'male' else "üë© –ñ—ñ–Ω–∫–∞"
        rating = user_data[14] if len(user_data) > 14 else 5.0  # –Ü–Ω–¥–µ–∫—Å —Ä–µ–π—Ç–∏–Ω–≥—É
        profile_text = f"""üë§ {title}

*–Ü–º'—è:* {user_data[3] if user_data[3] else '–ù–µ–≤—ñ–¥–æ–º–æ'}
*–í—ñ–∫:* {user_data[4] if user_data[4] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
*–°—Ç–∞—Ç—å:* {gender_display}
*–ú—ñ—Å—Ç–æ:* {user_data[6] if user_data[6] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
*–¶—ñ–ª—å:* {user_data[8] if user_data[8] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
*–ü—Ä–æ —Å–µ–±–µ:* {user_data[9] if user_data[9] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
*–†–µ–π—Ç–∏–Ω–≥:* ‚≠ê {rating:.1f}/10.0

üíå –ù–∞—Ç–∏—Å–Ω–∏ /like —â–æ–± –ª–∞–π–∫–Ω—É—Ç–∏ –∞–±–æ /dislike —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"""
    
    return profile_text

async def show_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data, title=""):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        chat_id = update.effective_chat.id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if isinstance(user_data, dict):
            telegram_id = user_data.get('telegram_id')
        else:
            telegram_id = user_data[1]  # –Ü–Ω–¥–µ–∫—Å telegram_id
        
        photos = db.get_profile_photos(telegram_id)
        
        if photos:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photos[0],
                caption=format_profile_text(user_data, title),
                parse_mode='Markdown',
                reply_markup=get_search_navigation()
            )
            
            # –Ø–∫—â–æ —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ó—Ö –æ–∫—Ä–µ–º–æ
            for i, photo in enumerate(photos[1:], 1):
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=f"–§–æ—Ç–æ {i+1}"
                )
        else:
            # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î
            await context.bot.send_message(
                chat_id=chat_id,
                text=format_profile_text(user_data, title),
                parse_mode='Markdown',
                reply_markup=get_search_navigation()
            )
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def search_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—à—É–∫ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        user, is_completed = db.get_user_profile(user_id)
        if not is_completed:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å!",
                reply_markup=get_main_menu()
            )
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        random_user = db.get_random_user(user_id)
        
        if random_user:
            user_states[user_id] = {
                'current_profile': random_user,
                'search_type': 'random'
            }
            
            await show_user_profile(update, context, random_user, "–ó–Ω–∞–π–æ–º—Ç–µ—Å—å!")
        else:
            await update.message.reply_text(
                "‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def search_by_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—à—É–∫ –∑–∞ –º—ñ—Å—Ç–æ–º"""
    try:
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        user, is_completed = db.get_user_profile(user_id)
        if not is_completed:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å!",
                reply_markup=get_main_menu()
            )
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data = db.get_user(user_id)
        if user_data and user_data.get('city'):
            city = user_data.get('city')
            await update.message.reply_text(f"üîç –®—É–∫–∞—î–º–æ –≤ –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ: {city}")
            
            # –ü–æ—à—É–∫ —É –º—ñ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            users = db.get_users_by_city(city, user_id)
            
            if users:
                user_states[user_id] = {
                    'current_profile': users[0],
                    'search_results': users,
                    'current_index': 0,
                    'search_type': 'city'
                }
                
                await show_user_profile(update, context, users[0], f"–ó–Ω–∞–π–æ–º—Ç–µ—Å—å —É –º—ñ—Å—Ç—ñ {city}!")
            else:
                await update.message.reply_text(
                    f"‚ùå –£ –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ {city} –ø–æ–∫–∏ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
                    reply_markup=get_main_menu()
                )
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—à–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –º—ñ—Å—Ç–æ. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –ø–æ–≤–Ω—ñ—Å—Ç—é.",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def search_by_city_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É"""
    try:
        user_id = update.effective_user.id
        city = update.message.text
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        user, is_completed = db.get_user_profile(user_id)
        if not is_completed:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å!",
                reply_markup=get_main_menu()
            )
            return
        
        await update.message.reply_text(f"üîç –®—É–∫–∞—î–º–æ –≤ –º—ñ—Å—Ç—ñ: {city}")
        
        # –ü–æ—à—É–∫ —É –≤–∫–∞–∑–∞–Ω–æ–º—É –º—ñ—Å—Ç—ñ
        users = db.get_users_by_city(city, user_id)
        
        if users:
            user_states[user_id] = {
                'current_profile': users[0],
                'search_results': users,
                'current_index': 0,
                'search_type': 'city_input'
            }
            
            await show_user_profile(update, context, users[0], f"–ó–Ω–∞–π–æ–º—Ç–µ—Å—å —É –º—ñ—Å—Ç—ñ {city}!")
        else:
            await update.message.reply_text(
                f"‚ùå –£ –º—ñ—Å—Ç—ñ {city} –ø–æ–∫–∏ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å —É –ø–æ—à—É–∫—É"""
    try:
        user_id = update.effective_user.id
        state = user_states.get(user_id, {})
        
        if not state or 'search_type' not in state:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –ø–æ—à—É–∫!",
                reply_markup=get_main_menu()
            )
            return
        
        search_type = state.get('search_type')
        
        if search_type == 'random':
            # –î–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É - –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–æ–≥–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            random_user = db.get_random_user(user_id)
            
            if random_user:
                user_states[user_id]['current_profile'] = random_user
                await show_user_profile(update, context, random_user, "–ó–Ω–∞–π–æ–º—Ç–µ—Å—å!")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É.",
                    reply_markup=get_main_menu()
                )
        
        elif search_type in ['city', 'city_input', 'advanced']:
            # –î–ª—è –ø–æ—à—É–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
            results = state.get('search_results', [])
            current_index = state.get('current_index', 0)
            
            if current_index < len(results) - 1:
                next_index = current_index + 1
                user_states[user_id]['current_index'] = next_index
                user_states[user_id]['current_profile'] = results[next_index]
                
                await show_user_profile(update, context, results[next_index], "–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å")
            else:
                await update.message.reply_text(
                    "‚ùå –¶–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —É –ø–æ—à—É–∫—É.",
                    reply_markup=get_search_navigation()
                )
        
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ—à—É–∫—É.",
                reply_markup=get_main_menu()
            )
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def previous_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —É –ø–æ—à—É–∫—É"""
    try:
        user_id = update.effective_user.id
        state = user_states.get(user_id, {})
        
        if not state or 'search_type' not in state:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø–æ—á–Ω—ñ—Ç—å –ø–æ—à—É–∫!",
                reply_markup=get_main_menu()
            )
            return
        
        search_type = state.get('search_type')
        
        if search_type in ['city', 'city_input', 'advanced']:
            results = state.get('search_results', [])
            current_index = state.get('current_index', 0)
            
            if current_index > 0:
                prev_index = current_index - 1
                user_states[user_id]['current_index'] = prev_index
                user_states[user_id]['current_profile'] = results[prev_index]
                
                await show_user_profile(update, context, results[prev_index], "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
            else:
                await update.message.reply_text(
                    "‚ùå –¶–µ –ø–µ—Ä—à–∏–π –ø—Ä–æ—Ñ—ñ–ª—å —É –ø–æ—à—É–∫—É.",
                    reply_markup=get_search_navigation()
                )
        else:
            await update.message.reply_text(
                "‚ùå –î–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤.",
                reply_markup=get_search_navigation()
            )
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫—É"""
    try:
        user_id = update.effective_user.id
        state = user_states.get(user_id, {})
        
        if not state or 'current_profile' not in state:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ª–∞–π–∫—É!",
                reply_markup=get_main_menu()
            )
            return
        
        current_profile = state['current_profile']
        
        if isinstance(current_profile, dict):
            to_user_id = current_profile.get('telegram_id')
        else:
            to_user_id = current_profile[1]  # –Ü–Ω–¥–µ–∫—Å telegram_id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ª–∞–π–∫–∞—î–º–æ —Å–∞–º—ñ —Å–µ–±–µ
        if user_id == to_user_id:
            await update.message.reply_text(
                "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–Ω—É—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ!",
                reply_markup=get_search_navigation()
            )
            return
        
        # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫
        success, message = db.add_like(user_id, to_user_id)
        
        if success:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫
            if db.has_liked(to_user_id, user_id):
                match_message = "üéâ –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è."
                await update.message.reply_text(match_message)
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                await notification_system.send_match_notification(context.bot, user_id, to_user_id)
            
            await update.message.reply_text(
                f"‚úÖ {message}",
                reply_markup=get_search_navigation()
            )
        else:
            await update.message.reply_text(
                f"‚ùå {message}",
                reply_markup=get_search_navigation()
            )
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–∞–π–∫—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–∞–π–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def handle_dislike(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –¥—ñ–∑–ª–∞–π–∫—É (–ø—Ä–æ–ø—É—Å–∫)"""
    try:
        user_id = update.effective_user.id
        
        await update.message.reply_text(
            "üëå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ",
            reply_markup=get_search_navigation()
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        await next_profile(update, context)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∑–ª–∞–π–∫—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def advanced_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"""
    try:
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        user, is_completed = db.get_user_profile(user_id)
        if not is_completed:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å!",
                reply_markup=get_main_menu()
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É
        user_states[user_id] = {
            'state': States.ADVANCED_SEARCH_GENDER
        }
        
        await update.message.reply_text(
            "üîç *–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫*\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup([
                ["üë® –ß–æ–ª–æ–≤—ñ–∫–∏", "üë© –ñ—ñ–Ω–∫–∏"],
                ["üë• –í—Å—ñ", "üîô –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True)
        )
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ–Ω—é —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def advanced_search_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"""
    try:
        user_id = update.effective_user.id
        gender_choice = update.message.text
        
        gender_map = {
            "üë® –ß–æ–ª–æ–≤—ñ–∫–∏": "male",
            "üë© –ñ—ñ–Ω–∫–∏": "female",
            "üë• –í—Å—ñ": "all"
        }
        
        if gender_choice not in gender_map:
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:",
                reply_markup=ReplyKeyboardMarkup([
                    ["üë® –ß–æ–ª–æ–≤—ñ–∫–∏", "üë© –ñ—ñ–Ω–∫–∏"],
                    ["üë• –í—Å—ñ", "üîô –ù–∞–∑–∞–¥"]
                ], resize_keyboard=True)
            )
            return
        
        if gender_choice == "üîô –ù–∞–∑–∞–¥":
            user_states[user_id] = {}
            await update.message.reply_text(
                "üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                reply_markup=get_main_menu()
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Å—Ç–∞—Ç—ñ
        context.user_data['advanced_search_gender'] = gender_map[gender_choice]
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
        user_states[user_id] = {
            'state': States.ADVANCED_SEARCH_CITY
        }
        
        await update.message.reply_text(
            "üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):",
            reply_markup=ReplyKeyboardMarkup([
                ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "üîô –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True)
        )
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def advanced_search_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"""
    try:
        user_id = update.effective_user.id
        city_input = update.message.text
        
        if city_input == "üîô –ù–∞–∑–∞–¥":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ
            user_states[user_id] = {
                'state': States.ADVANCED_SEARCH_GENDER
            }
            
            await update.message.reply_text(
                "üîç –û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:",
                reply_markup=ReplyKeyboardMarkup([
                    ["üë® –ß–æ–ª–æ–≤—ñ–∫–∏", "üë© –ñ—ñ–Ω–∫–∏"],
                    ["üë• –í—Å—ñ", "üîô –ù–∞–∑–∞–¥"]
                ], resize_keyboard=True)
            )
            return
        
        if city_input == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
            city = None
        else:
            city = city_input
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—Ç–æ
        context.user_data['advanced_search_city'] = city
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ü—ñ–ª—ñ
        user_states[user_id] = {
            'state': States.ADVANCED_SEARCH_GOAL
        }
        
        await update.message.reply_text(
            "üéØ –û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=ReplyKeyboardMarkup([
                ["üíï –°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "üí¨ –î—Ä—É–∂–±–∞"],
                ["üéâ –ù–µ—Å–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "ü§∑ –ü–æ–∫–∏ –Ω–µ –∑–Ω–∞—é"],
                ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "üîô –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True)
        )
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

async def advanced_search_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ü—ñ–ª—ñ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"""
    try:
        user_id = update.effective_user.id
        goal_input = update.message.text
        
        goal_map = {
            "üíï –°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏": "serious",
            "üí¨ –î—Ä—É–∂–±–∞": "friendship", 
            "üéâ –ù–µ—Å–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏": "casual",
            "ü§∑ –ü–æ–∫–∏ –Ω–µ –∑–Ω–∞—é": "unknown",
            "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏": None
        }
        
        if goal_input == "üîô –ù–∞–∑–∞–¥":
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
            user_states[user_id] = {
                'state': States.ADVANCED_SEARCH_CITY
            }
            
            await update.message.reply_text(
                "üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):",
                reply_markup=ReplyKeyboardMarkup([
                    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "üîô –ù–∞–∑–∞–¥"]
                ], resize_keyboard=True)
            )
            return
        
        if goal_input not in goal_map:
            await update.message.reply_text(
                "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:",
                reply_markup=ReplyKeyboardMarkup([
                    ["üíï –°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "üí¨ –î—Ä—É–∂–±–∞"],
                    ["üéâ –ù–µ—Å–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "ü§∑ –ü–æ–∫–∏ –Ω–µ –∑–Ω–∞—é"],
                    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "üîô –ù–∞–∑–∞–¥"]
                ], resize_keyboard=True)
            )
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É
        gender = context.user_data.get('advanced_search_gender', 'all')
        city = context.user_data.get('advanced_search_city')
        goal = goal_map[goal_input]
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫
        users = db.search_users_advanced(user_id, gender, city, goal)
        
        if users:
            user_states[user_id] = {
                'current_profile': users[0],
                'search_results': users,
                'current_index': 0,
                'search_type': 'advanced'
            }
            
            # –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–æ—à—É–∫—É
            search_desc = "üîç –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫\n"
            search_desc += f"–°—Ç–∞—Ç—å: {gender if gender != 'all' else '–í—Å—ñ'}\n"
            search_desc += f"–ú—ñ—Å—Ç–æ: {city if city else '–ë—É–¥—å-—è–∫–µ'}\n" 
            search_desc += f"–¶—ñ–ª—å: {goal_input if goal_input != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' else '–ë—É–¥—å-—è–∫–∞'}"
            
            await show_user_profile(update, context, users[0], search_desc)
        else:
            await update.message.reply_text(
                "‚ùå –ó–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
                reply_markup=get_main_menu()
            )
        
        # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        context.user_data.pop('advanced_search_gender', None)
        context.user_data.pop('advanced_search_city', None)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ü—ñ–ª—ñ: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )