from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler
import logging
from datetime import datetime
from database.models import db

logger = logging.getLogger(__name__)

# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à)
ADMIN_ID = 8330660486  # –í–∞—à Telegram ID

async def admin_panel(update: Update, context: CallbackContext):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ", callback_data="admin_banned")],
        [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ë–î", callback_data="admin_update_db")],
        [InlineKeyboardButton("üóëÔ∏è –°–∫–∏–Ω—É—Ç–∏ –ë–î", callback_data="admin_reset_db")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫", callback_data="admin_search")],
        [InlineKeyboardButton("üîÑ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö", callback_data="admin_unban_all")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def admin_button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if user.id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    
    data = query.data
    
    if data == "admin_stats":
        await show_statistics(query, context)
    elif data == "admin_users":
        await show_users_list(query, context)
    elif data == "admin_banned":
        await show_banned_users(query, context)
    elif data == "admin_update_db":
        await update_database(query, context)
    elif data == "admin_reset_db":
        await confirm_reset_database(query, context)
    elif data == "admin_search":
        await start_search(query, context)
    elif data == "admin_unban_all":
        await unban_all_users(query, context)
    elif data.startswith("user_detail_"):
        user_id = int(data.split("_")[2])
        await show_user_detail(query, context, user_id)
    elif data.startswith("ban_user_"):
        user_id = int(data.split("_")[2])
        await ban_user_action(query, context, user_id)
    elif data.startswith("unban_user_"):
        user_id = int(data.split("_")[2])
        await unban_user_action(query, context, user_id)
    elif data == "confirm_reset":
        await reset_database(query, context)
    elif data == "cancel_reset":
        await query.edit_message_text("‚ùå –°–∫–∏–¥–∞–Ω–Ω—è –ë–î —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

async def show_statistics(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    male, female, total_active, goals_stats = db.get_statistics()
    total_users = db.get_users_count()
    
    stats_text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*
‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {total_active}
‚Ä¢ –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
‚Ä¢ –ñ—ñ–Ω–æ–∫: {female}

üéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*
"""
    
    for goal, count in goals_stats:
        if goal:
            stats_text += f"‚Ä¢ {goal}: {count}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_users_list(query, context, page=0):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    users = db.get_all_active_users()
    users_per_page = 10
    total_pages = (len(users) + users_per_page - 1) // users_per_page
    
    if not users:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=reply_markup)
        return
    
    start_idx = page * users_per_page
    end_idx = start_idx + users_per_page
    page_users = users[start_idx:end_idx]
    
    text = f"üë• *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤* (—Å—Ç–æ—Ä. {page + 1}/{total_pages})\n\n"
    
    keyboard = []
    for user in page_users:
        user_info = f"{user[3]} (ID: {user[1]})"
        if user[2]:  # username
            user_info += f" @{user[2]}"
        
        keyboard.append([InlineKeyboardButton(
            user_info, 
            callback_data=f"user_detail_{user[1]}"
        )])
    
    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"users_page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"users_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_banned_users(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    users = db.get_banned_users()
    
    if not users:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚úÖ –ù–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", reply_markup=reply_markup)
        return
    
    text = "üö´ *–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n\n"
    
    keyboard = []
    for user in users:
        user_info = f"{user[3]} (ID: {user[1]})"
        if user[2]:
            user_info += f" @{user[2]}"
        
        keyboard.append([InlineKeyboardButton(
            f"üîì {user_info}", 
            callback_data=f"unban_user_{user[1]}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_user_detail(query, context, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = db.get_user_by_id(user_id)
    
    if not user:
        await query.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    text = f"""üë§ *–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è*

üÜî ID: `{user['telegram_id']}`
üë§ –Ü–º'—è: {user['first_name']}
üîó Username: @{user['username'] if user['username'] else '–ù–µ–º–∞—î'}
üëÅÔ∏è –°—Ç–∞—Ç—å: {user['gender'] if user['gender'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üéÇ –í—ñ–∫: {user['age'] if user['age'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üèôÔ∏è –ú—ñ—Å—Ç–æ: {user['city'] if user['city'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üéØ –¶—ñ–ª—å: {user['goal'] if user['goal'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚ù§Ô∏è –õ–∞–π–∫—ñ–≤: {user['likes_count']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user['rating']}
üì∏ –§–æ—Ç–æ: {'‚úÖ' if user['has_photo'] else '‚ùå'}
üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π' if user['is_banned'] else '–ê–∫—Ç–∏–≤–Ω–∏–π'}
üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {user['created_at']}
üïê –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['last_active'] if user['last_active'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
"""
    
    keyboard = []
    if not user['is_banned']:
        keyboard.append([InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"ban_user_{user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"unban_user_{user_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def ban_user_action(query, context, user_id):
    """–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if db.ban_user(user_id):
        await query.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!", show_alert=True)
        await show_user_detail(query, context, user_id)
    else:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è!", show_alert=True)

async def unban_user_action(query, context, user_id):
    """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if db.unban_user(user_id):
        await query.answer("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!", show_alert=True)
        if query.data.startswith("unban_user_"):
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö
            await show_banned_users(query, context)
        else:
            await show_user_detail(query, context, user_id)
    else:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è!", show_alert=True)

async def unban_all_users(query, context):
    """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if db.unban_all_users():
        await query.answer("‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ!", show_alert=True)
        await admin_panel(update=Update(update_id=query.update_id, message=query.message), context=context)
    else:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è!", show_alert=True)

async def update_database(query, context):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    await query.edit_message_text("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    result = db.cleanup_old_data()
    
    if result:
        stats_text = f"""‚úÖ *–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!*

üóëÔ∏è *–í–∏–¥–∞–ª–µ–Ω–æ:*
‚Ä¢ –ù–µ–ø–æ–≤–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {result['deleted_incomplete']}
‚Ä¢ –°—Ç–∞—Ä–∏—Ö –ª–∞–π–∫—ñ–≤: {result['deleted_likes']}

üìà *–û–Ω–æ–≤–ª–µ–Ω–æ:*
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {result['updated_ratings']}"""

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö", reply_markup=reply_markup)

async def confirm_reset_database(query, context):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, —Å–∫–∏–Ω—É—Ç–∏", callback_data="confirm_reset")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_reset")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ö†Ô∏è *–£–í–ê–ì–ê!*\n\n"
        "–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–∏–Ω—É—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö?\n"
        "–¶—è –¥—ñ—è:\n"
        "‚Ä¢ –í–∏–¥–∞–ª–∏—Ç—å –í–°–Ü–• –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        "‚Ä¢ –í–∏–¥–∞–ª–∏—Ç—å –í–°–Ü –ª–∞–π–∫–∏ —Ç–∞ –º–∞—Ç—á—ñ\n"
        "‚Ä¢ –í–∏–¥–∞–ª–∏—Ç—å –í–°–Ü —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—É —á–∏—Å—Ç—É –±–∞–∑—É –¥–∞–Ω–∏—Ö\n\n"
        "–¶—é –¥—ñ—é –ù–ï–ú–û–ñ–õ–ò–í–û —Å–∫–∞—Å—É–≤–∞—Ç–∏!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def reset_database(query, context):
    """–°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    await query.edit_message_text("üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    if db.reset_database():
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–∞!", reply_markup=reply_markup)
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!", reply_markup=reply_markup)

async def start_search(query, context):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    context.user_data['awaiting_search'] = True
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîç *–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*\n\n"
        "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —ñ–º'—è –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_search(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    if not context.user_data.get('awaiting_search'):
        return
    
    search_query = update.message.text.strip()
    context.user_data['awaiting_search'] = False
    
    results = db.search_user(search_query)
    
    if not results:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await admin_panel(update, context)
        return
    
    if len(results) == 1:
        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –ø–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ
        user_id = results[0][1]
        await show_user_detail_simple(update, context, user_id)
    else:
        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ - –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫
        text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{search_query}':*\n\n"
        
        keyboard = []
        for user in results[:10]:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            user_info = f"{user[3]} (ID: {user[1]})"
            if user[2]:
                user_info += f" @{user[2]}"
            
            keyboard.append([InlineKeyboardButton(
                user_info, 
                callback_data=f"user_detail_{user[1]}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_user_detail_simple(update: Update, context: CallbackContext, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–æ—Å—Ç–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –ø–æ—à—É–∫—É)"""
    user = db.get_user_by_id(user_id)
    
    if not user:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    text = f"""üë§ *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É*

üÜî ID: `{user['telegram_id']}`
üë§ –Ü–º'—è: {user['first_name']}
üîó Username: @{user['username'] if user['username'] else '–ù–µ–º–∞—î'}
üëÅÔ∏è –°—Ç–∞—Ç—å: {user['gender'] if user['gender'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üéÇ –í—ñ–∫: {user['age'] if user['age'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üèôÔ∏è –ú—ñ—Å—Ç–æ: {user['city'] if user['city'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üéØ –¶—ñ–ª—å: {user['goal'] if user['goal'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚ù§Ô∏è –õ–∞–π–∫—ñ–≤: {user['likes_count']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user['rating']}
üì∏ –§–æ—Ç–æ: {'‚úÖ' if user['has_photo'] else '‚ùå'}
üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π' if user['is_banned'] else '–ê–∫—Ç–∏–≤–Ω–∏–π'}
"""
    
    keyboard = []
    if not user['is_banned']:
        keyboard.append([InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"ban_user_{user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üîì –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"unban_user_{user_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
async def handle_navigation(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("users_page_"):
        page = int(data.split("_")[2])
        await show_users_list(query, context, page)
    elif data == "admin_back":
        await admin_panel(update=Update(update_id=query.update_id, message=query.message), context=context)

def setup_admin_handlers(application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(admin_button_handler, pattern="^admin_"))
    application.add_handler(CallbackQueryHandler(handle_navigation, pattern="^(users_page_|admin_back)"))
    application.add_handler(CallbackQueryHandler(ban_user_action, pattern="^ban_user_"))
    application.add_handler(CallbackQueryHandler(unban_user_action, pattern="^unban_user_"))
    application.add_handler(CallbackQueryHandler(show_user_detail, pattern="^user_detail_"))
    application.add_handler(CallbackQueryHandler(confirm_reset_database, pattern="^admin_reset_db"))
    application.add_handler(CallbackQueryHandler(reset_database, pattern="^confirm_reset"))
    application.add_handler(CallbackQueryHandler(cancel_reset_database, pattern="^cancel_reset"))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –¥–ª—è –ø–æ—à—É–∫—É
    application.add_handler(CallbackQueryHandler(start_search, pattern="^admin_search$"))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–æ—à—É–∫—É
    from telegram.ext import MessageHandler, filters
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search))