from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database.models import db
from keyboards.main_menu import get_main_menu, get_admin_menu, get_cancel_keyboard
from utils.states import States, user_states
from config import ADMIN_ID
import logging
import time

logger = logging.getLogger(__name__)

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", reply_markup=get_main_menu(user.id))
        return
    
    stats = db.get_statistics()
    male, female, total_active, goals_stats = stats
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = db.get_users_count()
    banned_users = len(db.get_banned_users())
    
    stats_text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–Ω–∫–µ—Ç: {total_active}
üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}
üë® –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
üë© –ñ—ñ–Ω–æ–∫: {female}"""

    if goals_stats:
        stats_text += "\n\nüéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*"
        for goal, count in goals_stats:
            stats_text += f"\n‚Ä¢ {goal}: {count}"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')
    await update.message.reply_text("üëë *–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_menu(), parse_mode='Markdown')

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    text = update.message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_admin_panel(update, context)
    
    elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
        await show_users_management(update, context)
    
    elif text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞":
        await start_broadcast(update, context)
    
    elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É":
        await update_database(update, context)
    
    elif text == "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è":
        await show_ban_management(update, context)
    
    elif text == "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_detailed_stats(update, context)
    
    elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ":
        await show_admin_panel(update, context)

async def show_users_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    user = update.effective_user
    stats = db.get_statistics()
    male, female, total_active, goals_stats = stats
    
    users_text = f"""üë• *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {db.get_users_count()}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {total_active}
‚Ä¢ –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
‚Ä¢ –ñ—ñ–Ω–æ–∫: {female}

‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"""
    
    keyboard = [
        ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"],
        ["üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"],
        ["üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]
    ]
    
    await update.message.reply_text(users_text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True), parse_mode='Markdown')

async def handle_users_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    text = update.message.text
    
    if text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
        await show_users_list(update, context)
    
    elif text == "üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
        await start_user_search(update, context)
    
    elif text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏":
        await start_ban_user(update, context)
    
    elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏":
        await start_unban_user(update, context)
    
    elif text == "üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è":
        await start_send_message(update, context)

async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    user = update.effective_user
    users = db.get_all_active_users(user.id)
    
    if not users:
        await update.message.reply_text("üòî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_admin_menu())
        return
    
    users_text = "üìã *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
    for i, user_data in enumerate(users[:15], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 15
        user_name = user_data[3] if len(user_data) > 3 else "–ù–µ–≤—ñ–¥–æ–º–æ"
        user_id = user_data[1] if len(user_data) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
        is_banned = user_data[13] if len(user_data) > 13 else False
        
        status = "üö´" if is_banned else "‚úÖ"
        users_text += f"{i}. {status} {user_name} (ID: `{user_id}`)\n"
    
    if len(users) > 15:
        users_text += f"\n... —Ç–∞ —â–µ {len(users) - 15} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    
    await update.message.reply_text(users_text, parse_mode='Markdown')
    await show_users_management(update, context)

async def start_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_SEARCH_USER
    await update.message.reply_text(
        "üîç –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —ñ–º'—è –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=get_cancel_keyboard()
    )

async def start_ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_BAN_USER
    await update.message.reply_text(
        "üö´ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard()
    )

async def start_unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_UNBAN_USER
    await update.message.reply_text(
        "‚úÖ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard()
    )

async def start_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_SEND_MESSAGE
    await update.message.reply_text(
        "üìß –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard()
    )

async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ - –°–ü–†–û–©–ï–ù–ê –í–ï–†–°–Ü–Ø"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    total_users = db.get_users_count()
    
    await update.message.reply_text(
        f"üì¢ *–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å*\n\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–µ—Ä–∂—É–≤–∞—á—ñ–≤: {total_users}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode='Markdown'
    )

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ - –°–ü–†–û–©–ï–ù–ê –í–ï–†–°–Ü–Ø"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    text = update.message.text
    
    print(f"üîß [BROADCAST] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{text}'")
    
    if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞", reply_markup=get_admin_menu())
        return
    
    # –í—ñ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    total_users = db.get_users_count()
    
    keyboard = [["‚úÖ –¢–∞–∫, –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", "‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏"]]
    await update.message.reply_text(
        f"üì¢ *–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*\n\n{text}\n\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–µ—Ä–∂—É–≤–∞—á—ñ–≤: {total_users}\n"
        f"*–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Ä–æ–∑—Å–∏–ª–∫—É?*",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode='Markdown'
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    context.user_data['broadcast_message'] = text

async def confirm_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ - –°–ü–†–û–©–ï–ù–ê –í–ï–†–°–Ü–Ø"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    text = update.message.text
    broadcast_message = context.user_data.get('broadcast_message')
    
    print(f"üîß [CONFIRM_BROADCAST] –¢–µ–∫—Å—Ç: '{text}', –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{broadcast_message}'")
    
    if text == "‚úÖ –¢–∞–∫, –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏" and broadcast_message:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        all_users = db.get_all_users()
        total_users = len(all_users)
        sent_count = 0
        failed_count = 0
        
        print(f"üîß [BROADCAST] –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è {total_users} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
        progress_msg = await update.message.reply_text("üîÑ *–†–æ–∑–ø–æ—á–∞—Ç–æ —Ä–æ–∑—Å–∏–ª–∫—É...*\n\nüìä –°—Ç–∞—Ç—É—Å: 0%", parse_mode='Markdown')
        
        for i, user_id in enumerate(all_users):
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–¥–º—ñ–Ω–∞
                if user_id == ADMIN_ID:
                    continue
                    
                print(f"üîß [BROADCAST] –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ *–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{broadcast_message}",
                    parse_mode='Markdown'
                )
                sent_count += 1
                print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–±–æ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É
                if i % 5 == 0 or i == total_users - 1:
                    progress = int((i + 1) / total_users * 100)
                    try:
                        await progress_msg.edit_text(
                            f"üîÑ *–†–æ–∑—Å–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ...*\n\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {progress}%\n"
                            f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {failed_count}",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: {e}")
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä
                time.sleep(0.2)
                
            except Exception as e:
                failed_count += 1
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å
        try:
            await progress_msg.delete()
        except:
            pass
        
        success_rate = (sent_count / total_users * 100) if total_users > 0 else 0
        
        result_text = f"""üéâ *–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:*
‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {failed_count}
üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%"""
        
        await update.message.reply_text(
            result_text,
            reply_markup=get_admin_menu(),
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('broadcast_message', None)
    
    else:
        await update.message.reply_text("‚ùå –†–æ–∑—Å–∏–ª–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞", reply_markup=get_admin_menu())
        context.user_data.pop('broadcast_message', None)

async def update_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    user = update.effective_user
    
    progress_msg = await update.message.reply_text("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
    cleaned = db.cleanup_old_data()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    stats = db.get_statistics()
    total_users = db.get_users_count()
    
    await progress_msg.delete()
    
    await update.message.reply_text(
        f"‚úÖ *–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!*\n\n"
        f"üìä *–ü—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:*\n"
        f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats[2]}\n"
        f"üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö: {'–¢–∞–∫' if cleaned else '–ù—ñ'}",
        parse_mode='Markdown',
        reply_markup=get_admin_menu()
    )

async def show_ban_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º"""
    banned_users = db.get_banned_users()
    
    ban_text = f"""üö´ *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(banned_users)}

‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"""
    
    keyboard = [
        ["üîç –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üÜî –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ ID"],
        ["üìß –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö"],
        ["üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]
    ]
    
    await update.message.reply_text(ban_text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True), parse_mode='Markdown')

async def handle_ban_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    text = update.message.text
    
    if text == "üîç –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö":
        await show_banned_users(update, context)
    
    elif text == "üÜî –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ ID":
        await start_ban_by_id(update, context)
    
    elif text == "üìß –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º":
        await start_ban_by_message(update, context)
    
    elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö":
        await unban_all_users(update, context)

async def show_banned_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    banned_users = db.get_banned_users()
    
    if not banned_users:
        await update.message.reply_text("üòä –ù–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", reply_markup=get_admin_menu())
        return
    
    ban_text = "üö´ *–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n\n"
    for i, user_data in enumerate(banned_users, 1):
        user_id = user_data[1] if len(user_data) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
        user_name = user_data[3] if len(user_data) > 3 else "–ù–µ–≤—ñ–¥–æ–º–æ"
        ban_text += f"{i}. {user_name} (ID: `{user_id}`)\n"
    
    await update.message.reply_text(ban_text, parse_mode='Markdown')
    await show_ban_management(update, context)

async def start_ban_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞ ID"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_BAN_BY_ID
    await update.message.reply_text(
        "üÜî –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard()
    )

async def start_ban_by_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_BAN_BY_MESSAGE
    await update.message.reply_text(
        "üìß –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏:",
        reply_markup=get_cancel_keyboard()
    )

async def unban_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    user = update.effective_user
    db.unban_all_users()
    await update.message.reply_text(
        "‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ!",
        reply_markup=get_admin_menu()
    )

async def show_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user = update.effective_user
    
    stats = db.get_statistics()
    male, female, total_active, goals_stats = stats
    total_users = db.get_users_count()
    banned_users = len(db.get_banned_users())
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—Ç–∞–º–∏ (—Å–ø—Ä–æ—â–µ–Ω–æ)
    stats_text = f"""üìà *–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*
‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {total_active}
‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}
‚Ä¢ –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
‚Ä¢ –ñ—ñ–Ω–æ–∫: {female}

üìä *–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:*
‚Ä¢ –ó–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {total_active}
‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö: {(total_active/total_users*100) if total_users > 0 else 0:.1f}%"""

    if goals_stats:
        stats_text += "\n\nüéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*"
        for goal, count in goals_stats:
            percentage = (count/total_active*100) if total_active > 0 else 0
            stats_text += f"\n‚Ä¢ {goal}: {count} ({percentage:.1f}%)"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')
    await show_admin_panel(update, context)

async def handle_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_SEARCH_USER:
        return
    
    query = update.message.text
    if query == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
        user_states[user.id] = States.START
        await update.message.reply_text("‚ùå –ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_admin_menu())
        return
    
    # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID –∞–±–æ —ñ–º'—è–º
    found_users = db.search_user(query)
    
    if not found_users:
        await update.message.reply_text(
            f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_admin_menu()
        )
        return
    
    user_data = found_users[0]
    user_id = user_data[1] if len(user_data) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
    user_name = user_data[3] if len(user_data) > 3 else "–ù–µ–≤—ñ–¥–æ–º–æ"
    is_banned = user_data[13] if len(user_data) > 13 else False
    
    status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π" if is_banned else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
    
    user_info = f"""üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:*

üë§ –Ü–º'—è: {user_name}
üÜî ID: `{user_id}`
üìä –°—Ç–∞—Ç—É—Å: {status}

üìù –î—ñ—ó:"""
    
    keyboard = []
    if is_banned:
        keyboard.append(["‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"])
    else:
        keyboard.append(["üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏"])
    keyboard.append(["üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"])
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    
    context.user_data['searched_user_id'] = user_id
    
    await update.message.reply_text(
        user_info,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode='Markdown'
    )

async def handle_ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_BAN_USER:
        return
    
    user_id = update.message.text
    if user_id == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
        user_states[user.id] = States.START
        await update.message.reply_text("‚ùå –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_admin_menu())
        return
    
    try:
        user_id = int(user_id)
        if db.ban_user(user_id):
            await update.message.reply_text(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    user_states[user.id] = States.START

async def handle_unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_UNBAN_USER:
        return
    
    user_id = update.message.text
    if user_id == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
        user_states[user.id] = States.START
        await update.message.reply_text("‚ùå –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_admin_menu())
        return
    
    try:
        user_id = int(user_id)
        if db.unban_user(user_id):
            await update.message.reply_text(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    user_states[user.id] = States.START

async def handle_ban_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞ ID"""
    user = update.effective_user
    if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_BAN_BY_ID:
        return
    
    user_id = update.message.text
    if user_id == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
        user_states[user.id] = States.START
        await update.message.reply_text("‚ùå –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_admin_menu())
        return
    
    try:
        user_id = int(user_id)
        if db.ban_user(user_id):
            await update.message.reply_text(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    user_states[user.id] = States.START

async def handle_ban_by_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º"""
    user = update.effective_user
    if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_BAN_BY_MESSAGE:
        return
    
    if update.message.forward_from:
        user_id = update.message.forward_from.id
        if db.ban_user(user_id):
            await update.message.reply_text(
                f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á `{user_id}` –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{user_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. "
            "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–∑–≤–æ–ª–∏–≤ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.",
            reply_markup=get_admin_menu()
        )
    
    user_states[user.id] = States.START

async def handle_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    user = update.effective_user
    if user.id != ADMIN_ID or user_states.get(user.id) != States.ADMIN_SEND_MESSAGE:
        return
    
    text = update.message.text
    if text == "üîô –°–∫–∞—Å—É–≤–∞—Ç–∏":
        user_states[user.id] = States.START
        await update.message.reply_text("‚ùå –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞", reply_markup=get_admin_menu())
        return
    
    # –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if 'target_user_id' not in context.user_data:
        try:
            target_user_id = int(text)
            context.user_data['target_user_id'] = target_user_id
            await update.message.reply_text(
                f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: `{target_user_id}`\n\n–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
                reply_markup=get_cancel_keyboard(),
                parse_mode='Markdown'
            )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    else:
        # –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        target_user_id = context.user_data['target_user_id']
        message_text = text
        
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üì© *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}",
                parse_mode='Markdown'
            )
            await update.message.reply_text(
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{target_user_id}`",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{target_user_id}`\n\n–ü–æ–º–∏–ª–∫–∞: {e}",
                reply_markup=get_admin_menu(),
                parse_mode='Markdown'
            )
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('target_user_id', None)
        user_states[user.id] = States.START