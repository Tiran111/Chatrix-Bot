from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database.models import db
from keyboards.main_menu import get_main_menu, get_admin_menu, get_cancel_keyboard
from utils.states import States, user_states
from config import ADMIN_ID
import logging
import time

logger = logging.getLogger(__name__)

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", reply_markup=get_main_menu(user.id))
        return
    
    stats = db.get_statistics()
    male, female, total_active, goals_stats = stats
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = db.get_users_count()
    banned_users = len(db.get_banned_users())
    
    stats_text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–Ω–∫–µ—Ç: {total_active}
üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {banned_users}
üë® –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
üë© –ñ—ñ–Ω–æ–∫: {female}"""

    if goals_stats:
        stats_text += "\n\nüéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*"
        for goal, count in goals_stats:
            stats_text += f"\n‚Ä¢ {goal}: {count}"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')
    await update.message.reply_text("üëë *–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_menu(), parse_mode='Markdown')

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    text = update.message.text
    
    logger.info(f"üîß [ADMIN] {user.first_name}: '{text}'")
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_admin_panel(update, context)
    
    elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
        await show_users_management(update, context)
    
    elif text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞":
        await start_broadcast(update, context)
    
    elif text == "üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É":
        await update_database(update, context)
    
    elif text == "üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è":
        await show_ban_management(update, context)
    
    elif text == "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_detailed_stats(update, context)
    
    elif text == "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ":
        await show_admin_panel(update, context)
    
    elif text == "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await update.message.reply_text("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=get_main_menu(user.id))

async def show_users_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    user = update.effective_user
    stats = db.get_statistics()
    male, female, total_active, goals_stats = stats
    
    users_text = f"""üë• *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {db.get_users_count()}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {total_active}
‚Ä¢ –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male}
‚Ä¢ –ñ—ñ–Ω–æ–∫: {female}

‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"""
    
    keyboard = [
        ["üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"],
        ["üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"],
        ["üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]
    ]
    
    await update.message.reply_text(users_text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True), parse_mode='Markdown')

async def handle_users_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    text = update.message.text
    
    if text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
        await show_users_list(update, context)
    
    elif text == "üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞":
        await start_user_search(update, context)
    
    elif text == "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏":
        await start_ban_user(update, context)
    
    elif text == "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏":
        await start_unban_user(update, context)
    
    elif text == "üìß –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è":
        await start_send_message(update, context)

async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    user = update.effective_user
    users = db.get_all_active_users(user.id)
    
    if not users:
        await update.message.reply_text("üòî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_admin_menu())
        return
    
    users_text = "üìã *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
    for i, user_data in enumerate(users[:15], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 15
        user_name = user_data[3] if len(user_data) > 3 else "–ù–µ–≤—ñ–¥–æ–º–æ"
        user_id = user_data[1] if len(user_data) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
        is_banned = user_data[13] if len(user_data) > 13 else False
        
        status = "üö´" if is_banned else "‚úÖ"
        users_text += f"{i}. {status} {user_name} (ID: `{user_id}`)\n"
    
    if len(users) > 15:
        users_text += f"\n... —Ç–∞ —â–µ {len(users) - 15} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    
    await update.message.reply_text(users_text, parse_mode='Markdown')
    await show_users_management(update, context)

async def start_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_SEARCH_USER
    await update.message.reply_text(
        "üîç –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —ñ–º'—è –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=get_cancel_keyboard()
    )

async def start_ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_BAN_USER
    await update.message.reply_text(
        "üö´ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard()
    )

async def start_unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_UNBAN_USER
    await update.message.reply_text(
        "‚úÖ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard()
    )

async def start_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    user = update.effective_user
    user_states[user.id] = States.ADMIN_SEND_MESSAGE
    await update.message.reply_text(
        "üìß –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard()
    )

async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    total_users = db.get_users_count()
    
    await update.message.reply_text(
        f"üì¢ *–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å*\n\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–µ—Ä–∂—É–≤–∞—á—ñ–≤: {total_users}\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:",
        reply_markup=get_cancel_keyboard(),
        parse_mode='Markdown'
    )
    user_states[user.id] = States.BROADCAST

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    message_text = update.message.text
    users = db.get_all_users()
    
    if not users:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏", reply_markup=get_admin_menu())
        user_states[user.id] = States.START
        return
    
    await update.message.reply_text(f"üîÑ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º...")
    
    success_count = 0
    fail_count = 0
    
    for user_data in users:
        try:
            await context.bot.send_message(
                chat_id=user_data[1],
                text=f"üì¢ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}",
                parse_mode='Markdown'
            )
            success_count += 1
            time.sleep(0.1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_data[1]}: {e}")
            fail_count += 1
    
    await update.message.reply_text(
        f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:*\n\n"
        f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: {fail_count}",
        reply_markup=get_admin_menu(),
        parse_mode='Markdown'
    )
    user_states[user.id] = States.START

async def update_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    await update.message.reply_text("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    try:
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–æ—â–æ
        
        await update.message.reply_text(
            "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏: {e}",
            reply_markup=get_admin_menu()
        )

async def show_ban_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º"""
    user = update.effective_user
    banned_users = db.get_banned_users()
    
    ban_text = f"""üö´ *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º*

–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(banned_users)}

–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"""
    
    keyboard = [
        ["üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"],
        ["üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö", "üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"]
    ]
    
    await update.message.reply_text(ban_text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True), parse_mode='Markdown')

async def show_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    stats = db.get_detailed_statistics()
    
    if not stats:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", reply_markup=get_admin_menu())
        return
    
    total_users, active_users, male_count, female_count, avg_age, goals_stats, cities_stats = stats
    
    stats_text = f"""üìà *–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:
‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_users}
‚Ä¢ –ß–æ–ª–æ–≤—ñ–∫—ñ–≤: {male_count}
‚Ä¢ –ñ—ñ–Ω–æ–∫: {female_count}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫: {avg_age:.1f} —Ä–æ–∫—ñ–≤"""

    if goals_stats:
        stats_text += "\n\nüéØ *–¶—ñ–ª—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤:*"
        for goal, count in goals_stats:
            stats_text += f"\n‚Ä¢ {goal}: {count}"
    
    if cities_stats:
        stats_text += "\n\nüèôÔ∏è *–¢–æ–ø –º—ñ—Å—Ç:*"
        for city, count in cities_stats[:5]:  # –¢–æ–ø 5 –º—ñ—Å—Ç
            stats_text += f"\n‚Ä¢ {city}: {count}"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')
    await show_admin_panel(update, context)

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞–Ω–∞—Ö –∞–¥–º—ñ–Ω–∞
async def handle_admin_search_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    search_term = update.message.text
    
    try:
        # –°–ø—Ä–æ–±–∞ –ø–æ—à—É–∫—É –ø–æ ID
        user_id = int(search_term)
        user_data = db.get_user(user_id)
        
        if user_data:
            await show_user_info(update, context, user_data)
        else:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except ValueError:
        # –ü–æ—à—É–∫ –ø–æ —ñ–º–µ–Ω—ñ
        users = db.search_users_by_name(search_term)
        if users:
            await show_users_search_results(update, context, users)
        else:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    user_states[user.id] = States.START
    await show_users_management(update, context)

async def show_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = user_data[1]
    username = user_data[2] or "–ù–µ–º–∞—î"
    name = user_data[3] or "–ù–µ–≤—ñ–¥–æ–º–æ"
    age = user_data[4] or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    gender = "üë® –ß–æ–ª–æ–≤—ñ–∫" if user_data[5] == 'male' else "üë© –ñ—ñ–Ω–∫–∞" if user_data[5] == 'female' else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    city = user_data[6] or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    is_banned = user_data[13] if len(user_data) > 13 else False
    
    status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π" if is_banned else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
    
    info_text = f"""üë§ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*

üÜî ID: `{user_id}`
üë§ –Ü–º'—è: {name}
üìß Username: @{username}
üìä –°—Ç–∞—Ç—É—Å: {status}

üìù *–ü—Ä–æ—Ñ—ñ–ª—å:*
‚Ä¢ –í—ñ–∫: {age}
‚Ä¢ –°—Ç–∞—Ç—å: {gender}
‚Ä¢ –ú—ñ—Å—Ç–æ: {city}"""
    
    await update.message.reply_text(info_text, parse_mode='Markdown')

async def show_users_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, users):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    results_text = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:*\n\n"
    
    for i, user_data in enumerate(users[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 10
        user_id = user_data[1]
        username = user_data[2] or "–ù–µ–º–∞—î"
        name = user_data[3] or "–ù–µ–≤—ñ–¥–æ–º–æ"
        is_banned = user_data[13] if len(user_data) > 13 else False
        
        status = "üö´" if is_banned else "‚úÖ"
        results_text += f"{i}. {status} {name} (@{username}, ID: `{user_id}`)\n"
    
    if len(users) > 10:
        results_text += f"\n... —Ç–∞ —â–µ {len(users) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    
    await update.message.reply_text(results_text, parse_mode='Markdown')