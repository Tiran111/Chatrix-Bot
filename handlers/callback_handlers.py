from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from models import db
from handlers.notifications import notification_system
from handlers.search import show_user_profile
from keyboards.main_menu import get_main_menu
import logging

logger = logging.getLogger(__name__)

async def handle_like_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫—É –∑ callback"""
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        callback_data = query.data
        
        logger.info(f"üîç [LIKE CALLBACK] –û—Ç—Ä–∏–º–∞–Ω–æ callback: {callback_data} –≤—ñ–¥ {user.id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ callback_data
        target_user_id = int(callback_data.split('_')[1])
        
        logger.info(f"üîç [LIKE] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –ª–∞–π–∫–∞—î {target_user_id}")
        
        # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –æ–±–º–µ–∂–µ–Ω—å
        success, message = db.add_like(user.id, target_user_id)
        
        logger.info(f"üîç [LIKE RESULT] –£—Å–ø—ñ—Ö: {success}, –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
        
        if success:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ (–º–∞—Ç—á)
            is_mutual = db.has_liked(target_user_id, user.id)
            logger.info(f"üîç [LIKE MUTUAL] –í–∑–∞—î–º–Ω–∏–π: {is_mutual}")
            
            if is_mutual:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–∞—Ç—á
                await notification_system.notify_new_match(context, user.id, target_user_id)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥—É –≤ Telegram
                matched_user = db.get_user(target_user_id)
                if matched_user:
                    username = matched_user.get('username')
                    if username:
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ Telegram
                        keyboard = InlineKeyboardMarkup([
                            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ Telegram", url=f"https://t.me/{username}")]
                        ])
                        await query.edit_message_text(
                            "üíï –£ –≤–∞—Å –º–∞—Ç—á! –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!\n\n"
                            "üí¨ *–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!*",
                            reply_markup=keyboard,
                            parse_mode='Markdown'
                        )
                    else:
                        await query.edit_message_text(
                            "üíï –£ –≤–∞—Å –º–∞—Ç—á! –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!\n\n"
                            "‚ÑπÔ∏è *–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î username*",
                            parse_mode='Markdown'
                        )
                else:
                    await query.edit_message_text("üíï –£ –≤–∞—Å –º–∞—Ç—á! –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!")
            else:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ª–∞–π–∫
                await notification_system.notify_new_like(context, user.id, target_user_id)
                await query.edit_message_text(f"‚ù§Ô∏è {message}")
        else:
            await query.edit_message_text(f"‚ùå {message}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫—É: {e}", exc_info=True)
        try:
            await update.callback_query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ª–∞–π–∫—É.")
        except:
            pass

async def handle_next_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—ñ' –∑ callback"""
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        
        logger.info(f"üîç [NEXT CALLBACK] –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—ñ' –¥–ª—è {user.id}")
        
        search_users = context.user_data.get('search_users', [])
        current_index = context.user_data.get('current_index', 0)
        search_type = context.user_data.get('search_type', 'random')
        
        logger.info(f"üîç [NEXT CALLBACK] –¢–∏–ø –ø–æ—à—É–∫—É: {search_type}, —ñ–Ω–¥–µ–∫—Å: {current_index}, –∑–Ω–∞–π–¥–µ–Ω–æ: {len(search_users)}")
        
        if not search_users:
            await query.edit_message_text("üîÑ –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ –∞–Ω–∫–µ—Ç–∏...")
            from handlers.search import search_profiles
            await search_profiles(update, context)
            return
        
        # –Ø–∫—â–æ —Ü–µ –ø–æ—à—É–∫ –∑–∞ –º—ñ—Å—Ç–æ–º, —à—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if search_type == 'city':
            if current_index < len(search_users) - 1:
                current_index += 1
                context.user_data['current_index'] = current_index
                user_data = search_users[current_index]
                
                # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—é
                db.add_profile_view(user.id, user_data[1])
                
                await show_user_profile(update, context, user_data, "üèôÔ∏è –ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏")
            else:
                await query.edit_message_text("‚úÖ –¶–µ –æ—Å—Ç–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∞ –≤ —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ", reply_markup=get_main_menu(user.id))
        else:
            # –î–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É - —à—É–∫–∞—î–º–æ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É
            random_user = db.get_random_user(user.id)
            if random_user:
                # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –ø–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—é
                db.add_profile_view(user.id, random_user[1])
                
                await show_user_profile(update, context, random_user, "üíï –ó–Ω–∞–π–¥–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏")
                context.user_data['search_users'] = [random_user]
                context.user_data['current_index'] = 0
            else:
                await query.edit_message_text(
                    "üòî –ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n\n"
                    "üí° –°–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ó–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É\n"
                    "‚Ä¢ –ü–æ—à—É–∫–∞—Ç–∏ –∑–∞ —ñ–Ω—à–∏–º –º—ñ—Å—Ç–æ–º\n"
                    "‚Ä¢ –ó–∞—á–µ–∫–∞—Ç–∏ –ø–æ–∫–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
                    reply_markup=get_main_menu(user.id)
                )
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—ñ': {e}", exc_info=True)
        try:
            await update.callback_query.edit_message_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
        except:
            pass

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def setup_callback_handlers(application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è callback –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    application.add_handler(CallbackQueryHandler(handle_like_callback, pattern='^like_'))
    application.add_handler(CallbackQueryHandler(handle_next_profile_callback, pattern='^next_profile$'))
    logger.info("‚úÖ Callback –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")